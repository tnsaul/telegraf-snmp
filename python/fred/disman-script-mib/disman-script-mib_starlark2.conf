[[processors.starlark]]
# MIB filename - DISMAN-SCRIPT-MIB.txt
# MIB name - DISMAN-SCRIPT-MIB
source = '''
def apply(metric):

    #============= smScriptAbort ===============================
    if metric.tags["name"] == "smScriptAbort":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("smRunExitCode")
        vb2 = metric.fields.get("smRunEndTime")
        vb3 = metric.fields.get("smRunError")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification is generated whenever a running scriptterminates with an smRunExitCode unequal to noError."
        
    #============= smScriptResult ===============================
    if metric.tags["name"] == "smScriptResult":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("smRunResult")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification can be used by scripts to notify othermanagement applications about results produced by thescript.This notification is not automatically generated by theScript MIB implementation. It is the responsibility ofthe executing script to emit this notification where itis appropriate to do so."
        
    #============= smScriptException ===============================
    if metric.tags["name"] == "smScriptException":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("smRunError")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification can be used by scripts to notify othermanagement applications about script errors.This notification is not automatically generated by theScript MIB implementation. It is the responsibility ofthe executing script or the runtime system to emit thisnotification where it is appropriate to do so."
        
    
    return metric 
'''