[[processors.starlark]]
# MIB filename - DISMAN-EVENT-MIB.txt
# MIB name - DISMAN-EVENT-MIB
source = '''
def apply(metric):

    #============= mteTriggerFired ===============================
    if metric.tags["name"] == "mteTriggerFired":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("mteHotTrigger")
        vb2 = metric.fields.get("mteHotTargetName")
        vb3 = metric.fields.get("mteHotContextName")
        vb4 = metric.fields.get("mteHotOID")
        vb5 = metric.fields.get("mteHotValue")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Notification that the trigger indicated by the objectinstances has fired for triggers with mteTriggerTypeboolean or existence."
        
        return metric
    #============= mteTriggerRising ===============================
    if metric.tags["name"] == "mteTriggerRising":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("mteHotTrigger")
        vb2 = metric.fields.get("mteHotTargetName")
        vb3 = metric.fields.get("mteHotContextName")
        vb4 = metric.fields.get("mteHotOID")
        vb5 = metric.fields.get("mteHotValue")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Notification that the rising threshold was met for triggerswith mteTriggerType threshold."
        
        return metric
    #============= mteTriggerFalling ===============================
    if metric.tags["name"] == "mteTriggerFalling":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("mteHotTrigger")
        vb2 = metric.fields.get("mteHotTargetName")
        vb3 = metric.fields.get("mteHotContextName")
        vb4 = metric.fields.get("mteHotOID")
        vb5 = metric.fields.get("mteHotValue")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Notification that the falling threshold was met for triggerswith mteTriggerType threshold."
        
        return metric
    #============= mteTriggerFailure ===============================
    if metric.tags["name"] == "mteTriggerFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("mteHotTrigger")
        vb2 = metric.fields.get("mteHotTargetName")
        vb3 = metric.fields.get("mteHotContextName")
        vb4 = metric.fields.get("mteHotOID")
        vb5 = metric.fields.get("mteFailedReason")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Notification that an attempt to check a trigger has failed.The network manager must enable this notification only witha certain fear and trembling as it can easily crowd out moreimportant information.  It should be used only to help diagnosea problem that has appeared in the error counters and can notbe found otherwise."
        
        return metric
    #============= mteEventSetFailure ===============================
    if metric.tags["name"] == "mteEventSetFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("mteHotTrigger")
        vb2 = metric.fields.get("mteHotTargetName")
        vb3 = metric.fields.get("mteHotContextName")
        vb4 = metric.fields.get("mteHotOID")
        vb5 = metric.fields.get("mteFailedReason")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Notification that an attempt to do a set in response to anevent has failed.The network manager must enable this notification only witha certain fear and trembling as it can easily crowd out moreimportant information.  It should be used only to help diagnosea problem that has appeared in the error counters and can notbe found otherwise."
        
        return metric
    
    return metric 
'''