[[processors.starlark]]
# MIB filename - VMWARE-NSX-MIB.mib
# MIB name - VMWARE-NSX-MIB
source = '''
def apply(metric):

    #============= vmwNsxTAlarmManagementAlarmServiceOverloaded ===============================
    if metric.tags["name"] == "vmwNsxTAlarmManagementAlarmServiceOverloaded":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Due to heavy volume of alarms reported the alarm service is temporarilyoverloaded. The NSX UI and GET apiv1alarms NSX API have stoppedreporting new alarms however syslog entries and SNMP traps (if enabled)are still being emitted reporting the underlying event details. When theunderlying issues causing the heavy volume of alarms are addressed thealarm service will start reporting new alarms again.Action requiredReview all active alarms using the Alarms page in the NSX UI or using theGET apiv1alarmsstatus=OPENACKNOWLEDGEDSUPPRESSED NSX API. For eachactive alarm investigate the root cause by following the recommended actionfor the alarm. When sufficient alarms are resolved the alarm service willstart reporting new alarms again."
        
        return metric
    #============= vmwNsxTAlarmManagementAlarmServiceOverloadedClear ===============================
    if metric.tags["name"] == "vmwNsxTAlarmManagementAlarmServiceOverloadedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The heavy volume of alarms has subsided and new alarms are being reportedagain.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTAlarmManagementHeavyVolumeOfAlarms ===============================
    if metric.tags["name"] == "vmwNsxTAlarmManagementHeavyVolumeOfAlarms":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEventId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Due to heavy volume of vmwNsxTDataCenterEventId alarms the alarm service hastemporarily stopped reporting alarms of this type. The NSX UI andGET apiv1alarms NSX API are not reporting new instances of thesealarms however syslog entries and SNMP traps (if enabled) arestill being emitted reporting the underlying event details. When theunderlying issues causing the heavy volume of vmwNsxTDataCenterEventId alarms areaddressed the alarm service will start reporting new vmwNsxTDataCenterEventIdalarms when new issues are detected again.Action requiredReview all active alarms of type vmwNsxTDataCenterEventId using theAlarms page in the NSX UI or using the NSX API GETapiv1alarmsstatus=OPENACKNOWLEDGEDSUPPRESSED. For each activealarm investigate the root cause by following the recommended actionfor the alarm. When sufficient alarms are resolved the alarm servicewill start reporting new vmwNsxTDataCenterEventId alarms again."
        
        return metric
    #============= vmwNsxTAlarmManagementHeavyVolumeOfAlarmsClear ===============================
    if metric.tags["name"] == "vmwNsxTAlarmManagementHeavyVolumeOfAlarmsClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEventId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The heavy volume of vmwNsxTDataCenterEventId alarms has subsided and new alarms ofthis type are being reported again.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTAuditLogHealthAuditLogFileUpdateError ===============================
    if metric.tags["name"] == "vmwNsxTAuditLogHealthAuditLogFileUpdateError":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "At least one of the monitored log files has readonly permissions or hasincorrect usergroup ownership.Action required1. On all NSX appliances for example Manager nodes Edge nodes etc.ensure the permissions for the varlog directory is 775 and the ownershipis rootsyslog.2. On Manager and Global Manager nodes ensure the file permissionsfor auth.log nsxaudit.log nsxauditwrite.log rsyslog and syslog undervarlog is 640 and ownership is syslogadmin.3. On Edge and Public Cloud Gateway nodes ensure the file permissionsfor rsyslog and syslog under varlog is 640 and ownership is syslogadmin.4. On ESXi host nodes ensure the file permissions of auth.log nsxsyslog.logand syslog.log under varlog is 755 and ownership is rootroot.5. On KVM host nodes ensure the file permissions of auth.log and syslogunder varlog is 775 and ownership is rootsyslog.6. If any of these files have incorrect permissions or ownership invoke thecommands chmod mode path and chown usergroup path."
        
        return metric
    #============= vmwNsxTAuditLogHealthAuditLogFileUpdateErrorClear ===============================
    if metric.tags["name"] == "vmwNsxTAuditLogHealthAuditLogFileUpdateErrorClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "All monitored log files have the correct file permissions and ownership.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTAuditLogHealthRemoteLoggingServerError ===============================
    if metric.tags["name"] == "vmwNsxTAuditLogHealthRemoteLoggingServerError":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterHostnameOrIPAddressWithPort")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Log messages to logging server vmwNsxTDataCenterHostnameOrIPAddressWithPort (vmwNsxTDataCenterEntityId)cannot be delivered possibly due to an unresolvable FQDN an invalid TLScertificate or missing NSX appliance iptables rule.Action required1. Ensure that vmwNsxTDataCenterHostnameOrIPAddressWithPort is the correct hostname orIP address and port.2. If the logging server is specified using a FQDN ensure the FQDN is resolvablefrom the NSX appliance using the NSX CLI command nslookup fqdn. If notresolvable verify the correct FQDN is specified and the network DNS server hasthe required entry for the FQDN.3. If the logging server is configured to use TLS verify the specified certificateis valid. For example ensure the logging server is actually using the certificateor verify the certificate has not expired using the openssl commandopenssl x509 in certfilepath noout dates.4. NSX appliances use iptables rules to explicitly allow outgoing traffic. Verifythe iptables rule for the logging server is configured properly by invoking theNSX CLI command verify loggingservers which reconfigures logging serveriptables rules as needed.5. If for any reason the logging server is misconfigured it should be deletedusing the NSX CLI del loggingserver hostnameoripaddressportproto proto level level command and readded with the correct configuration."
        
        return metric
    #============= vmwNsxTAuditLogHealthRemoteLoggingServerErrorClear ===============================
    if metric.tags["name"] == "vmwNsxTAuditLogHealthRemoteLoggingServerErrorClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterHostnameOrIPAddressWithPort")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Configuration for logging server vmwNsxTDataCenterHostnameOrIPAddressWithPort (vmwNsxTDataCenterEntityId)appear correct.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCapacityMaximumCapacity ===============================
    if metric.tags["name"] == "vmwNsxTCapacityMaximumCapacity":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCapacityDisplayName")
        vb9 = metric.fields.get("vmwNsxTDataCenterCapacityUsageCount")
        vb10 = metric.fields.get("vmwNsxTDataCenterMaxSupportedCapacityCount")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of objects defined in the system for vmwNsxTDataCenterCapacityDisplayName hasreached vmwNsxTDataCenterCapacityUsageCount which is at or above the maximum supportedcount of vmwNsxTDataCenterMaxSupportedCapacityCount.Action requiredEnsure that the number of NSX objects created is within the limitssupported by NSX. If there are any unused objects delete them using therespective NSX UI or API from the system.Consider increasing the form factor of all Manager nodes andor Edgenodes. Note that the form factor of each node type should be thesame. If not the same the capacity limits for the lowest form factordeployed are used."
        
        return metric
    #============= vmwNsxTCapacityMaximumCapacityClear ===============================
    if metric.tags["name"] == "vmwNsxTCapacityMaximumCapacityClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCapacityDisplayName")
        vb9 = metric.fields.get("vmwNsxTDataCenterCapacityUsageCount")
        vb10 = metric.fields.get("vmwNsxTDataCenterMaxSupportedCapacityCount")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of objects defined in the system for vmwNsxTDataCenterCapacityDisplayName hasreached vmwNsxTDataCenterCapacityUsageCount and is below the maximum supported count ofvmwNsxTDataCenterMaxSupportedCapacityCount.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCapacityMaximumCapacityThreshold ===============================
    if metric.tags["name"] == "vmwNsxTCapacityMaximumCapacityThreshold":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCapacityDisplayName")
        vb9 = metric.fields.get("vmwNsxTDataCenterCapacityUsageCount")
        vb10 = metric.fields.get("vmwNsxTDataCenterMaxCapacityThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of objects defined in the system for vmwNsxTDataCenterCapacityDisplayName hasreached vmwNsxTDataCenterCapacityUsageCount which is at or above the maximum capacitythreshold of vmwNsxTDataCenterMaxCapacityThreshold.Action requiredNavigate to the capacity page in the NSX UI and review current usage versusthreshold limits. If the current usage is expected consider increasing themaximum threshold values. If the current usage is unexpected review thenetwork policies configured to decrease usage below the maximum threshold."
        
        return metric
    #============= vmwNsxTCapacityMaximumCapacityThresholdClear ===============================
    if metric.tags["name"] == "vmwNsxTCapacityMaximumCapacityThresholdClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCapacityDisplayName")
        vb9 = metric.fields.get("vmwNsxTDataCenterCapacityUsageCount")
        vb10 = metric.fields.get("vmwNsxTDataCenterMaxCapacityThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of objects defined in the system for vmwNsxTDataCenterCapacityDisplayName hasreached vmwNsxTDataCenterCapacityUsageCount and is below the maximum capacity thresholdof vmwNsxTDataCenterMaxCapacityThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCapacityMinimumCapacityThreshold ===============================
    if metric.tags["name"] == "vmwNsxTCapacityMinimumCapacityThreshold":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCapacityDisplayName")
        vb9 = metric.fields.get("vmwNsxTDataCenterCapacityUsageCount")
        vb10 = metric.fields.get("vmwNsxTDataCenterMinCapacityThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of objects defined in the system for vmwNsxTDataCenterCapacityDisplayName hasreached vmwNsxTDataCenterCapacityUsageCount which is at or above the minimum capacitythreshold of vmwNsxTDataCenterMinCapacityThreshold.Action requiredNavigate to the capacity page in the NSX UI and review current usage versusthreshold limits. If the current usage is expected consider increasing theminimum threshold values. If the current usage is unexpected review thenetwork policies configured to decrease usage below the minimum threshold."
        
        return metric
    #============= vmwNsxTCapacityMinimumCapacityThresholdClear ===============================
    if metric.tags["name"] == "vmwNsxTCapacityMinimumCapacityThresholdClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCapacityDisplayName")
        vb9 = metric.fields.get("vmwNsxTDataCenterCapacityUsageCount")
        vb10 = metric.fields.get("vmwNsxTDataCenterMinCapacityThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of objects defined in the system for vmwNsxTDataCenterCapacityDisplayName hasreached vmwNsxTDataCenterCapacityUsageCount and is below the minimum capacity thresholdof vmwNsxTDataCenterMinCapacityThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCertificatesCertificateExpirationApproaching ===============================
    if metric.tags["name"] == "vmwNsxTCertificatesCertificateExpirationApproaching":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Certificate vmwNsxTDataCenterEntityId is approaching expiration.Action requiredEnsure services that are currently using the certificate are updatedto use a new nonexpiring certificate. For example to apply a newcertificate to the HTTP service invoke the following NSX API POSTapiv1nodeserviceshttpaction=applycertificatecertificateid=certidwhere certid is the ID of a valid certificate reported by theGET apiv1trustmanagementcertificates NSX API. Once the expiringcertificate is no longer in use it should be deleted by invoking theDELETE apiv1trustmanagementcertificatesvmwNsxTDataCenterEntityId NSX API."
        
        return metric
    #============= vmwNsxTCertificatesCertificateExpirationApproachingClear ===============================
    if metric.tags["name"] == "vmwNsxTCertificatesCertificateExpirationApproachingClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The expiring certificate vmwNsxTDataCenterEntityId has been removed or is no longerapproaching expiration.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCertificatesCertificateExpired ===============================
    if metric.tags["name"] == "vmwNsxTCertificatesCertificateExpired":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Certificate vmwNsxTDataCenterEntityId has expired.Action requiredEnsure services that are currently using the certificate are updatedto use a new nonexpired certificate. For example to apply a newcertificate to the HTTP service invoke the NSX API POSTapiv1nodeserviceshttpaction=applycertificatecertificateid=certidwhere certid is the ID of a valid certificate reported by theGET apiv1trustmanagementcertificates NSX API. Once the expiredcertificate is no longer in use it should be deleted by invoking theDELETE apiv1trustmanagementcertificatesvmwNsxTDataCenterEntityId NSX API.If the expired certificate is used by an Intelligence node it needs to beupdated to use a new certificate. On the Intelligence node invoke the NSX CLIcommand set intelligence managercluster certb64encodedpem pem tospecify a new cluster certificate. Or if the expired certificate was used asa node certificate invoke the following NSX CLI command to update the nodecertificate set intelligence managernode nsxmgripaddress certb64encodedpem pem."
        
        return metric
    #============= vmwNsxTCertificatesCertificateExpiredClear ===============================
    if metric.tags["name"] == "vmwNsxTCertificatesCertificateExpiredClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The expired certificate vmwNsxTDataCenterEntityId has been removed or is no longerexpired.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCertificatesCertificateIsAboutToExpire ===============================
    if metric.tags["name"] == "vmwNsxTCertificatesCertificateIsAboutToExpire":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Certificate vmwNsxTDataCenterEntityId is about to expire.Action requiredEnsure services that are currently using the certificate are updatedto use a new nonexpiring certificate. For example to apply a newcertificate to the HTTP service invoke the following NSX API POSTapiv1nodeserviceshttpaction=applycertificatecertificateid=certidwhere certid is the ID of a valid certificate reported by theGET apiv1trustmanagementcertificates NSX API. Once the expiringcertificate is no longer in use it should be deleted by invoking theDELETE apiv1trustmanagementcertificatesvmwNsxTDataCenterEntityId NSX API."
        
        return metric
    #============= vmwNsxTCertificatesCertificateIsAboutToExpireClear ===============================
    if metric.tags["name"] == "vmwNsxTCertificatesCertificateIsAboutToExpireClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The expiring certificate vmwNsxTDataCenterEntityId has been removed or is no longerabout to expire.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCniHealthHyperbusManagerConnectionDown ===============================
    if metric.tags["name"] == "vmwNsxTCniHealthHyperbusManagerConnectionDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Hyperbus cannot communicate with the Manager node.Action requiredThe hyperbus vmkernel interface (vmk50) may be missing. Please refer toKnowledge Base article httpskb.vmware.comsarticle67432."
        
        return metric
    #============= vmwNsxTCniHealthHyperbusManagerConnectionDownClear ===============================
    if metric.tags["name"] == "vmwNsxTCniHealthHyperbusManagerConnectionDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Hyperbus can communicate with the Manager node.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToManagerNodeDown ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToManagerNodeDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        vb9 = metric.fields.get("vmwNsxTDataCenterTimeoutInMinutes")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Transport node vmwNsxTDataCenterEntityId control plane connection to Manager node vmwNsxTDataCenterApplianceAddress isdown for at least vmwNsxTDataCenterTimeoutInMinutes minutes from the Transport nodes point of view.Action required1. Check the connectivity from Transport node vmwNsxTDataCenterEntityId to Manager node vmwNsxTDataCenterApplianceAddressinterface via ping. If they are not pingable check for flakiness in network connectivity.2. Check to see if the TCP connections are established using the netstat output to see if theController service on the Manager node vmwNsxTDataCenterApplianceAddress is listening for connections on port1235. If not check firewall (or) iptables rules to see if port 1235 is blocking Transport nodevmwNsxTDataCenterEntityId connection requests. Ensure that there are no host firewalls or network firewalls inthe underlay are blocking the required IP ports between Manager nodes and Transport nodes.This is documented in our ports and protocols tool which is here httpsports.vmware.com.3. It is possible that the Transport node vmwNsxTDataCenterEntityId may still be in maintenance mode.You can check whether the Transport node is in maintenance mode via the following APIGET httpsnsxmgrapiv1transportnodestnuuidWhen maintenance mode is set the Transport node will not be connected to the Controllerservice. This is usually the case when host upgrade is in progress. Wait for a few minutes andcheck connectivity again.Note Please note that this alarm is not critical and should be resolved. GSS need not becontacted for the notification of this alarm unless the alarm remains unresolved over anextended period of time."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToManagerNodeDownClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToManagerNodeDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Transport node vmwNsxTDataCenterEntityId restores the control plane connection to Manager nodevmwNsxTDataCenterApplianceAddress.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToManagerNodeDownTooLong ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToManagerNodeDownTooLong":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        vb9 = metric.fields.get("vmwNsxTDataCenterTimeoutInMinutes")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Transport node vmwNsxTDataCenterEntityId control plane connection to Manager node vmwNsxTDataCenterApplianceAddress isdown for at least vmwNsxTDataCenterTimeoutInMinutes minutes from the Transport nodes point of view.Action required1. Check the connectivity from Transport node vmwNsxTDataCenterEntityId to Manager node vmwNsxTDataCenterApplianceAddressinterface via ping. If they are not pingable check for flakiness in network connectivity.2. Check to see if the TCP connections are established using the netstat output to see if theController service on the Manager node vmwNsxTDataCenterApplianceAddress is listening for connections on port1235. If not check firewall (or) iptables rules to see if port 1235 is blocking Transport nodevmwNsxTDataCenterEntityId connection requests. Ensure that there are no host firewalls or network firewalls inthe underlay are blocking the required IP ports between Manager nodes and Transport nodes.This is documented in our ports and protocols tool which is here httpsports.vmware.com.3. It is possible that the Transport node vmwNsxTDataCenterEntityId may still be in maintenance mode.You can check whether the Transport node is in maintenance mode via the following APIGET httpsnsxmgrapiv1transportnodestnuuid.When maintenance mode is set the Transport node will not be connected to the Controllerservice. This is usually the case when host upgrade is in progress. Wait for a few minutes andcheck connectivity again."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToManagerNodeDownTooLongClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToManagerNodeDownTooLongClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Transport node vmwNsxTDataCenterEntityId restores the control plane connection to Manager nodevmwNsxTDataCenterApplianceAddress.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToTransportNodeDown ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToTransportNodeDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCentralControlPlaneId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Controller service vmwNsxTDataCenterCentralControlPlaneId to Transport node vmwNsxTDataCenterEntityId down for atleast three minutes from Controller services point of view.Action required1. Check the connectivity from the Controller service vmwNsxTDataCenterCentralControlPlaneId andTransport node vmwNsxTDataCenterEntityId. interface via ping. If they are not pingable check for flakiness innetwork connectivity.2. Check to see if the TCP connections are established using the netstat output to see if theController service vmwNsxTDataCenterCentralControlPlaneId is listening for connections on port1235. If not check firewall (or) iptables rules to see if port 1235 is blocking Transport nodevmwNsxTDataCenterEntityId connection requests. Ensure that there are no host firewalls or network firewalls inthe underlay are blocking the required IP ports between Manager nodes and Transport nodes.This is documented in our ports and protocols tool which is here httpsports.vmware.com.3. It is possible that the Transport node vmwNsxTDataCenterEntityId may still be in maintenance mode.You can check whether the Transport node is in maintenance mode via the following APIGET httpsnsxmgrapiv1transportnodestnuuidWhen maintenance mode is set the Transport node will not be connected to the Controllerservice. This is usually the case when host upgrade is in progress. Wait for a few minutes andcheck connectivity again.Note Please note that this alarm is not critical and should be resolved. GSS need not becontacted for the notification of this alarm unless the alarm remains unresolved over anextended period of time."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToTransportNodeDownClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToTransportNodeDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCentralControlPlaneId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Controller service vmwNsxTDataCenterCentralControlPlaneId restores connection to Transport node vmwNsxTDataCenterEntityId.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToTransportNodeDownLong ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToTransportNodeDownLong":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCentralControlPlaneId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Controller service vmwNsxTDataCenterCentralControlPlaneId to Transport node vmwNsxTDataCenterEntityId down for atleast 15 minutes from Controller services point of view.Action required1. Check the connectivity from the Controller service vmwNsxTDataCenterCentralControlPlaneId andTransport node vmwNsxTDataCenterEntityId. interface via ping. If they are not pingable check for flakiness innetwork connectivity.2. Check to see if the TCP connections are established using the netstat output to see if theController service vmwNsxTDataCenterCentralControlPlaneId is listening for connections on port1235. If not check firewall (or) iptables rules to see if port 1235 is blocking Transport nodevmwNsxTDataCenterEntityId connection requests. Ensure that there are no host firewalls or network firewalls inthe underlay are blocking the required IP ports between Manager nodes and Transport nodes.This is documented in our ports and protocols tool which is here httpsports.vmware.com.3. It is possible that the Transport node vmwNsxTDataCenterEntityId may still be in maintenance mode.You can check whether the Transport node is in maintenance mode via the following APIGET httpsnsxmgrapiv1transportnodestnuuidWhen maintenance mode is set the Transport node will not be connected to the Controllerservice. This is usually the case when host upgrade is in progress. Wait for a few minutes andcheck connectivity again."
        
        return metric
    #============= vmwNsxTCommunicationControlChannelToTransportNodeDownLongClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationControlChannelToTransportNodeDownLongClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterCentralControlPlaneId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Controller service vmwNsxTDataCenterCentralControlPlaneId restores connection to Transport node vmwNsxTDataCenterEntityId.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationManagementChannelToTransportNodeDown ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagementChannelToTransportNodeDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterTransportNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterTransportNodeAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Management channel to Transport Node vmwNsxTDataCenterTransportNodeName(vmwNsxTDataCenterTransportNodeAddress) is down for 5 minutes.Action requiredEnsure there is network connectivity between the Manager nodesand Transport node vmwNsxTDataCenterTransportNodeName (vmwNsxTDataCenterTransportNodeAddress)and no firewalls are blocking traffic between the nodes.On Windows Transport nodes ensure the nsxproxy service is running on theTransport node by invoking the command CNSXnsxproxynsxproxy.ps1 statusin the Windows PowerShell. If it is not running restart it byinvoking the command CNSXnsxproxynsxproxy.ps1 restart.On all other Transport nodes ensure the nsxproxy service is running on theTransport node by invoking the command etcinit.dnsxproxy status.If it is not running restart it by invoking the commandetcinit.dnsxproxy restart."
        
        return metric
    #============= vmwNsxTCommunicationManagementChannelToTransportNodeDownClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagementChannelToTransportNodeDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterTransportNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterTransportNodeAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Management channel to Transport Node vmwNsxTDataCenterTransportNodeName(vmwNsxTDataCenterTransportNodeAddress) is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationManagementChannelToTransportNodeDownLg ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagementChannelToTransportNodeDownLg":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterTransportNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterTransportNodeAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Management channel to Transport Node vmwNsxTDataCenterTransportNodeName(vmwNsxTDataCenterTransportNodeAddress) is down for 15 minutes.Action requiredEnsure there is network connectivity between the Manager nodesand Transport node vmwNsxTDataCenterTransportNodeName (vmwNsxTDataCenterTransportNodeAddress)and no firewalls are blocking traffic between the nodes.On Windows Transport nodes ensure the nsxproxy service is running on theTransport node by invoking the command CNSXnsxproxynsxproxy.ps1 statusin the Windows PowerShell. If it is not running restart it byinvoking the command CNSXnsxproxynsxproxy.ps1 restart.On all other Transport nodes ensure the nsxproxy service is running on theTransport node by invoking the command etcinit.dnsxproxy status.If it is not running restart it by invoking the commandetcinit.dnsxproxy restart."
        
        return metric
    #============= vmwNsxTCommunicationManagementChannelToTransportNodeDownLgClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagementChannelToTransportNodeDownLgClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterTransportNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterTransportNodeAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Management channel to Transport Node vmwNsxTDataCenterTransportNodeName(vmwNsxTDataCenterTransportNodeAddress) is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationManagerClusterLatencyHigh ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerClusterLatencyHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterManagerNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        vb10 = metric.fields.get("vmwNsxTDataCenterRemoteManagerNodeId")
        vb11 = metric.fields.get("vmwNsxTDataCenterRemoteApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The average network latency between Manager nodes vmwNsxTDataCenterManagerNodeId (vmwNsxTDataCenterApplianceAddress)and vmwNsxTDataCenterRemoteManagerNodeId (vmwNsxTDataCenterRemoteApplianceAddress) is more than 10ms for the last 5 minutes.Action requiredEnsure there are no firewall rules blocking ping traffic between the Manager nodes.If there are other high bandwidth servers and applications sharing the local networkconsider moving these to a different network."
        
        return metric
    #============= vmwNsxTCommunicationManagerClusterLatencyHighClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerClusterLatencyHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterManagerNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        vb10 = metric.fields.get("vmwNsxTDataCenterRemoteManagerNodeId")
        vb11 = metric.fields.get("vmwNsxTDataCenterRemoteApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The average network latency between Manager nodes vmwNsxTDataCenterManagerNodeId (vmwNsxTDataCenterApplianceAddress)and vmwNsxTDataCenterRemoteManagerNodeId (vmwNsxTDataCenterRemoteApplianceAddress) is within 10ms.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationManagerControlChannelDown ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerControlChannelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterManagerNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The communication between the management function and the controlfunction has failed on Manager node vmwNsxTDataCenterManagerNodeName (vmwNsxTDataCenterApplianceAddress).Action requiredOn Manager node vmwNsxTDataCenterManagerNodeName (vmwNsxTDataCenterApplianceAddress) please invokethe following two NSX CLI commands restart service mgmtplanebus andrestart service manager."
        
        return metric
    #============= vmwNsxTCommunicationManagerControlChannelDownClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerControlChannelDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterManagerNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The communication between the management function and the control functionhas been restored on Manager node vmwNsxTDataCenterManagerNodeName (vmwNsxTDataCenterApplianceAddress).Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationManagerFQDNLookupFailure ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerFQDNLookupFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceFQDN")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DNS lookup failed for Manager node vmwNsxTDataCenterEntityId with FQDNvmwNsxTDataCenterApplianceFQDN and the publishfqdns flag was set.Action required1. Assign correct FQDNs to all Manager nodes and verify the DNSconfiguration is correct for successful lookup of all Managernodes FQDNs.2. Alternatively disable the use of FQDNs by invoking the NSX APIPUT apiv1configsmanagement with publishfqdns set to false in therequest body. After that calls from Transport nodes and from Federationto Manager nodes in this cluster will use only IP addresses."
        
        return metric
    #============= vmwNsxTCommunicationManagerFQDNLookupFailureClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerFQDNLookupFailureClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceFQDN")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "FQDN lookup succeeded for Manager node vmwNsxTDataCenterEntityId with FQDNvmwNsxTDataCenterApplianceFQDN or the publishfqdns flag was cleared.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTCommunicationManagerFQDNReverseLookupFailure ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerFQDNReverseLookupFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Reverse DNS lookup failed for Manager node vmwNsxTDataCenterEntityId with IP addressvmwNsxTDataCenterApplianceAddress and the publishfqdns flag was set.Action required1. Assign correct FQDNs to all Manager nodes and verify the DNSconfiguration is correct for successful reverse lookup of the Managernodes IP address.2. Alternatively disable the use of FQDNs by invoking the NSX APIPUT apiv1configsmanagement with publishfqdns set to false in therequest body. After that calls from Transport nodes and from Federationto Manager nodes in this cluster will use only IP addresses."
        
        return metric
    #============= vmwNsxTCommunicationManagerFQDNReverseLookupFailureClear ===============================
    if metric.tags["name"] == "vmwNsxTCommunicationManagerFQDNReverseLookupFailureClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterApplianceAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Reverse DNS lookup succeeded for Manager node vmwNsxTDataCenterEntityId with IP addressvmwNsxTDataCenterApplianceAddress or the publishfqdns flag was cleared.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDHCPPoolLeaseAllocationFailed ===============================
    if metric.tags["name"] == "vmwNsxTDHCPPoolLeaseAllocationFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDHCPServerId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The addresses in IP Pool vmwNsxTDataCenterEntityId of DHCP Server vmwNsxTDataCenterDHCPServerId havebeen exhausted. The last DHCP request has failed and future requests willfail.Action requiredReview the DHCP pool configuration in the NSX UI or on the Edge node wherethe DHCP server is running by invoking the NSX CLI command get dhcp ippool.Also review the current active leases on the Edge node by invoking the NSXCLI command get dhcp lease.  Compare the leases to the number of activeVMs. Consider reducing the lease time on the DHCP server configuration ifthe number of VMs are low compared to the number of active leases. Alsoconsider expanding the pool range for the DHCP server by visiting theNetworking  Segments  Segment page in the NSX UI."
        
        return metric
    #============= vmwNsxTDHCPPoolLeaseAllocationFailedClear ===============================
    if metric.tags["name"] == "vmwNsxTDHCPPoolLeaseAllocationFailedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDHCPServerId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IP Pool vmwNsxTDataCenterEntityId of DHCP Server vmwNsxTDataCenterDHCPServerId is no longer exhausted.A lease is successfully allocated to the last DHCP request.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDHCPPoolOverloaded ===============================
    if metric.tags["name"] == "vmwNsxTDHCPPoolOverloaded":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDHCPServerId")
        vb9 = metric.fields.get("vmwNsxTDataCenterDHCPPoolUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The DHCP Server vmwNsxTDataCenterDHCPServerId IP Pool vmwNsxTDataCenterEntityId usage is approachingexhaustion with vmwNsxTDataCenterDHCPPoolUsage IPs allocated.Action requiredReview the DHCP pool configuration in the NSX UI or on the Edge node wherethe DHCP server is running by invoking the NSX CLI command get dhcp ippool.Also review the current active leases on the Edge node by invoking the NSXCLI command get dhcp lease.  Compare the leases to the number of activeVMs. Consider reducing the lease time on the DHCP server configuration ifthe number of VMs are low compared to the number of active leases. Alsoconsider expanding the pool range for the DHCP server by visiting theNetworking  Segments  Segment page in the NSX UI."
        
        return metric
    #============= vmwNsxTDHCPPoolOverloadedClear ===============================
    if metric.tags["name"] == "vmwNsxTDHCPPoolOverloadedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDHCPServerId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The DHCP Server vmwNsxTDataCenterDHCPServerId IP Pool vmwNsxTDataCenterEntityId has fallen below thehigh usage threshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedFirewallDFWCPUUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedFirewallDFWCPUUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The DFW CPU usage on Transport node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredConsider rebalancing the VM workloads on this host to other hosts.  Pleasereview the security design for optimization. For example use the applytoconfiguration if the rules are not applicable to the entire datacenter."
        
        return metric
    #============= vmwNsxTDistributedFirewallDFWCPUUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedFirewallDFWCPUUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The DFW CPU usage on Transport node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedFirewallDFWMemoryUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedFirewallDFWMemoryUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterHeapType")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The DFW Memory usage vmwNsxTDataCenterHeapType on Transport nodevmwNsxTDataCenterEntityId has reached vmwNsxTDataCenterSystemResourceUsage whichis at or above the very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredView the current DFW memory usage by invoking the NSX CLI commandget firewall thresholds on the host. Consider rebalancing theworkloads on this host to other hosts."
        
        return metric
    #============= vmwNsxTDistributedFirewallDFWMemoryUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedFirewallDFWMemoryUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterHeapType")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The DFW Memory usage vmwNsxTDataCenterHeapType on Transport nodevmwNsxTDataCenterEntityId has reached vmwNsxTDataCenterSystemResourceUsage whichis below the very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSMaxEventsReached ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSMaxEventsReached":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIDSEventsCount")
        vb9 = metric.fields.get("vmwNsxTDataCenterMaxIDSEventsAllowed")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of intrusion events in the system is vmwNsxTDataCenterIDSEventsCountwhich is higher than the maximum allowed value vmwNsxTDataCenterMaxIDSEventsAllowed.Action requiredThere is no manual intervention required. A purge job will kick in automaticallyevery 3 minutes and delete 10 of the older records to bring the total intrusion eventscount in the system to below the threshold value of 1.5 million events."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSMaxEventsReachedClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSMaxEventsReachedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIDSEventsCount")
        vb9 = metric.fields.get("vmwNsxTDataCenterMaxIDSEventsAllowed")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of intrusion events in the system is vmwNsxTDataCenterIDSEventsCountwhich is below the maximum allowed value vmwNsxTDataCenterMaxIDSEventsAllowed.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine CPU usage has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the highthreshold value of 75.Action requiredConsider rebalancing the VM workloads on this host to other hosts."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine CPU usage has reachedvmwNsxTDataCenterSystemResourceUsage which is below the highthreshold value of 75.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageMediumHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageMediumHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine CPU usage has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the mediumhigh threshold value of 85.Action requiredConsider rebalancing the VM workloads on this host to other hosts."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageMediumHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageMediumHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine CPU usage has reachedvmwNsxTDataCenterSystemResourceUsage which is below the medium highthreshold value of 85.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine CPU usage has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the veryhigh threshold value of 95.Action requiredConsider rebalancing the VM workloads on this host to other hosts."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineCPUUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine CPU usage has reachedvmwNsxTDataCenterSystemResourceUsage which is below the veryhigh threshold value of 95.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineDown ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX IDPS is enabled via NSX policy and IDPS rules are configured butNSXIDPS engine is down.Action required1. Check varlognsxidpsnsxidps.log andvarlognsxsyslog.log to see if there are errors reported.2. Invoke the NSX CLI command get ids engine status to checkif NSX Distributed IDPS is in disabled state.  If soinvoke etcinit.dnsxidps start to start the service.3. Invoke etcinit.dnsxvdpi status to check if nsxvdpi is running.If not invoke etcinit.dnsxvdpi start to start the service."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineDownClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX IDPS is in one of the cases below.1. NSX IDPS is disabled via NSX policy.2. NSX IDPS engine is enabled NSXIDPS engine and vdpi are up andNSX IDPS has been enabled and IDPS rules are configuredvia NSX Policy.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine memory usage has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the highthreshold value of 75.Action requiredConsider rebalancing the VM workloads on this host to other hosts."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine memory usage has reachedvmwNsxTDataCenterSystemResourceUsage which is below the high thresholdvalue of 75.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageMediumHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageMediumHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine memory usage has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the mediumhigh threshold value of 85.Action requiredConsider rebalancing the VM workloads on this host to other hosts."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageMediumHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageMediumHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine memory usage has reachedvmwNsxTDataCenterSystemResourceUsage which is below the mediumhigh threshold value of 85.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine  memory usage has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above thevery high threshold value of 95.Action requiredConsider rebalancing the VM workloads on this host to other hosts."
        
        return metric
    #============= vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTDistributedIDSIPSNSXIDPSEngineMemoryUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIDPS engine  memory usage has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very highthreshold value of 95.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDNSForwarderDisabled ===============================
    if metric.tags["name"] == "vmwNsxTDNSForwarderDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DNS forwarder vmwNsxTDataCenterEntityId is disabled.Action required1. Invoke the NSX CLI command get dnsforwarders status to verifyif the DNS forwarder is in the disabled state.2. Use NSX Policy API or Manager API to enable the DNS forwarder itshould not be in the disabled state."
        
        return metric
    #============= vmwNsxTDNSForwarderDisabledClear ===============================
    if metric.tags["name"] == "vmwNsxTDNSForwarderDisabledClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DNS forwarder vmwNsxTDataCenterEntityId is enabled.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTDNSForwarderDown ===============================
    if metric.tags["name"] == "vmwNsxTDNSForwarderDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DNS forwarder vmwNsxTDataCenterEntityId is not running. This is impacting allconfigured DNS Forwarders that are currently enabled.Action required1. Invoke the NSX CLI command get dnsforwarders status to verifyif the DNS forwarder is in down state.2. Check varlogsyslog to see if there are errors reported.3. Collect a support bundle and contact the NSX support team."
        
        return metric
    #============= vmwNsxTDNSForwarderDownClear ===============================
    if metric.tags["name"] == "vmwNsxTDNSForwarderDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DNS forwarder vmwNsxTDataCenterEntityId is running again.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthDatapathThreadDeadlocked ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthDatapathThreadDeadlocked":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeThreadName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node datapath thread vmwNsxTDataCenterEdgeThreadName is deadlocked.Action requiredRestart the dataplane service by invoking the NSX CLI command restart service dataplane."
        
        return metric
    #============= vmwNsxTEdgeHealthDatapathThreadDeadlockedClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthDatapathThreadDeadlockedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeThreadName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node datapath thread vmwNsxTDataCenterEdgeThreadName is free from deadlock.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeCPUUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeCPUUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the high thresholdvalue of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of this Edgenode. Consider adjusting the Edge appliance form factor size or rebalancingservices to other Edge nodes for the applicable workload."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeCPUUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeCPUUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the high thresholdvalue of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeCPUUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeCPUUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of this Edgenode. Consider adjusting the Edge appliance form factor size or rebalancingservices to other Edge nodes for the applicable workload."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeCPUUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeCPUUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very high thresholdvalue of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathConfigurationFailure ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathConfigurationFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to enable the datapath on the Edge node after three attempts.Action requiredEnsure the Edge nodes connectivity to the Manager node is healthy.  Fromthe Edge nodes NSX CLI invoke the command get services to check thehealth of services. If the dataplane service is stopped invoke thecommand start service dataplane to start it."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathConfigurationFailureClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathConfigurationFailureClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Datapath on the Edge node has been successfully enabled.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathCPUHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathCPUHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDatapathResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The datapath CPU usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterDatapathResourceUsage which is at or above the highthreshold for at least two minutes.Action requiredReview the CPU statistics on the Edge node by invoking the NSX CLI commandget dataplane cpu stats to show packet rates per CPU core.  Higher CPUusage is expected with higher packet rates. Consider increasing the Edgeappliance form factor size and rebalancing services on this Edge node toother Edge nodes in the same cluster or other Edge clusters."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathCPUHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathCPUHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Edge node vmwNsxTDataCenterEntityId has reached below thehigh threshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathCPUVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathCPUVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDatapathResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The datapath CPU usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterDatapathResourceUsage which is at or above the very highthreshold for at least two minutes.Action requiredReview the CPU statistics on the Edge node by invoking the NSX CLI commandget dataplane cpu stats to show packet rates per CPU core.  Higher CPUusage is expected with higher packet rates. Consider increasing the Edgeappliance form factor size and rebalancing services on this Edge node toother Edge nodes in the same cluster or other Edge clusters."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathCPUVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathCPUVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Edge node vmwNsxTDataCenterEntityId has reached below thevery high threshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathCryptodrvDown ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathCryptodrvDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node crypto driver is down.Action requiredUpgrade the Edge node as needed."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathCryptodrvDownClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathCryptodrvDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node crypto driver is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathMempoolHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathMempoolHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterMempoolName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The datapath mempool usage for vmwNsxTDataCenterMempoolName on Edge nodevmwNsxTDataCenterEntityId has reached vmwNsxTDataCenterSystemResourceUsage whichis at or above the high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredLog in as the root user and invoke the commandedgeappctl t varrunvmwareedgedpd.ctl mempoolshow andedgeappctl t varrunvmwareedgedpd.ctl memoryshow mallocheap tocheck DPDK memory usage."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDatapathMempoolHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDatapathMempoolHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterMempoolName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The datapath mempool usage for vmwNsxTDataCenterMempoolName on Edge nodevmwNsxTDataCenterEntityId has reached vmwNsxTDataCenterSystemResourceUsage whichis below the high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDiskUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDiskUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Edge node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is at or abovethe high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredExamine the partition with high usage and see if there are anyunexpected large files that can be removed."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDiskUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDiskUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Edge node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is below the highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDiskUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDiskUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Edge node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is at or abovethe very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredExamine the partition with high usage and see if there are anyunexpected large files that can be removed."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeDiskUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeDiskUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Edge node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is below thevery high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeGlobalARPTableUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeGlobalARPTableUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDatapathResourceUsage")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Global ARP table usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterDatapathResourceUsage which is above the high thresholdfor over two minutes.Action requiredLog in as the root user and invoke the commandedgeappctl t varrunvmwareedgedpd.ctl neighshow and checkif neigh cache usage is normal. If it is normal invoke the commandedgeappctl t varrunvmwareedgedpd.ctl neighsetparam maxentriesto increase the ARP table size."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeGlobalARPTableUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeGlobalARPTableUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Global arp table usage on Edge node vmwNsxTDataCenterEntityId has reachedbelow the high threshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeMemoryUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeMemoryUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of this Edgenode. Consider adjusting the Edge appliance form factor size or rebalancingservices to other Edge nodes for the applicable workload."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeMemoryUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeMemoryUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the high thresholdvalue of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeMemoryUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeMemoryUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the veryhigh threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of this Edgenode. Consider adjusting the Edge appliance form factor size or rebalancingservices to other Edge nodes for the applicable workload."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeMemoryUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeMemoryUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Edge node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeNICLinkStatusDown ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeNICLinkStatusDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeNICName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node NIC vmwNsxTDataCenterEdgeNICName link is down.Action requiredOn the Edge node confirm if the NIC link is physically down by invokingthe NSX CLI command get interfaces. If it is down verify the cableconnection."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeNICLinkStatusDownClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeNICLinkStatusDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeNICName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node NIC vmwNsxTDataCenterEdgeNICName link is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeNICOutOfReceiveBuffer ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeNICOutOfReceiveBuffer":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeNICName")
        vb9 = metric.fields.get("vmwNsxTDataCenterRxRingBufferOverflowPercentage")
        vb10 = metric.fields.get("vmwNsxTDataCenterRxMisses")
        vb11 = metric.fields.get("vmwNsxTDataCenterRxProcessed")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge NIC vmwNsxTDataCenterEdgeNICName receive ring buffer has overflowed byvmwNsxTDataCenterRxRingBufferOverflowPercentage on Edge node vmwNsxTDataCenterEntityId.The missed packet count is vmwNsxTDataCenterRxMisses and processed packet countis vmwNsxTDataCenterRxProcessed.Action requiredInvoke the NSX CLI command get dataplane cpu stats and check1. If cpu usage is high i.e.  90 then take a packet capture onthe interface using the command start capture interfaceinterfacename direction input or start capture interfaceinterfacename direction input core coreid (to capturepackets ingressing on specific core whose usage is high).Then analyze the capture to see if there are majority offragmented packets or ipsec packets. If yes then it is expectedbehavior. If not probably datapath is stuck processing other bookkeepingoperations and if alarm lasts or more than 23 min contact VMware Support.2. If cpu usage is not high i.e.  90 then check if rx pps is highusing the command get dataplane cpu stats (just to make sure thetraffic rate is increasing). Then increase the ring size by 1024using the command set dataplane ringsize rx ringsize.NOTE  The continuous increase of ring size by 1024 factor can leadto some performance issue due to cache line thrashing internally.If even after increasing the ring size the issue persists thenit is an indication that edge needs a larger form factor deploymentto accommodate the traffic.3. If the alarm keeps on flapping i.e. triggers and resolves very soonthen it is due to bursty traffic. In this case check if rx pps asdescribed above if it is not high during the alarm active periodthen contact VMware Support. If pps is high it confirms bursty traffic.Consider suppressing the alarm.NOTE  There is no specific benchmark to decide what is regarded as ahigh pps value. It depends on infrastructure and type of traffic.The comparison can be made by noting down when alarm is inactive andwhen it is active."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeNICOutOfReceiveBufferClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeNICOutOfReceiveBufferClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeNICName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge NIC vmwNsxTDataCenterEdgeNICName receive ring buffer usage on Edge nodevmwNsxTDataCenterEntityId is no longer overflowing.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeNICOutOfTransmitBuffer ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeNICOutOfTransmitBuffer":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeNICName")
        vb9 = metric.fields.get("vmwNsxTDataCenterTxRingBufferOverflowPercentage")
        vb10 = metric.fields.get("vmwNsxTDataCenterTxMisses")
        vb11 = metric.fields.get("vmwNsxTDataCenterTxProcessed")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge NIC vmwNsxTDataCenterEdgeNICName transmit ring buffer has overflowed byvmwNsxTDataCenterTxRingBufferOverflowPercentage on Edge node vmwNsxTDataCenterEntityId.The missed packet count is vmwNsxTDataCenterTxMisses and processed packet countis vmwNsxTDataCenterTxProcessed.Action required1. If a lot of VMs are accommodated along with edge by the hypervisorthen edge VM might not get time to run hence the packets mightnot be retrieved by hypervisor. Then probably migrating the edge VMto a host with fewer VMs.2. Increase the ring size by 1024 using the command set dataplaneringsize tx ringsize. If even after increasing the ring sizethe issue persists then contact VMware Support as the ESX sidetransmit ring buffer might be of lower value. If there is noissue on ESX side it indicates the edge needs to be scaled toa larger form factor deployment to accommodate the traffic.3. If the alarm keeps on flapping i.e. triggers and resolves very soonthen it is due to bursty traffic. In this case check if tx pps usingthe command get dataplane cpu stats. If it is not high during thealarm active period then contact VMware Support.If pps is high it confirms bursty traffic. Consider suppressing thealarm.NOTE  There is no specific benchmark to decide what is regarded as ahigh pps value. It depends on infrastructure and type of traffic.The comparison can be made by noting down when alarm is inactive andwhen it is active."
        
        return metric
    #============= vmwNsxTEdgeHealthEdgeNICOutOfTransmitBufferClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthEdgeNICOutOfTransmitBufferClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeNICName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge NIC vmwNsxTDataCenterEdgeNICName transmit ring buffer usage on Edge nodevmwNsxTDataCenterEntityId is no longer overflowing.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEdgeHealthStorageError ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthStorageError":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The following disk partitions on the Edge node are inreadonly mode vmwNsxTDataCenterDiskPartitionNameAction requiredExamine the readonly partition to see if reboot resolves the issueor the disk needs to be replaced. Contact GSS for more information."
        
        return metric
    #============= vmwNsxTEdgeHealthStorageErrorClear ===============================
    if metric.tags["name"] == "vmwNsxTEdgeHealthStorageErrorClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The following disk partitions on the Edge node have recovered fromreadonly mode vmwNsxTDataCenterDiskPartitionNameAction requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEndpointProtectionEAMStatusDown ===============================
    if metric.tags["name"] == "vmwNsxTEndpointProtectionEAMStatusDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "ESX Agent Manager (EAM) service on compute manager vmwNsxTDataCenterEntityId is down.Action requiredStart the ESX Agent Manager (EAM) service. SSH into vCenter and invokethe command service vmwareeam start."
        
        return metric
    #============= vmwNsxTEndpointProtectionEAMStatusDownClear ===============================
    if metric.tags["name"] == "vmwNsxTEndpointProtectionEAMStatusDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "ESX Agent Manager (EAM) service on compute manager vmwNsxTDataCenterEntityId is either upor compute manager vmwNsxTDataCenterEntityId has been removed.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTEndpointProtectionPartnerChannelDown ===============================
    if metric.tags["name"] == "vmwNsxTEndpointProtectionPartnerChannelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The connection between host module and Partner SVM vmwNsxTDataCenterEntityIdis down.Action requiredRefer to httpskb.vmware.comsarticle2148821 and make surethat Partner SVM vmwNsxTDataCenterEntityId is reconnected to the host module."
        
        return metric
    #============= vmwNsxTEndpointProtectionPartnerChannelDownClear ===============================
    if metric.tags["name"] == "vmwNsxTEndpointProtectionPartnerChannelDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The connection between host module and Partner SVM vmwNsxTDataCenterEntityIdis up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTFederationGMToGMSplitBrain ===============================
    if metric.tags["name"] == "vmwNsxTFederationGMToGMSplitBrain":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterActiveGlobalManagers")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Multiple Global Manager nodes are active vmwNsxTDataCenterActiveGlobalManagers. Only one Global Manager node must be activeat any time.Action requiredConfigure only one Global Manager node as active and all other Global Manager nodes as standby."
        
        return metric
    #============= vmwNsxTFederationGMToGMSplitBrainClear ===============================
    if metric.tags["name"] == "vmwNsxTFederationGMToGMSplitBrainClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterActiveGlobalManager")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Global Manager node vmwNsxTDataCenterActiveGlobalManager is the only active Global Manager node now.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTFederationLmToLmSynchronizationError ===============================
    if metric.tags["name"] == "vmwNsxTFederationLmToLmSynchronizationError":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSiteName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSiteId")
        vb10 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        vb11 = metric.fields.get("vmwNsxTDataCenterRemoteSiteId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The synchronization between vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) and vmwNsxTDataCenterRemoteSiteName(vmwNsxTDataCenterRemoteSiteId)failed for more than 5 minutes.Action required1. Invoke the NSX CLI command get sitereplicator remotesites to get connectionstate between the remote locations. If a remote location is connected but not synchronizedit is possible that the location is still in the process of master resolution. Inthis case wait for around 10 seconds and try invoking the CLI again tocheck for the state of the remote location. If a location is disconnected try the nextstep.2. Check the connectivity from Local Manager (LM) in location vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) to the LMsin location vmwNsxTDataCenterRemoteSiteName(vmwNsxTDataCenterRemoteSiteId) via ping. If they are not pingablecheck for flakiness in WAN connectivity. If there are no physical networkconnectivity issues try the next step.3. Check the varlogcloudnetnsxccp.log file on the Manager nodes in the local cluster inlocation vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) that triggered the alarm to see if there are any crosssitecommunication errors. In addition also look for errors being logged by thensxapplproxy subcomponent within varlogsyslog."
        
        return metric
    #============= vmwNsxTFederationLmToLmSynchronizationErrorClear ===============================
    if metric.tags["name"] == "vmwNsxTFederationLmToLmSynchronizationErrorClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSiteName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSiteId")
        vb10 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        vb11 = metric.fields.get("vmwNsxTDataCenterRemoteSiteId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Remote sites vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) and vmwNsxTDataCenterRemoteSiteName(vmwNsxTDataCenterRemoteSiteId) are now synchronized.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTFederationLmToLmSynchronizationWarning ===============================
    if metric.tags["name"] == "vmwNsxTFederationLmToLmSynchronizationWarning":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSiteName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSiteId")
        vb10 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        vb11 = metric.fields.get("vmwNsxTDataCenterRemoteSiteId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The synchronization between vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) and vmwNsxTDataCenterRemoteSiteName(vmwNsxTDataCenterRemoteSiteId) failed.Action required1. Invoke the NSX CLI command get sitereplicator remotesites to get connectionstate between the remote locations. If a remote location is connected but not synchronizedit is possible that the location is still in the process of master resolution. Inthis case wait for around 10 seconds and try invoking the CLI again tocheck for the state of the remote location. If a location is disconnected try the nextstep.2. Check the connectivity from Local Manager (LM) in location vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) to the LMsin location vmwNsxTDataCenterRemoteSiteName(vmwNsxTDataCenterRemoteSiteId) via ping. If they are not pingablecheck for flakiness in WAN connectivity. If there are no physical networkconnectivity issues try the next step.3. Check the varlogcloudnetnsxccp.log file on the Manager nodes in the local cluster inlocation vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) that triggered the alarm to see if there are any crosssitecommunication errors. In addition also look for errors being logged by thensxapplproxy subcomponent within varlogsyslog."
        
        return metric
    #============= vmwNsxTFederationLmToLmSynchronizationWarningClear ===============================
    if metric.tags["name"] == "vmwNsxTFederationLmToLmSynchronizationWarningClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSiteName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSiteId")
        vb10 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        vb11 = metric.fields.get("vmwNsxTDataCenterRemoteSiteId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Remote locations vmwNsxTDataCenterSiteName(vmwNsxTDataCenterSiteId) and vmwNsxTDataCenterRemoteSiteName(vmwNsxTDataCenterRemoteSiteId) are now synchronized.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTFederationRtepBGPDown ===============================
    if metric.tags["name"] == "vmwNsxTFederationRtepBGPDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterBGPSourceIP")
        vb9 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        vb10 = metric.fields.get("vmwNsxTDataCenterBGPNeighborIP")
        vb11 = metric.fields.get("vmwNsxTDataCenterFailureReason")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "RTEP (Remote Tunnel Endpoint) BGP session from source IP vmwNsxTDataCenterBGPSourceIPto remote location vmwNsxTDataCenterRemoteSiteName neighbor IP vmwNsxTDataCenterBGPNeighborIP is down.Reason vmwNsxTDataCenterFailureReason.Action required1. Invoke the NSX CLI command get logicalrouters on the affected edge node.2. Switch to REMOTETUNNELVRF context.3. Invoke the NSX CLI command get bgp neighbor summary to check the BGP neighbor status.4. Alternatively invoke the NSX API GET apiv1transportnodestransportnodeidintersitebgpsummaryto get the BGP neighbor status.5. Invoke the NSX CLI command get interfaces and check if the correct RTEP IP address is assignedto the interface with name remotetunnelendpoint.6. Check if the ping is working successfully between assigned RTEP IP address (vmwNsxTDataCenterBGPSourceIP) and theremote location vmwNsxTDataCenterRemoteSiteName neighbor IP vmwNsxTDataCenterBGPNeighborIP.7. Check varlogsyslog for any errors related to BGP.8. Invoke the NSX API GET or PUT apiv1transportnodestransportnodeid to getupdate remotetunnelendpointconfiguration on the edge node.This will update the RTEP IP assigned to the affected edge node."
        
        return metric
    #============= vmwNsxTFederationRtepBGPDownClear ===============================
    if metric.tags["name"] == "vmwNsxTFederationRtepBGPDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterBGPSourceIP")
        vb9 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        vb10 = metric.fields.get("vmwNsxTDataCenterBGPNeighborIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "RTEP (Remote Tunnel Endpoint) BGP session from source IP vmwNsxTDataCenterBGPSourceIPto remote location vmwNsxTDataCenterRemoteSiteName neighbor IP vmwNsxTDataCenterBGPNeighborIP is established.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTFederationRtepConnectivityLost ===============================
    if metric.tags["name"] == "vmwNsxTFederationRtepConnectivityLost":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterTransportNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node vmwNsxTDataCenterTransportNodeName lost RTEP (Remote Tunnel Endpoint) connectivitywith remote location vmwNsxTDataCenterRemoteSiteName.Action required1. Invoke the NSX CLI command get logicalrouters on the affected edge node vmwNsxTDataCenterTransportNodeName.2. Switch to REMOTETUNNELVRF context.3. Invoke the NSX CLI command get bgp neighbor summary to check the BGP neighbor status.4. Alternatively invoke the NSX API GET apiv1transportnodestransportnodeidintersitebgpsummaryto get the BGP neighbor status.5. Invoke the NSX CLI command get interfaces and check if the correct RTEP IP address is assignedto the interface with name remotetunnelendpoint.6. Check if the ping is working successfully between assigned RTEP IP address and the RTEP IP addresseson the remote location vmwNsxTDataCenterRemoteSiteName.7. Check varlogsyslog for any errors related to BGP.8. Invoke the NSX API GET or PUT apiv1transportnodestransportnodeid to getupdate remotetunnelendpointconfiguration on the edge node.This will update the RTEP IP assigned to the affected edge node vmwNsxTDataCenterTransportNodeName."
        
        return metric
    #============= vmwNsxTFederationRtepConnectivityLostClear ===============================
    if metric.tags["name"] == "vmwNsxTFederationRtepConnectivityLostClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterTransportNodeName")
        vb9 = metric.fields.get("vmwNsxTDataCenterRemoteSiteName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge node vmwNsxTDataCenterTransportNodeName has restored RTEP (Remote Tunnel Endpoint) connectivitywith remote location vmwNsxTDataCenterRemoteSiteName.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTHighAvailabilityTier0GatewayFailover ===============================
    if metric.tags["name"] == "vmwNsxTHighAvailabilityTier0GatewayFailover":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterPreviousGatewayState")
        vb9 = metric.fields.get("vmwNsxTDataCenterCurrentGatewayState")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The tier0 gateway vmwNsxTDataCenterEntityId failover from vmwNsxTDataCenterPreviousGatewayStateto vmwNsxTDataCenterCurrentGatewayState.Action requiredInvoke the NSX CLI command get logicalrouters to identify the tier0vrf ID. Switch to the vrf context by invoking vrf vrfid then invokeget highavailability status to determine the service that is down."
        
        return metric
    #============= vmwNsxTHighAvailabilityTier0GatewayFailoverClear ===============================
    if metric.tags["name"] == "vmwNsxTHighAvailabilityTier0GatewayFailoverClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The tier0 gateway vmwNsxTDataCenterEntityId is now up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTHighAvailabilityTier1GatewayFailover ===============================
    if metric.tags["name"] == "vmwNsxTHighAvailabilityTier1GatewayFailover":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterPreviousGatewayState")
        vb9 = metric.fields.get("vmwNsxTDataCenterCurrentGatewayState")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The tier1 gateway vmwNsxTDataCenterEntityId failover from vmwNsxTDataCenterPreviousGatewayStateto vmwNsxTDataCenterCurrentGatewayState.Action requiredInvoke the NSX CLI command get logicalrouters to identify the tier1vrf ID. Switch to the vrf context by invoking vrf vrfid then invokeget highavailability status to determine the service that is down."
        
        return metric
    #============= vmwNsxTHighAvailabilityTier1GatewayFailoverClear ===============================
    if metric.tags["name"] == "vmwNsxTHighAvailabilityTier1GatewayFailoverClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The tier1 gateway vmwNsxTDataCenterEntityId is now up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIdentityFirewallConnectivityToLDAPServerLost ===============================
    if metric.tags["name"] == "vmwNsxTIdentityFirewallConnectivityToLDAPServerLost":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLDAPServer")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The connectivity to LDAP server vmwNsxTDataCenterLDAPServer is lost.Action requiredPlease check1. The LDAP server is reachable from NSX nodes.2. The LDAP server details are configured correctly in NSX.3. The LDAP server is running correctly.4. There are no firewalls blocking access between the LDAP serverand NSX nodes.Afer the issue is fixed use TEST CONNECTION in NSX UI underIdentity Firewall AD to test the connection."
        
        return metric
    #============= vmwNsxTIdentityFirewallConnectivityToLDAPServerLostClear ===============================
    if metric.tags["name"] == "vmwNsxTIdentityFirewallConnectivityToLDAPServerLostClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLDAPServer")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The connectivity to LDAP server vmwNsxTDataCenterLDAPServer is restored.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIdentityFirewallErrorInDeltaSync ===============================
    if metric.tags["name"] == "vmwNsxTIdentityFirewallErrorInDeltaSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDirectoryDomain")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Errors occurred while performing delta sync with vmwNsxTDataCenterDirectoryDomain.Action required1. Check if there are any connectivity to LDAP server lost alarms.2. Find the error details in varlogsyslog. Around the alarm triggertime search for text Error happened when synchronize LDAP objects.3. Check with AD administrator if there are any recent AD changes whichmay cause the errors.4. If the errors persist collect the technical support bundle andcontact VMware technical support."
        
        return metric
    #============= vmwNsxTIdentityFirewallErrorInDeltaSyncClear ===============================
    if metric.tags["name"] == "vmwNsxTIdentityFirewallErrorInDeltaSyncClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDirectoryDomain")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "No errors occurred while performing delta sync with vmwNsxTDataCenterDirectoryDomain.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTInfrastructureCommunicationEdgeTunnelsDown ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureCommunicationEdgeTunnelsDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The overall tunnel status of Edge node vmwNsxTDataCenterEntityId is down.Action requiredInvoke the NSX CLI command get tunnelports to get all tunnel portsthen check each tunnels stats by invoking NSX CLI commandget tunnelport UUID stats to check if there are any drops. Alsocheck varlogsyslog if there are tunnel related errors."
        
        return metric
    #============= vmwNsxTInfrastructureCommunicationEdgeTunnelsDownClear ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureCommunicationEdgeTunnelsDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The tunnels of Edge node vmwNsxTDataCenterEntityId have been restored.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTInfrastructureServiceEdgeServiceStatusChanged ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureServiceEdgeServiceStatusChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeServiceName")
        vb9 = metric.fields.get("vmwNsxTDataCenterPreviousServiceState")
        vb10 = metric.fields.get("vmwNsxTDataCenterCurrentServiceState")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service vmwNsxTDataCenterEdgeServiceName changed from vmwNsxTDataCenterPreviousServiceStateto vmwNsxTDataCenterCurrentServiceState.Action requiredOn the Edge node verify the service hasnt exited due to an error bylooking for core files in the varlogcore directory. In additioninvoke the NSX CLI command get services to confirm whether the serviceis stopped. If so invoke start service servicename to restart theservice."
        
        return metric
    #============= vmwNsxTInfrastructureServiceEdgeServiceStatusChangedClear ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureServiceEdgeServiceStatusChangedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeServiceName")
        vb9 = metric.fields.get("vmwNsxTDataCenterPreviousServiceState")
        vb10 = metric.fields.get("vmwNsxTDataCenterCurrentServiceState")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service vmwNsxTDataCenterEdgeServiceName changed from vmwNsxTDataCenterPreviousServiceStateto vmwNsxTDataCenterCurrentServiceState.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTInfrastructureServiceEdgeServiceStatusDown ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureServiceEdgeServiceStatusDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeServiceName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service vmwNsxTDataCenterEdgeServiceName is down for at least one minute.Action requiredOn the Edge node verify the service hasnt exited due to an error bylooking for core files in the varlogcore directory. In additioninvoke the NSX CLI command get services to confirm whether the serviceis stopped. If so invoke start service servicename to restart theservice."
        
        return metric
    #============= vmwNsxTInfrastructureServiceEdgeServiceStatusDownClear ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureServiceEdgeServiceStatusDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterEdgeServiceName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service vmwNsxTDataCenterEdgeServiceName is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTInfrastructureServiceServiceStatusUnknown ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureServiceServiceStatusUnknown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterServiceName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service vmwNsxTDataCenterServiceName has been unresponsive for 10 seconds.Action requiredVerify vmwNsxTDataCenterServiceName service is still running by invoking etcinit.dvmwNsxTDataCenterServiceName status.If the service is reported as running it may need to get restarted which can be done byetcinit.dvmwNsxTDataCenterServiceName restart. Rerun the status command to verify the service is nowrunning. If the script etcinit.dvmwNsxTDataCenterServiceName is unavailable please try invokingsystemctl vmwNsxTDataCenterServiceName status and restart by systemctl vmwNsxTDataCenterServiceName restart with rootpriviledges. If restarting the service does not resolve the issue or if the issue reoccurs aftera successful restart please contact VMware Support."
        
        return metric
    #============= vmwNsxTInfrastructureServiceServiceStatusUnknownClear ===============================
    if metric.tags["name"] == "vmwNsxTInfrastructureServiceServiceStatusUnknownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterServiceName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service vmwNsxTDataCenterServiceName is responsive again.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceCommunicationTNFlowExporterDisconnected ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceCommunicationTNFlowExporterDisconnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The flow exporter on Transport node vmwNsxTDataCenterEntityId is disconnected fromthe Intelligence nodes messaging broker. Data collection is affected.Action requiredRestart the messaging service if it is not running in the Intelligencenode. Resolve the network connection failure between the Transport nodeflow exporter and the Intelligence node."
        
        return metric
    #============= vmwNsxTIntelligenceCommunicationTNFlowExporterDisconnectedClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceCommunicationTNFlowExporterDisconnectedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The flow exporter on Transport node vmwNsxTDataCenterEntityId has reconnected tothe Intelligence nodes messaging broker.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthCPUUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthCPUUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis above the high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredUse the top command to check which processes have the most CPU usages andthen check varlogsyslog and these processes local logs to see if thereare any outstanding errors to be resolved."
        
        return metric
    #============= vmwNsxTIntelligenceHealthCPUUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthCPUUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis below the high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthCPUUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthCPUUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis above the very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredUse the top command to check which processes have the most CPU usages andthen check varlogsyslog and these processes local logs to see if thereare any outstanding errors to be resolved."
        
        return metric
    #============= vmwNsxTIntelligenceHealthCPUUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthCPUUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis below the very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDataDiskPartitionUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDataDiskPartitionUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition data on Intelligence nodevmwNsxTDataCenterIntelligenceNodeId is above the high threshold valueof vmwNsxTDataCenterSystemUsageThreshold.Action requiredStop NSX intelligence data collection until the disk usage is belowthe threshold. Examine disk partition data and see if there are anyunexpected large files that can be removed."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDataDiskPartitionUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDataDiskPartitionUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition data on Intelligence nodevmwNsxTDataCenterIntelligenceNodeId is below the high threshold valueof vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDataDiskPartitionUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDataDiskPartitionUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition data on Intelligence nodevmwNsxTDataCenterIntelligenceNodeId is above the very high threshold valueof vmwNsxTDataCenterSystemUsageThreshold.Action requiredStop NSX intelligence data collection until the disk usage is belowthe threshold. In the NSX UI navigate to System  Appliances  NSXIntelligence Appliance. Then click ACTONS Stop Collecting Data."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDataDiskPartitionUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDataDiskPartitionUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition data on Intelligence nodevmwNsxTDataCenterIntelligenceNodeId is below the very high threshold valueof vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDiskUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDiskUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition vmwNsxTDataCenterDiskPartitionName onIntelligence node vmwNsxTDataCenterIntelligenceNodeId is abovethe high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredExamine disk partition vmwNsxTDataCenterDiskPartitionName and see if there are anyunexpected large files that can be removed."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDiskUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDiskUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition vmwNsxTDataCenterDiskPartitionName onIntelligence node vmwNsxTDataCenterIntelligenceNodeId is belowthe high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDiskUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDiskUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition vmwNsxTDataCenterDiskPartitionName onIntelligence node vmwNsxTDataCenterIntelligenceNodeId is abovethe very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredExamine disk partition vmwNsxTDataCenterDiskPartitionName and see if there are anyunexpected large files that can be removed."
        
        return metric
    #============= vmwNsxTIntelligenceHealthDiskUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthDiskUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage of disk partition vmwNsxTDataCenterDiskPartitionName onIntelligence node vmwNsxTDataCenterIntelligenceNodeId is belowthe very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthMemoryUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthMemoryUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis above the high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredUse the top command to check which processes have the most memory usagesand then check varlogsyslog and these processes local logs to see ifthere are any outstanding errors to be resolved."
        
        return metric
    #============= vmwNsxTIntelligenceHealthMemoryUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthMemoryUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis below the high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthMemoryUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthMemoryUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis above the very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredUse the top command to check which processes have the most memory usagesand then check varlogsyslog and these processes local logs to see ifthere are any outstanding errors to be resolved."
        
        return metric
    #============= vmwNsxTIntelligenceHealthMemoryUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthMemoryUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Intelligence node vmwNsxTDataCenterIntelligenceNodeIdis below the very high threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthNodeStatusDegraded ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthNodeStatusDegraded":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterServiceName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service vmwNsxTDataCenterServiceName on Intelligence nodevmwNsxTDataCenterIntelligenceNodeId is not running.Action requiredExamine the service status and health information by invoking theNSX CLI command get services on the Intelligence node. Restartunexpected stopped services on the Intelligence node by invokingthe NSX CLI command restart service servicename."
        
        return metric
    #============= vmwNsxTIntelligenceHealthNodeStatusDegradedClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthNodeStatusDegradedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterServiceName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service vmwNsxTDataCenterServiceName on Intelligence nodevmwNsxTDataCenterIntelligenceNodeId is running properly.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIntelligenceHealthStorageLatencyHigh ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthStorageLatencyHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The storage latency of disk partition vmwNsxTDataCenterDiskPartitionName onIntelligence node vmwNsxTDataCenterIntelligenceNodeId is abovethe high threshold value of vmwNsxTDataCenterSystemUsageThreshold milliseconds.Action requiredTransient high storage latency may happen due to spike of IO requests.If storage latency remains high for more than 30 minutesconsider deploying NSX Intelligence appliance in a low latency diskor not sharing the same storage device with other VMs."
        
        return metric
    #============= vmwNsxTIntelligenceHealthStorageLatencyHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIntelligenceHealthStorageLatencyHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterIntelligenceNodeId")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The storage latency of disk partition vmwNsxTDataCenterDiskPartitionName onIntelligence node vmwNsxTDataCenterIntelligenceNodeId is belowthe high threshold value of vmwNsxTDataCenterSystemUsageThreshold milliseconds.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIPAMIPBlockUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTIPAMIPBlockUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntentPath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IP block usage of vmwNsxTDataCenterIntentPath is very high.IP block nearing its total capacity creation of subnet using IP block might fail.Action requiredPlease review IP block usage. Use new IP block for resource creation or delete unused IP subnet from the IP block.To check subnet being used for IP Block. From NSX UI navigate to Networking  IP Address pools  IP Address pools tab.Select IP pools where IP block being used check Subnets and Allocated IPs column on UI. If no allocation has been used for the IP pool and it is not going to be used in future then delete subnet or IP pool.Use following API to check if IP block being used by IP pool and also check if any IP allocation doneTo get configured subnets of an IP pool invoke the NSX APIGET policyapiv1infraippoolsippoolipsubnetsTo get IP allocations invoke the NSX APIGET policyapiv1infraippoolsippoolipallocationsPlease note Deletion of IP poolsubnet should only be done if it does not have any allocated IPs and it is not going to be used in future."
        
        return metric
    #============= vmwNsxTIPAMIPBlockUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIPAMIPBlockUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntentPath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IP block usage of vmwNsxTDataCenterIntentPath is below threshold level.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTIPAMIPPoolUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTIPAMIPPoolUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntentPath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IP pool usage of vmwNsxTDataCenterIntentPath is very high.IP pool nearing its total capacity. Creation of entityservice depends on IP being allocated from IP pool might fail.Action requiredPlease review IP pool usage.Release unused ip allocations from IP pool or create new IP pool and use it.From NSX UI navigate to Networking  IP Address pools  IP Address pools tab.Select IP pools and check Allocated IPs column this will show IPs allocated from the IP pool.If user see any IPs are not being used then those IPs can be released.To release unused IP allocations invoke the NSX APIDELETE policyapiv1infraippoolsippoolipallocationsipallocation"
        
        return metric
    #============= vmwNsxTIPAMIPPoolUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTIPAMIPPoolUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterIntentPath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IP pool usage of vmwNsxTDataCenterIntentPath is normal now.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLicensesLicenseExpired ===============================
    if metric.tags["name"] == "vmwNsxTLicensesLicenseExpired":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLicenseEditionType")
        vb9 = metric.fields.get("vmwNsxTDataCenterDisplayedLicenseKey")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The vmwNsxTDataCenterLicenseEditionType license key ending withvmwNsxTDataCenterDisplayedLicenseKey has expired.Action requiredAdd a new nonexpired license using the NSX UI by navigating toSystem  Licenses then click ADD and specify the key of the newlicense. The expired license should be deleted by checking thecheckbox of the license then click DELETE."
        
        return metric
    #============= vmwNsxTLicensesLicenseExpiredClear ===============================
    if metric.tags["name"] == "vmwNsxTLicensesLicenseExpiredClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLicenseEditionType")
        vb9 = metric.fields.get("vmwNsxTDataCenterDisplayedLicenseKey")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The expired vmwNsxTDataCenterLicenseEditionType license key ending withvmwNsxTDataCenterDisplayedLicenseKey has been removed updated or is nolonger about to expire.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLicensesLicenseIsAboutToExpire ===============================
    if metric.tags["name"] == "vmwNsxTLicensesLicenseIsAboutToExpire":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLicenseEditionType")
        vb9 = metric.fields.get("vmwNsxTDataCenterDisplayedLicenseKey")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The vmwNsxTDataCenterLicenseEditionType license key ending withvmwNsxTDataCenterDisplayedLicenseKey is about to expire.Action requiredThe license is about to expire in several days. Please plan to add anew nonexpiring license using the NSX UI by navigating to System Licenses then click ADD and specify the key of the new license. Theexpired license should be deleted by checking the checkbox of thelicense then click DELETE."
        
        return metric
    #============= vmwNsxTLicensesLicenseIsAboutToExpireClear ===============================
    if metric.tags["name"] == "vmwNsxTLicensesLicenseIsAboutToExpireClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLicenseEditionType")
        vb9 = metric.fields.get("vmwNsxTDataCenterDisplayedLicenseKey")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The expiring vmwNsxTDataCenterLicenseEditionType license key ending withvmwNsxTDataCenterDisplayedLicenseKey has been removed updated or is nolonger about to expire.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerDLBStatusDown ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerDLBStatusDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The distributed load balancer service vmwNsxTDataCenterEntityId is down.This notification is sent once when the down state is first detected.Action requiredOn ESXi host node invoke the NSX CLI command get loadbalancerlbuuid status.If Conflict LSP is reported please check whether this LSP is attachedto other load balancer service. Please check whether this conflict isacceptable.If Not Ready LSP is reported please check the status of this LSP byinvoking NSX CLI command get logicalswitchport status."
        
        return metric
    #============= vmwNsxTLoadBalancerDLBStatusDownClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerDLBStatusDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The distributed load balancer service vmwNsxTDataCenterEntityId is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerLBCPUVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBCPUVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage of load balancer vmwNsxTDataCenterEntityId is vmwNsxTDataCenterSystemResourceUsagewhich is higher than the very high threshold of vmwNsxTDataCenterSystemUsageThreshold.Action requiredIf the load balancer CPU utilization is higher than vmwNsxTDataCenterSystemUsageThresholdthe workload is too high for this load balancer. Rescale the load balancerservice by changing the load balancer size from small to medium or frommedium to large. If the CPU utilization of this load balancer is still highconsider adjusting the Edge appliance form factor size or moving loadbalancer services to other Edge nodes for the applicable workload."
        
        return metric
    #============= vmwNsxTLoadBalancerLBCPUVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBCPUVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU utilization of load balancer vmwNsxTDataCenterEntityId is vmwNsxTDataCenterSystemResourceUsagewhich is lower than the very high threshold of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerLBEdgeCapacityInUseHigh ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBEdgeCapacityInUseHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The usage of load balancer service in Edge node vmwNsxTDataCenterEntityId is high.The threshold is vmwNsxTDataCenterSystemUsageThreshold.This notification is sent once when the high usage state is first detected.Action requiredDeploy a new Edge node and move the load balancer service from existing Edgenodes to the newly deployed Edge node."
        
        return metric
    #============= vmwNsxTLoadBalancerLBEdgeCapacityInUseHighClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBEdgeCapacityInUseHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The usage of load balancer service in Edge node vmwNsxTDataCenterEntityId is belowthe threshold of vmwNsxTDataCenterSystemUsageThreshold for a sufficient numberof samples over 2 minutes.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerLBPoolMemberCapacityInUseVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBPoolMemberCapacityInUseVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The usage of pool members in Edge node vmwNsxTDataCenterEntityId is very high.The threshold is vmwNsxTDataCenterSystemUsageThreshold.This notification is sent once when the high usage state is first detected.Action requiredDeploy a new Edge node and move the load balancer service from existing Edgenodes to the newly deployed Edge node."
        
        return metric
    #============= vmwNsxTLoadBalancerLBPoolMemberCapacityInUseVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBPoolMemberCapacityInUseVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The usage of pool members in Edge node vmwNsxTDataCenterEntityId is belowthe threshold of vmwNsxTDataCenterSystemUsageThreshold for a sufficient numberof samples over 2 minutes.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerLBStatusDegraded ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBStatusDegraded":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The load balancer service vmwNsxTDataCenterEntityId is degraded.This notification is sent once when the degraded state is first detected.Action requiredFor centralized load balancerOn standby Edge node check load balancer status by invoking the NSX CLIcommand get loadbalancer lbuuid status. If the LBState of loadbalancer service is notready or there is no output make the Edge nodeenter maintenance mode then exit maintenance mode.For distributed load balancer1. Get detailed status by invoking NSXT API GETpolicyapiv1infralbservicesLBServicedetailedstatussource=realtime2. From API output find ESXi host reporting a nonzero instancenumberwith status NOTREADY or CONFLICT.3. On ESXi host node invoke the NSX CLI command get loadbalancerlbuuid status.If Conflict LSPis reported please check whether this LSP is attachedto other load balancer service. Please check whether this conflict isacceptable.If Not Ready LSP is reported please check the status of this LSP byinvoking NSX CLI command get logicalswitchport status."
        
        return metric
    #============= vmwNsxTLoadBalancerLBStatusDegradedClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBStatusDegradedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The load balancer service vmwNsxTDataCenterEntityId is not degraded.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerLBStatusDown ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBStatusDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The load balancer service vmwNsxTDataCenterEntityId is down.Action requiredVerify whether the load balancer service in the Edge node is running.If the status of load balancer service is not ready make the Edgenode enter maintenance mode then exit maintenance mode. If the statusof load balancer is still not recovered please check whether thereare any error log in varlogsyslog."
        
        return metric
    #============= vmwNsxTLoadBalancerLBStatusDownClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerLBStatusDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The noad balancer service vmwNsxTDataCenterEntityId is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerPoolStatusDown ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerPoolStatusDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The load balancer pool vmwNsxTDataCenterEntityId status is down.Action requiredConsult the load balancer pool to determine which members are down. Checknetwork connectivity from the load balancer to the impacted pool members.Validate application health of each pool member. Also validate the healthof each pool member using the configured monitor. When the health of themember is established the pool member status is updated to healthy basedon the Rise Count configuration in the monitor."
        
        return metric
    #============= vmwNsxTLoadBalancerPoolStatusDownClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerPoolStatusDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The load balancer pool vmwNsxTDataCenterEntityId status is upAction requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTLoadBalancerVirtualServerStatusDown ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerVirtualServerStatusDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The load balancer virtual server vmwNsxTDataCenterEntityId is down.Action requiredConsult the load balancer pool to determine its status and verify itsconfiguration. If incorrectly configured reconfigure it and remove theload balancer pool from the virtual server then readd it to thevirtual server again."
        
        return metric
    #============= vmwNsxTLoadBalancerVirtualServerStatusDownClear ===============================
    if metric.tags["name"] == "vmwNsxTLoadBalancerVirtualServerStatusDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The load balancer virtual server vmwNsxTDataCenterEntityId is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthDuplicateIPAddress ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthDuplicateIPAddress":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDuplicateIPAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Manager node vmwNsxTDataCenterEntityId IP address vmwNsxTDataCenterDuplicateIPAddress iscurrently being used by another device in the network.Action required1. Determine which device is using the Managers IP addressand assign the device a new IP address. Note reconfiguringthe Manager to use a new IP address is not supported.2. Ensure the static IP address poolDHCP server is configured correctly.3. Correct the IP address of the device if it is manually assigned."
        
        return metric
    #============= vmwNsxTManagerHealthDuplicateIPAddressClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthDuplicateIPAddressClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDuplicateIPAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The device using the IP address assigned to Manager nodevmwNsxTDataCenterEntityId appears to no longer be using vmwNsxTDataCenterDuplicateIPAddress.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerConfigDiskUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerConfigDiskUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition config has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the high threshold value ofvmwNsxTDataCenterSystemUsageThreshold. This can be an indication of rising diskusage by the NSX Datastore service under the configcorfu directory.Action requiredPlease run the following tool and contact GSS if any issues are reportedoptvmwaretoolssupportinspectcheckpointissues.py"
        
        return metric
    #============= vmwNsxTManagerHealthManagerConfigDiskUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerConfigDiskUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition config has reachedvmwNsxTDataCenterSystemResourceUsage which is below the high threshold value ofvmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerConfigDiskUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerConfigDiskUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition config has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the very high threshold valueof vmwNsxTDataCenterSystemUsageThreshold. This can be an indication of high disk usageby the NSX Datastore service under the configcorfu directory.Action requiredPlease run the following tool and contact GSS if any issues are reportedoptvmwaretoolssupportinspectcheckpointissues.py"
        
        return metric
    #============= vmwNsxTManagerHealthManagerConfigDiskUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerConfigDiskUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition config has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very high threshold value ofvmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerCPUUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerCPUUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of thisManager node. Consider adjusting the Manager appliance form factor size."
        
        return metric
    #============= vmwNsxTManagerHealthManagerCPUUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerCPUUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerCPUUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerCPUUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of thisManager node. Consider adjusting the Manager appliance form factor size."
        
        return metric
    #============= vmwNsxTManagerHealthManagerCPUUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerCPUUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The CPU usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerDiskUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerDiskUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is at or above the highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredExamine the partition with high usage and see if there are anyunexpected large files that can be removed."
        
        return metric
    #============= vmwNsxTManagerHealthManagerDiskUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerDiskUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is below the high thresholdvalue of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerDiskUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerDiskUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is at or above the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredExamine the partition with high usage and see if there are anyunexpected large files that can be removed."
        
        return metric
    #============= vmwNsxTManagerHealthManagerDiskUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerDiskUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb10 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition vmwNsxTDataCenterDiskPartitionNamehas reached vmwNsxTDataCenterSystemResourceUsage which is below the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerMemoryUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerMemoryUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of thisManager node. Consider adjusting the Manager appliance form factor size."
        
        return metric
    #============= vmwNsxTManagerHealthManagerMemoryUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerMemoryUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthManagerMemoryUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerMemoryUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the veryhigh threshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredPlease review the configuration running services and sizing of thisManager node. Consider adjusting the Manager appliance form factor size."
        
        return metric
    #============= vmwNsxTManagerHealthManagerMemoryUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthManagerMemoryUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The memory usage on Manager node vmwNsxTDataCenterEntityId has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very highthreshold value of vmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthOperationsDbDiskUsageHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthOperationsDbDiskUsageHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition nonconfig has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the high threshold value ofvmwNsxTDataCenterSystemUsageThreshold. This can be an indication of rising diskusage by the NSX Datastore service under the nonconfigcorfu directory.Action requiredPlease run the following tool and contact GSS if any issues are reportedoptvmwaretoolssupportinspectcheckpointissues.py nonconfig"
        
        return metric
    #============= vmwNsxTManagerHealthOperationsDbDiskUsageHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthOperationsDbDiskUsageHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition nonconfig has reachedvmwNsxTDataCenterSystemResourceUsage which is below the high threshold value ofvmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthOperationsDbDiskUsageVeryHigh ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthOperationsDbDiskUsageVeryHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition nonconfig has reachedvmwNsxTDataCenterSystemResourceUsage which is at or above the very high threshold valueof vmwNsxTDataCenterSystemUsageThreshold. This can be an indication of high disk usageby the NSX Datastore service under the nonconfigcorfu directory.Action requiredPlease run the following tool and contact GSS if any issues are reportedoptvmwaretoolssupportinspectcheckpointissues.py nonconfig"
        
        return metric
    #============= vmwNsxTManagerHealthOperationsDbDiskUsageVeryHighClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthOperationsDbDiskUsageVeryHighClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSystemResourceUsage")
        vb9 = metric.fields.get("vmwNsxTDataCenterSystemUsageThreshold")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The disk usage for the Manager node disk partition nonconfig has reachedvmwNsxTDataCenterSystemResourceUsage which is below the very high threshold value ofvmwNsxTDataCenterSystemUsageThreshold.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTManagerHealthStorageError ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthStorageError":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The following disk partition on the Manager node vmwNsxTDataCenterEntityId is inreadonly mode vmwNsxTDataCenterDiskPartitionNameAction requiredExamine the readonly partition to see if reboot resolves the issueor the disk needs to be replaced. Contact GSS for more information."
        
        return metric
    #============= vmwNsxTManagerHealthStorageErrorClear ===============================
    if metric.tags["name"] == "vmwNsxTManagerHealthStorageErrorClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterDiskPartitionName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The following disk partition on the Manager node vmwNsxTDataCenterEntityIdhas recovered from readonly mode vmwNsxTDataCenterDiskPartitionNameAction requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTNCPHealthNCPPluginDown ===============================
    if metric.tags["name"] == "vmwNsxTNCPHealthNCPPluginDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Manager Node has detected the NCP is down or unhealthy.Action requiredTo find the clusters which are having issues please use theNSX UI and navigate to the Alarms page. The Entity name value forthis alarm instance identifies the cluster name. Or invoke theNSX API GET apiv1systemhealthcontainerclusterncpstatusto fetch all cluster statuses and determine the name of any clustersthat report DOWN or UNKNOWN. Then on the NSX UIInventory  Container  Clusters page find the cluster by name andclick the Nodes tab which lists all Kubernetes and PAS cluster members.For Kubernetes cluster1. Check NCP Pod liveness by finding the K8s master node from all thecluster members and log onto the master node. Then invoke the kubectlcommand kubectl get pods allnamespaces. If there is an issue withthe NCP Pod please use kubectl logs command to check the issue and fixthe error.2. Check the connection between NCP and Kubernetes API server. TheNSX CLI can be used inside the NCP Pod to check this connection statusby invoking the following commands from the master VM.kubectl exec it NCPPodName n nsxsystem bashnsxcliget ncpk8sapiserver statusIf there is an issue with the connection please check both the networkand NCP configurations.3. Check the connection between NCP and NSX Manager. The NSX CLI can beused inside the NCP Pod to check this connection status by invoking thefollowing command from the master VM.kubectl exec it NCPPodName n nsxsystem bashnsxcliget ncpnsx statusIf there is an issue with the connection please check both the networkand NCP configurations.For PAS cluster1. Check the network connections between virtual machines and fix anynetwork issues.2. Check the status of both nodes and services and fix crashed nodesor services. Invoke the command bosh vms and bosh instances p tocheck the status of nodes and services."
        
        return metric
    #============= vmwNsxTNCPHealthNCPPluginDownClear ===============================
    if metric.tags["name"] == "vmwNsxTNCPHealthNCPPluginDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Manager Node has detected the NCP is up or healthy again.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTNodeAgentsHealthNodeAgentsDown ===============================
    if metric.tags["name"] == "vmwNsxTNodeAgentsHealthNodeAgentsDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The agents running inside the Node VM appear to be down.Action requiredFor ESX1. If Vmk50 is missing refer to this Knowledge Base articlehttpskb.vmware.comsarticle67432.2. If Hyperbus 4094 is missing restarting nsxcfgagent or restarting thecontainer host VM may help.3. If container host VIF is blocked check the connection to the Controllerto make sure all configurations are sent down.4. If nsxcfgagent has stopped restart nsxcfgagent.For KVM1. If Hyperbus namespace is missing restarting the  nsxopsagent may helprecreate the namespace.2. If Hyperbus interface is missing inside the hyperbus namespacerestarting the nsxopsagent may help.3. If nsxagent has stopped restart nsxagent.For Both ESX and KVM1. If the nodeagent package is missing check whether nodeagent packagehas been successfully installed in the container host vm.2. If the interface for nodeagent in container host vm is down check theeth1 interface status inside the container host vm."
        
        return metric
    #============= vmwNsxTNodeAgentsHealthNodeAgentsDownClear ===============================
    if metric.tags["name"] == "vmwNsxTNodeAgentsHealthNodeAgentsDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The agents inside the Node VM are running.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTPasswordManagementPasswordExpirationApproaching ===============================
    if metric.tags["name"] == "vmwNsxTPasswordManagementPasswordExpirationApproaching":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterUsername")
        vb9 = metric.fields.get("vmwNsxTDataCenterPasswordExpirationDays")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The password for user vmwNsxTDataCenterUsername is approaching expiration invmwNsxTDataCenterPasswordExpirationDays days.Action requiredThe password for the user vmwNsxTDataCenterUsername needs to be changed soon. For exampleto apply a new password to a user invoke the following NSX API with a validpassword in the request body PUT apiv1nodeusersuserid where useridis the ID of the user."
        
        return metric
    #============= vmwNsxTPasswordManagementPasswordExpirationApproachingClear ===============================
    if metric.tags["name"] == "vmwNsxTPasswordManagementPasswordExpirationApproachingClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterUsername")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The password for the user vmwNsxTDataCenterUsername has been changed successfully oris no longer expired.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTPasswordManagementPasswordExpired ===============================
    if metric.tags["name"] == "vmwNsxTPasswordManagementPasswordExpired":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterUsername")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The password for user vmwNsxTDataCenterUsername has expired.Action requiredThe password for user vmwNsxTDataCenterUsername must be changed now to access thesystem. For example to apply a new password to a user invoke thefollowing NSX API with a valid password in the request body PUTapiv1nodeusersuserid where userid is the ID of the user. If theadmin user (with userid 10000) password has expired admin must login tothe system via SSH (if enabled) or console in order to change the password.Upon entering the current expired password admin will be prompted to entera new password."
        
        return metric
    #============= vmwNsxTPasswordManagementPasswordExpiredClear ===============================
    if metric.tags["name"] == "vmwNsxTPasswordManagementPasswordExpiredClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterUsername")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The password for user vmwNsxTDataCenterUsername has been changed successfully oris no longer expired.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTPasswordManagementPasswordIsAboutToExpire ===============================
    if metric.tags["name"] == "vmwNsxTPasswordManagementPasswordIsAboutToExpire":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterUsername")
        vb9 = metric.fields.get("vmwNsxTDataCenterPasswordExpirationDays")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The password for user vmwNsxTDataCenterUsername is about to expire invmwNsxTDataCenterPasswordExpirationDays days.Action requiredEnsure the password for the user vmwNsxTDataCenterUsername is changed immediately. Forexample to apply a new password to a user invoke the following NSX APIwith a valid password in the request body PUT apiv1nodeusersuseridwhere userid is the ID of the user."
        
        return metric
    #============= vmwNsxTPasswordManagementPasswordIsAboutToExpireClear ===============================
    if metric.tags["name"] == "vmwNsxTPasswordManagementPasswordIsAboutToExpireClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterUsername")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The password for the user vmwNsxTDataCenterUsername has been changed successfully oris no longer expired.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTRoutingBFDDownOnExternalInterface ===============================
    if metric.tags["name"] == "vmwNsxTRoutingBFDDownOnExternalInterface":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterPeerAddress")
        vb9 = metric.fields.get("vmwNsxTDataCenterSrId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "In router vmwNsxTDataCenterEntityId BFD session for peer vmwNsxTDataCenterPeerAddress is down.Action required1. Invoke the NSX CLI command get logicalrouters.2. Switch to the service router vmwNsxTDataCenterSrId3. Invoke the NSX CLI command ping vmwNsxTDataCenterPeerAddress to verify theconnectivity."
        
        return metric
    #============= vmwNsxTRoutingBFDDownOnExternalInterfaceClear ===============================
    if metric.tags["name"] == "vmwNsxTRoutingBFDDownOnExternalInterfaceClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterPeerAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "In router vmwNsxTDataCenterEntityId BFD session for peer vmwNsxTDataCenterPeerAddress is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTRoutingBGPDown ===============================
    if metric.tags["name"] == "vmwNsxTRoutingBGPDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLrId")
        vb9 = metric.fields.get("vmwNsxTDataCenterBGPNeighborIP")
        vb10 = metric.fields.get("vmwNsxTDataCenterFailureReason")
        vb11 = metric.fields.get("vmwNsxTDataCenterSrId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "In Router vmwNsxTDataCenterLrId BGP neighbor vmwNsxTDataCenterEntityId (vmwNsxTDataCenterBGPNeighborIP) is downreason vmwNsxTDataCenterFailureReason.Action required1. Invoke the NSX CLI command get logicalrouters.2. Switch to servicerouter vmwNsxTDataCenterSrId.3. Invoke the NSX CLI command get bgp neighbor summary to check theBGP neighbor status.4. Check varlogsyslog to see if there are any errors related to BGPconnectivity."
        
        return metric
    #============= vmwNsxTRoutingBGPDownClear ===============================
    if metric.tags["name"] == "vmwNsxTRoutingBGPDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLrId")
        vb9 = metric.fields.get("vmwNsxTDataCenterBGPNeighborIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "In Router vmwNsxTDataCenterLrId BGP neighbor vmwNsxTDataCenterEntityId (vmwNsxTDataCenterBGPNeighborIP) is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTRoutingOSPFNeighborWentDown ===============================
    if metric.tags["name"] == "vmwNsxTRoutingOSPFNeighborWentDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterPeerAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "OSPF neighbor vmwNsxTDataCenterPeerAddress moved from full to another state.Action required1. Invoke the NSX CLI command get logicalrouters to get the vrf id andswitch to TIER0 service router.2. Run get ospf neighbor to check the current state of this neighbor. If theneighbor is not listed in the output the neighbor has gone down or out ofthe network.3. Invoke the NSX CLI command ping OSPF neighbor IP address to verify theconnectivity.4. Also verify the configuration for both NSX and peer router to ensure thattimers and areaid match.5. Check varlogsyslog to see if there are any errors related to connectivity."
        
        return metric
    #============= vmwNsxTRoutingOSPFNeighborWentDownClear ===============================
    if metric.tags["name"] == "vmwNsxTRoutingOSPFNeighborWentDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterPeerAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "OSPF neighbor vmwNsxTDataCenterPeerAddress moved to full state.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTRoutingProxyARPNotConfiguredForServiceIP ===============================
    if metric.tags["name"] == "vmwNsxTRoutingProxyARPNotConfiguredForServiceIP":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterServiceIP")
        vb9 = metric.fields.get("vmwNsxTDataCenterLrportId")
        vb10 = metric.fields.get("vmwNsxTDataCenterLrId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Proxy arp for Service IP vmwNsxTDataCenterServiceIP and Service entity vmwNsxTDataCenterEntityIdis not configured as the number of arp proxy entries generated due to overlap ofthe Service IP with subnet of lrport vmwNsxTDataCenterLrportId on Router vmwNsxTDataCenterLrId has exceededthe allowed threshold limit of 16384.This notification is sent once when the threshold limit is exceeded.Action requiredReconfigure the Service IP vmwNsxTDataCenterServiceIP for the Service entity vmwNsxTDataCenterEntityIdor change the subnet of the lrport vmwNsxTDataCenterLrportId on Router vmwNsxTDataCenterLrId so that the proxy arp entriesgenerated due to the overlap between the Service IP and the subnet of lrport is less thanthe allowed threshold limit of 16384."
        
        return metric
    #============= vmwNsxTRoutingProxyARPNotConfiguredForServiceIPClear ===============================
    if metric.tags["name"] == "vmwNsxTRoutingProxyARPNotConfiguredForServiceIPClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterLrportId")
        vb9 = metric.fields.get("vmwNsxTDataCenterLrId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Proxy arp for Service entity vmwNsxTDataCenterEntityId is generated successfully as theoverlap of service Ip with subnet of lrport vmwNsxTDataCenterLrportId on Router vmwNsxTDataCenterLrId iswithin the allowed limit of 16384 entries.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTRoutingRoutingDown ===============================
    if metric.tags["name"] == "vmwNsxTRoutingRoutingDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "All BGPBFD sessions are down.Action requiredInvoke the NSX CLI command get logicalrouters to get the tier0 service routerand switch to this vrf then invoke the following NSX CLI commands.1. ping BFD peer IP address to verify connectivity.2. get bfdconfig and get bfdsessions to check if BFD is running well.3. get bgp neighbor summary to check if BGP is running well.Also check varlogsyslog to see if there are any errors related to BGPconnectivity."
        
        return metric
    #============= vmwNsxTRoutingRoutingDownClear ===============================
    if metric.tags["name"] == "vmwNsxTRoutingRoutingDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "At least one BGPBFD session up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTRoutingStaticRoutingRemoved ===============================
    if metric.tags["name"] == "vmwNsxTRoutingStaticRoutingRemoved":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterStaticAddress")
        vb9 = metric.fields.get("vmwNsxTDataCenterSrId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "In router vmwNsxTDataCenterEntityId static route vmwNsxTDataCenterStaticAddress was removed becauseBFD was down.Action requiredThe static routing entry was removed because the BFD session was down.1. Invoke the NSX CLI command get logicalrouters.2. Switch to the servicerouter vmwNsxTDataCenterSrId.3. Invoke the NSX CLI command ping BFD peer IP address to verify theconnectivity.Also verify the configuration in both NSX and the BFD peer to ensure thattimers have not been changed."
        
        return metric
    #============= vmwNsxTRoutingStaticRoutingRemovedClear ===============================
    if metric.tags["name"] == "vmwNsxTRoutingStaticRoutingRemovedClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterStaticAddress")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "In router vmwNsxTDataCenterEntityId static route vmwNsxTDataCenterStaticAddress was readded as BFDrecovered.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTTransportNodeHealthLAGMemberDown ===============================
    if metric.tags["name"] == "vmwNsxTTransportNodeHealthLAGMemberDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "LACP reporting member down.Action requiredCheck the connection status of LAG members on hosts.1. In the NSX UI navigate to Fabric  Nodes  Transport Nodes Host Transport Nodes.2. In the Host Transport Nodes list check the Node Status column. Find theTransport node with the degraded or down Node Status.3. Select transport node  Monitor.  Find the bond(uplink) which isreporting degraded or down.4. Check the LACP member status details by logging into the failed host andinvoking esxcli network vswitch dvs vmware lacp status get on an ESXihost or ovsappctl bondshow and ovsappctl lacpshow on a KVM host."
        
        return metric
    #============= vmwNsxTTransportNodeHealthLAGMemberDownClear ===============================
    if metric.tags["name"] == "vmwNsxTTransportNodeHealthLAGMemberDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "LACP reporting member up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTTransportNodeHealthNVDSUplinkDown ===============================
    if metric.tags["name"] == "vmwNsxTTransportNodeHealthNVDSUplinkDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Uplink is going down.Action requiredCheck the physical NICs status of uplinks on hosts.1. In the NSX UI navigate to Fabric  Nodes  Transport Nodes Host Transport Nodes.2. In the Host Transport Nodes list check the Node Status column. Find theTransport node with the degraded or down Node Status.3. Select transport node  Monitor. Check the status details of thebond(uplink) which is reporting degraded or down. To avoid a degraded stateensure all uplink interfaces are connected and up regardless of whether theyare in use or not."
        
        return metric
    #============= vmwNsxTTransportNodeHealthNVDSUplinkDownClear ===============================
    if metric.tags["name"] == "vmwNsxTTransportNodeHealthNVDSUplinkDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Uplink is going up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTVPNIPsecPolicyBasedSessionDown ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecPolicyBasedSessionDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSessionDownReason")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The policy based IPsec VPN session vmwNsxTDataCenterEntityId is down.Reason vmwNsxTDataCenterSessionDownReason.Action requiredCheck IPsec VPN session configuration and resolve errors based on thesession down reason."
        
        return metric
    #============= vmwNsxTVPNIPsecPolicyBasedSessionDownClear ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecPolicyBasedSessionDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The policy based IPsec VPN session vmwNsxTDataCenterEntityId is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTVPNIPsecPolicyBasedTunnelDown ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecPolicyBasedTunnelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or more policy based IPsec VPN tunnels in session vmwNsxTDataCenterEntityId are down.Action requiredCheck IPsec VPN session configuration and resolve errors based on thetunnel down reason."
        
        return metric
    #============= vmwNsxTVPNIPsecPolicyBasedTunnelDownClear ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecPolicyBasedTunnelDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "All policy based IPsec VPN tunnels in session vmwNsxTDataCenterEntityId are up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTVPNIPsecRouteBasedSessionDown ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecRouteBasedSessionDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterSessionDownReason")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The route based IPsec VPN session vmwNsxTDataCenterEntityId is down.Reason vmwNsxTDataCenterSessionDownReason.Action requiredCheck IPsec VPN session configuration and resolve errors based on thesession down reason."
        
        return metric
    #============= vmwNsxTVPNIPsecRouteBasedSessionDownClear ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecRouteBasedSessionDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The route based IPsec VPN session vmwNsxTDataCenterEntityId is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTVPNIPsecRouteBasedTunnelDown ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecRouteBasedTunnelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        vb8 = metric.fields.get("vmwNsxTDataCenterTunnelDownReason")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The route based IPsec VPN tunnel in session vmwNsxTDataCenterEntityId is down.Reason vmwNsxTDataCenterTunnelDownReason.Action requiredCheck IPsec VPN session configuration and resolve errors based on thetunnel down reason."
        
        return metric
    #============= vmwNsxTVPNIPsecRouteBasedTunnelDownClear ===============================
    if metric.tags["name"] == "vmwNsxTVPNIPsecRouteBasedTunnelDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The route based IPsec VPN tunnel in session vmwNsxTDataCenterEntityId is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    #============= vmwNsxTVPNL2VpnSessionDown ===============================
    if metric.tags["name"] == "vmwNsxTVPNL2VpnSessionDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The L2VPN session vmwNsxTDataCenterEntityId is down.Action requiredCheck L2VPN session status for session down reason and resolve errors basedon the reason."
        
        return metric
    #============= vmwNsxTVPNL2VpnSessionDownClear ===============================
    if metric.tags["name"] == "vmwNsxTVPNL2VpnSessionDownClear":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxTDataCenterTimestamp")
        vb2 = metric.fields.get("vmwNsxTDataCenterFeatureName")
        vb3 = metric.fields.get("vmwNsxTDataCenterEventType")
        vb4 = metric.fields.get("vmwNsxTDataCenterEventSeverity")
        vb5 = metric.fields.get("vmwNsxTDataCenterNodeId")
        vb6 = metric.fields.get("vmwNsxTDataCenterNodeType")
        vb7 = metric.fields.get("vmwNsxTDataCenterEntityId")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The L2VPN session vmwNsxTDataCenterEntityId is up.Action requiredNone receipt of this notification indicates event cleared."
        
        return metric
    
    return metric 
'''