[[processors.starlark]]
# MIB filename - SCC-CMC-MIB.txt
# MIB name - CMC-MIB
source = '''
def apply(metric):

    #============= procCrash ===============================
    if metric.tags["name"] == "procCrash":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("procName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A procCrash trap signifies that a process managed by PM         has crashed and left a core file.  The variable sent withthe notification indicates the name of the process that crashed."
        
        return metric
    #============= procExit ===============================
    if metric.tags["name"] == "procExit":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("procName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A procExit trap signifies that a process managed by PM         has exited unexpectedly but not left a core file.         The variable sent with the notification indicates the nameof the process that exited."
        
        return metric
    #============= cpuUtil ===============================
    if metric.tags["name"] == "cpuUtil":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Indicates that the average CPU utilization in the past minute has gone above the acceptable threshold"
        
        return metric
    #============= pagingActivity ===============================
    if metric.tags["name"] == "pagingActivity":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Indicates that the system has been paging excessively (thrashing)"
        
        return metric
    #============= confModeEnter ===============================
    if metric.tags["name"] == "confModeEnter":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A user has entered configuration mode"
        
        return metric
    #============= confModeExit ===============================
    if metric.tags["name"] == "confModeExit":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A user has exited configuration mode"
        
        return metric
    #============= powerSupplyError ===============================
    if metric.tags["name"] == "powerSupplyError":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A power supply on the appliance has failed. Not supported on all models"
        
        return metric
    #============= fanError ===============================
    if metric.tags["name"] == "fanError":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A fan error has been detected on the appliance. Not supported on all models"
        
        return metric
    #============= memoryError ===============================
    if metric.tags["name"] == "memoryError":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A memory error has been detected on the appliance. Not supported on all models"
        
        return metric
    #============= ipmi ===============================
    if metric.tags["name"] == "ipmi":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "An IPMI event has been detected on the appliance. Not supported on all models"
        
        return metric
    #============= configChange ===============================
    if metric.tags["name"] == "configChange":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A change has been made to the systems configuration"
        
        return metric
    #============= temperatureWarning ===============================
    if metric.tags["name"] == "temperatureWarning":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The system temperature has exceeded the threshold"
        
        return metric
    #============= temperatureCritical ===============================
    if metric.tags["name"] == "temperatureCritical":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The system temperature has reached a critical stage"
        
        return metric
    #============= extBackupFailed ===============================
    if metric.tags["name"] == "extBackupFailed":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The external backup or restore has failed"
        
        return metric
    #============= appHealthNotif ===============================
    if metric.tags["name"] == "appHealthNotif":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("typeName")
        vb2 = metric.fields.get("applianceSerial")
        vb3 = metric.fields.get("applianceDisplayAddr")
        vb4 = metric.fields.get("applianceHealth")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A appHealthNotif trap signifies that an appliance managed bythe CMC has changed health state. The variables sent with thenotification indicates the serial number of the appliancethe display address and the health state that it is in.The health status can be the following valuesHealthyAdmission ControlDegradedCritical"
        
        return metric
    #============= appConnNotif ===============================
    if metric.tags["name"] == "appConnNotif":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("typeName")
        vb2 = metric.fields.get("applianceSerial")
        vb3 = metric.fields.get("applianceDisplayAddr")
        vb4 = metric.fields.get("applianceConn")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A appConnNotif trap signifies that an appliance managed bythe CMC has changed connection state. The variables sent withthe notification indicates the serial number of the appliancethe display address and the new connection status it is in.The connection status can be the following valuesUnknownDisconnectedDisconnected RGP failureDisconnected could not find SSH2 clientDisconnected not a valid applianceDisconnected invalid usernamepasswordDisconnected unreachable addressDisconnected cant resolve hostnameDisconnected network time outDisconnected network interruptionDisconnected untrustedDisconnected host key verification failedDisconnected already being managedDisconnected reconnect requestedDisconnected appliance disabledDisconnected appliance modifiedDisconnected appliance deletedDisconnected timeout in initial handshakeDisconnected handshake failureDisconnected unsupported applianceDisconnected request timed outDisconnected not enough licensesDisconnected rbmd unavailableDisconnected missing or invalid base licenseDisconnected product mismatchDisconnected admin user requiredDisconnected password expiredDisconnected no address specifiedDisconnected invalid serial numberConnected"
        
        return metric
    #============= appBackupSuccess ===============================
    if metric.tags["name"] == "appBackupSuccess":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("typeName")
        vb2 = metric.fields.get("applianceSerial")
        vb3 = metric.fields.get("applianceDisplayAddr")
        vb4 = metric.fields.get("applianceBackup")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A appBackupSuccess trap signifies that an appliance managed bythe CMC has successfully completed a backup. The variables sentwith the notification indicates the appliance serial numberthe display address and the time of the backup."
        
        return metric
    #============= appBackupFailure ===============================
    if metric.tags["name"] == "appBackupFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("typeName")
        vb2 = metric.fields.get("applianceSerial")
        vb3 = metric.fields.get("applianceDisplayAddr")
        vb4 = metric.fields.get("applianceBackup")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A appBackupFailure trap signifies that an appliance managed bythe CMC has failed a backup. The variables sentwith the notification indicates the appliance serial numberthe display address and the time of the backup."
        
        return metric
    #============= underprovisionedVM ===============================
    if metric.tags["name"] == "underprovisionedVM":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM has too little storage or memory"
        
        return metric
    #============= autoconnectFailed ===============================
    if metric.tags["name"] == "autoconnectFailed":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "SH could not autoconnect due to license depletion"
        
        return metric
    #============= licenseFailureRegimeChange ===============================
    if metric.tags["name"] == "licenseFailureRegimeChange":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Licensing status has changed"
        
        return metric
    #============= certsExpiring ===============================
    if metric.tags["name"] == "certsExpiring":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "SSL certificates expiring"
        
        return metric
    #============= fsMntBytes ===============================
    if metric.tags["name"] == "fsMntBytes":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "System disk full"
        
        return metric
    #============= linkState ===============================
    if metric.tags["name"] == "linkState":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Network interface link errors"
        
        return metric
    #============= raidError ===============================
    if metric.tags["name"] == "raidError":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Error on RAID array of the appliance.  Not supported on all models"
        
        return metric
    #============= trapTest ===============================
    if metric.tags["name"] == "trapTest":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Trap test"
        
        return metric
    #============= configSave ===============================
    if metric.tags["name"] == "configSave":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The current appliance configuration has been saved"
        
        return metric
    #============= tcpDumpStarted ===============================
    if metric.tags["name"] == "tcpDumpStarted":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A TCP Dump has been started"
        
        return metric
    #============= tcpDumpScheduled ===============================
    if metric.tags["name"] == "tcpDumpScheduled":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A TCP Dump has been scheduled"
        
        return metric
    #============= newUserCreated ===============================
    if metric.tags["name"] == "newUserCreated":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A new user has been created"
        
        return metric
    #============= cliUserLogin ===============================
    if metric.tags["name"] == "cliUserLogin":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A user has just loggedin via CLI"
        
        return metric
    #============= cliUserLogout ===============================
    if metric.tags["name"] == "cliUserLogout":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A CLI user has just loggedout"
        
        return metric
    #============= webUserLogin ===============================
    if metric.tags["name"] == "webUserLogin":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A user has just loggedin via the Web UI"
        
        return metric
    #============= webUserLogout ===============================
    if metric.tags["name"] == "webUserLogout":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A user has just loggedout via the Web UI"
        
        return metric
    #============= applianceConfigChange ===============================
    if metric.tags["name"] == "applianceConfigChange":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Appliance configuration has been changed"
        
        return metric
    #============= cpuUtilClear ===============================
    if metric.tags["name"] == "cpuUtilClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The average CPU utilization has fallen backwithin the acceptable threshold"
        
        return metric
    #============= pagingActivityClear ===============================
    if metric.tags["name"] == "pagingActivityClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The system has stopped paging excessively (thrashing)"
        
        return metric
    #============= powerSupplyErrorClear ===============================
    if metric.tags["name"] == "powerSupplyErrorClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "All power supplies are now functioning normally"
        
        return metric
    #============= fanErrorClear ===============================
    if metric.tags["name"] == "fanErrorClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "All system fans are now functioning normally"
        
        return metric
    #============= memoryErrorClear ===============================
    if metric.tags["name"] == "memoryErrorClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A memory error has been rectified on the appliance"
        
        return metric
    #============= ipmiClear ===============================
    if metric.tags["name"] == "ipmiClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "An IPMI event has been rectified on the appliance"
        
        return metric
    #============= temperatureNormal ===============================
    if metric.tags["name"] == "temperatureNormal":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The system temperature is back within the threshold"
        
        return metric
    #============= temperatureNonCritical ===============================
    if metric.tags["name"] == "temperatureNonCritical":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The system temperature is no longer in a critical stage"
        
        return metric
    #============= extBackupFailedClear ===============================
    if metric.tags["name"] == "extBackupFailedClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The external backup or restore failure has beenaddressed"
        
        return metric
    #============= underprovisionedVMClear ===============================
    if metric.tags["name"] == "underprovisionedVMClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM storage and memory are now adequate"
        
        return metric
    #============= certsExpiringClear ===============================
    if metric.tags["name"] == "certsExpiringClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "SSL certificates no longer expiring"
        
        return metric
    #============= fsMntBytesClear ===============================
    if metric.tags["name"] == "fsMntBytesClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "System disk no longer full"
        
        return metric
    #============= linkStateClear ===============================
    if metric.tags["name"] == "linkStateClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Interface has regained link"
        
        return metric
    #============= raidErrorClear ===============================
    if metric.tags["name"] == "raidErrorClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "RAID ok now"
        
        return metric
    #============= applianceConfigChangeClear ===============================
    if metric.tags["name"] == "applianceConfigChangeClear":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "Riverbed Technology Inc."
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Successfully pushed policy or restored configuration"
        
        return metric
    
    return metric 
'''