[[processors.starlark]]
# MIB filename - DISMAN-PING-MIB.txt
# MIB name - DISMAN-PING-MIB
source = '''
def apply(metric):

    #============= pingProbeFailed ===============================
    if metric.tags["name"] == "pingProbeFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("pingCtlTargetAddressType")
        vb2 = metric.fields.get("pingCtlTargetAddress")
        vb3 = metric.fields.get("pingResultsOperStatus")
        vb4 = metric.fields.get("pingResultsIpTargetAddressType")
        vb5 = metric.fields.get("pingResultsIpTargetAddress")
        vb6 = metric.fields.get("pingResultsMinRtt")
        vb7 = metric.fields.get("pingResultsMaxRtt")
        vb8 = metric.fields.get("pingResultsAverageRtt")
        vb9 = metric.fields.get("pingResultsProbeResponses")
        vb10 = metric.fields.get("pingResultsSentProbes")
        vb11 = metric.fields.get("pingResultsRttSumOfSquares")
        vb12 = metric.fields.get("pingResultsLastGoodProbe")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Generated when a probe failure is detected when thecorresponding pingCtlTrapGeneration object is set toprobeFailure(0) subject to the value ofpingCtlTrapProbeFailureFilter.  The objectpingCtlTrapProbeFailureFilter can be used to specify thenumber of consecutive probe failures that are requiredbefore this notification can be generated."
        
    #============= pingTestFailed ===============================
    if metric.tags["name"] == "pingTestFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("pingCtlTargetAddressType")
        vb2 = metric.fields.get("pingCtlTargetAddress")
        vb3 = metric.fields.get("pingResultsOperStatus")
        vb4 = metric.fields.get("pingResultsIpTargetAddressType")
        vb5 = metric.fields.get("pingResultsIpTargetAddress")
        vb6 = metric.fields.get("pingResultsMinRtt")
        vb7 = metric.fields.get("pingResultsMaxRtt")
        vb8 = metric.fields.get("pingResultsAverageRtt")
        vb9 = metric.fields.get("pingResultsProbeResponses")
        vb10 = metric.fields.get("pingResultsSentProbes")
        vb11 = metric.fields.get("pingResultsRttSumOfSquares")
        vb12 = metric.fields.get("pingResultsLastGoodProbe")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Generated when a ping test is determined to have failedwhen the corresponding pingCtlTrapGeneration object isset to testFailure(1).  In this instancepingCtlTrapTestFailureFilter should specify the number ofprobes in a test required to have failed in order toconsider the test failed."
        
    #============= pingTestCompleted ===============================
    if metric.tags["name"] == "pingTestCompleted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("pingCtlTargetAddressType")
        vb2 = metric.fields.get("pingCtlTargetAddress")
        vb3 = metric.fields.get("pingResultsOperStatus")
        vb4 = metric.fields.get("pingResultsIpTargetAddressType")
        vb5 = metric.fields.get("pingResultsIpTargetAddress")
        vb6 = metric.fields.get("pingResultsMinRtt")
        vb7 = metric.fields.get("pingResultsMaxRtt")
        vb8 = metric.fields.get("pingResultsAverageRtt")
        vb9 = metric.fields.get("pingResultsProbeResponses")
        vb10 = metric.fields.get("pingResultsSentProbes")
        vb11 = metric.fields.get("pingResultsRttSumOfSquares")
        vb12 = metric.fields.get("pingResultsLastGoodProbe")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF Distributed Management Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Generated at the completion of a ping test when thecorresponding pingCtlTrapGeneration object has thetestCompletion(2) bit set."
        
    
    return metric 
'''