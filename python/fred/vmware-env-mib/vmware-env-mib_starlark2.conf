[[processors.starlark]]
# MIB filename - VMWARE-ENV-MIB.mib
# MIB name - VMWARE-ENV-MIB
source = '''
def apply(metric):

    #============= vmwEnvIpmiSelFull ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelFull":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwSELCapacity")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "An IPMI System Event Log has fixed amount of entries (65535). This event is sent once whenthe managed object vmwSELCapacity reaches 100 capacity at which point new entriesto the SEL will be dropped if overflow is not enabled (default) on most hardware systems.This event will rearm any time vmwSELCapacity.0 drops below 80."
        
    #============= vmwEnvIpmiSelMemoryRaised ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelMemoryRaised":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A memory related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.The vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvIpmiSelMemoryCleared ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelMemoryCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A memory related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deassertedThe vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvIpmiSelPowerSupplyRaised ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelPowerSupplyRaised":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A power supply related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.The vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvIpmiSelPowerSupplyCleared ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelPowerSupplyCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A power supply related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deassertedThe vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvIpmiSelFanRaised ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelFanRaised":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A fan related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.The vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvIpmiSelFanCleared ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelFanCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A fan related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deassertedThe vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvIpmiSelCpuRaised ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelCpuRaised":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A CPU related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state asserted.The vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvIpmiSelCpuCleared ===============================
    if metric.tags["name"] == "vmwEnvIpmiSelCpuCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvSelSensorNumber")
        vb2 = metric.fields.get("vmwEnvHardwareTime")
        vb3 = metric.fields.get("vmwEventDescription")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A CPU related IPMI SDR has updated IPMI SEL with record id of vmwEnvIndex with state deassertedThe vmwEnvTable will have an entry at vmwEnvIndex with additional details"
        
    #============= vmwEnvHardwareEvent ===============================
    if metric.tags["name"] == "vmwEnvHardwareEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwSubsystemType")
        vb2 = metric.fields.get("vmwHardwareStatus")
        vb3 = metric.fields.get("vmwEventDescription")
        vb4 = metric.fields.get("vmwEnvHardwareTime")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification if the agent is so configured may be sent when thesystem has detected a material change in physical condition of thehardware"
        
    #============= vmwESXEnvHardwareEvent ===============================
    if metric.tags["name"] == "vmwESXEnvHardwareEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwSubsystemType")
        vb2 = metric.fields.get("vmwHardwareStatus")
        vb3 = metric.fields.get("vmwEventDescription")
        vb4 = metric.fields.get("vmwEnvHardwareTime")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "ESX Specific version of this notificationif the agent is so configured may be sent whenthe ESX Operating System has detected a material change inphysical condition of the hardware"
        
    #============= vmwESXEnvHardwareAlert ===============================
    if metric.tags["name"] == "vmwESXEnvHardwareAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A hardware alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvBatteryAlert ===============================
    if metric.tags["name"] == "vmwESXEnvBatteryAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A battery alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvChassisAlert ===============================
    if metric.tags["name"] == "vmwESXEnvChassisAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A chassis alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvThermalAlert ===============================
    if metric.tags["name"] == "vmwESXEnvThermalAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A coolingthermal alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvDiskAlert ===============================
    if metric.tags["name"] == "vmwESXEnvDiskAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A disk drive alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvPowerAlert ===============================
    if metric.tags["name"] == "vmwESXEnvPowerAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A power suppply alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvProcessorAlert ===============================
    if metric.tags["name"] == "vmwESXEnvProcessorAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A IPMI processor alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvMemoryAlert ===============================
    if metric.tags["name"] == "vmwESXEnvMemoryAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A IPMI memory alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    #============= vmwESXEnvBIOSAlert ===============================
    if metric.tags["name"] == "vmwESXEnvBIOSAlert":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEnvDescription")
        vb2 = metric.fields.get("vmwEnvEventTime")
        vb3 = metric.fields.get("vmwEnvIndicationTime")
        vb4 = metric.fields.get("vmwEnvPerceivedSeverity")
        vb5 = metric.fields.get("vmwEnvAlertType")
        vb6 = metric.fields.get("vmwEnvSysCreationClassName")
        vb7 = metric.fields.get("vmwEnvAlertingElement")
        vb8 = metric.fields.get("vmwEnvAlertingFormat")
        vb9 = metric.fields.get("vmwEnvSystemName")
        vb10 = metric.fields.get("vmwEnvProviderName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "BIOS System Event Log alert as received from the Common Infrastructure Management (CIM) subsystem on this system."
        
    
    return metric 
'''