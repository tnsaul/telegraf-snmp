[[processors.starlark]]
# MIB filename - VMWARE-VMINFO-MIB.mib
# MIB name - VMWARE-VMINFO-MIB
source = '''
def apply(metric):

    #============= vmwVmPoweredOn ===============================
    if metric.tags["name"] == "vmwVmPoweredOn":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        vb3 = metric.fields.get("vmwVmDisplayName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine is powered on from a suspended or a powered off state. The origin of this event can be severalfor instance may be operator initiated existing vmx process reconnects to control subsystem. NOTE vms powered up due to VMotion are not reported. Upon receiving this notification client applications shouldpoll the vmwVmTable to obtain current status."
        
    #============= vmwVmPoweredOff ===============================
    if metric.tags["name"] == "vmwVmPoweredOff":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        vb3 = metric.fields.get("vmwVmDisplayName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine is powered off. The origin of this event can be severalfor instance may be operator initiated vmx process terminating abnormally. NOTE vms powered down dueto VMotion are not reported. Upon receiving this notification client applications shouldpoll the vmwVmTable to obtain current status."
        
    #============= vmwVmHBLost ===============================
    if metric.tags["name"] == "vmwVmHBLost":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        vb3 = metric.fields.get("vmwVmDisplayName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine detects a loss in guest heartbeat. The Guest heartbeatis only sent if VMware Tools are installed in the Guest OS. Control process will send this event whenever it determines the number of guest heartbeats for a given period of time have not been received. Upon receiving this notification client applications shouldpoll the vmwVmTable to obtain current status."
        
    #============= vmwVmHBDetected ===============================
    if metric.tags["name"] == "vmwVmHBDetected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        vb3 = metric.fields.get("vmwVmDisplayName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine detects or regains the required number of guest heartbeatsfor a given period of time. This is only sent if VMware tools are installed in the Guest OS.Upon receiving this notification client applications shouldpoll the vmwVmTable to obtain current status."
        
    #============= vmwVmSuspended ===============================
    if metric.tags["name"] == "vmwVmSuspended":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        vb3 = metric.fields.get("vmwVmDisplayName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine is suspended. The origin of this event may be several operatorinitiated by software api clients and by other means.Upon receiving this notification client applications shouldpoll the vmwVmTable to obtain current status."
        
    
    return metric 
'''