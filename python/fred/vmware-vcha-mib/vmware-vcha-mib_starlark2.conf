[[processors.starlark]]
# MIB filename - VMWARE-VCHA-MIB.mib
# MIB name - VMWARE-VCHA-MIB
source = '''
def apply(metric):

    #============= vmwVchaNodeJoined ===============================
    if metric.tags["name"] == "vmwVchaNodeJoined":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaPrivateAddressType")
        vb3 = metric.fields.get("vmwVchaPrivateAddressAddr")
        vb4 = metric.fields.get("vmwVchaTargetNodeRole")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent from the Active node when itnotices a peer node rejoin the cluster. It is sent only once."
        
        return metric
    #============= vmwVchaNodeLeft ===============================
    if metric.tags["name"] == "vmwVchaNodeLeft":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaPrivateAddressType")
        vb3 = metric.fields.get("vmwVchaPrivateAddressAddr")
        vb4 = metric.fields.get("vmwVchaTargetNodeRole")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This warning notification is sent from the Active node when it noticesa peer node has left the cluster. This is sent only once. Operatorshould check the liveness and connectivity of the departed node and tryto bring it back by either rebooting the appliance or resolving thenetwork problem."
        
        return metric
    #============= vmwVchaNodeIsolated ===============================
    if metric.tags["name"] == "vmwVchaNodeIsolated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaPrivateAddressType")
        vb3 = metric.fields.get("vmwVchaPrivateAddressAddr")
        vb4 = metric.fields.get("vmwVchaTargetNodeRole")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This warning notification is sent when a node is network isolated fromthe cluster. This notification can only be sent from the isolated nodenot by other nodes in the cluster. After being isolated the node willreboot itself trigging coldStart notification. In case of Active nodefailure the cluster will trigger a reelection and every slave node willbe declared as isolated temporarily before the cluster reelectioncompletes."
        
        return metric
    #============= vmwVchaClusterStateChanged ===============================
    if metric.tags["name"] == "vmwVchaClusterStateChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaClusterState")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification is sent only once from the Active node when vCenterHA cluster state changes to either healthy degraded or isolated. Pleasesee VmwVchaClusterStateType for detailed description of each state. Andadministrator should receive another notification describing the statechange of cluster subsystem (cluster membership DB replication or filereplication) which is trigger of cluster state change."
        
        return metric
    #============= vmwVchaClusterModeChanged ===============================
    if metric.tags["name"] == "vmwVchaClusterModeChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaClusterMode")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification is sent only once from the Active node when vCenterHA cluster mode changes to either enabled maintenance or disabled."
        
        return metric
    #============= vmwVchaPublicIpUp ===============================
    if metric.tags["name"] == "vmwVchaPublicIpUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaPublicAddressType")
        vb3 = metric.fields.get("vmwVchaPublicAddressAddr")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent only once when the public IPaddress is brought up on the Active node. At this time the Active nodeis reachable from the client and will be able to serve client requestswhen services are up and running."
        
        return metric
    #============= vmwVchaPublicIpDown ===============================
    if metric.tags["name"] == "vmwVchaPublicIpDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaPublicAddressType")
        vb3 = metric.fields.get("vmwVchaPublicAddressAddr")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent only once when the publicnetwork interface is brought down on the Active node. This can happenwhen InitiateFailover is invoked on the Active node or vcha processgracefully shuts down resulting in a reboot of the appliance (triggeredby network isolation). During this time clients cannot connect tovCenter Server and users will experience downtime until the publicnetwork interface is brought up. In either case users should notexpect more than five minutes of downtime. If VCHA cluster is still notconnectable the operator should verify the reachability of each nodethrough the cluster network."
        
        return metric
    #============= vmwVchaFailoverTriggered ===============================
    if metric.tags["name"] == "vmwVchaFailoverTriggered":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaIsPlannedFailover")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent only once when a failover istriggered from the Active node to Passive node. Passive node shouldtake over the Active role if the cluster is in healthy state."
        
        return metric
    #============= vmwVchaFailoverSucceeded ===============================
    if metric.tags["name"] == "vmwVchaFailoverSucceeded":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent only once when the Passive nodetakes over the Active role and brings up the public network interface."
        
        return metric
    #============= vmwVchaFailoverFailedDisabledMode ===============================
    if metric.tags["name"] == "vmwVchaFailoverFailedDisabledMode":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This warning notification is sent only once when the Active node failsto initiate a failover because the cluster is in disabled mode."
        
        return metric
    #============= vmwVchaFailoverFailedNodeLost ===============================
    if metric.tags["name"] == "vmwVchaFailoverFailedNodeLost":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This warning notification is sent only once when the Active node failsto initiate a failover because the cluster does not have all threenodes connected."
        
        return metric
    #============= vmwVchaFailoverFailedPassiveNotReady ===============================
    if metric.tags["name"] == "vmwVchaFailoverFailedPassiveNotReady":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This warning notification is sent only once when the Active node failsto initiate a failover because vPostgres service on the Passive node isnot ready to take over."
        
        return metric
    #============= vmwVchaContinueAsActive ===============================
    if metric.tags["name"] == "vmwVchaContinueAsActive":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent only once when the last Activenode continue as the Active node to servce clients request. This canhappen in many scenarios1. After triggering a planned failover DB or file replicator failed toflush data to the Passive node and failover didnt proceed because ofdata loss.2. After triggering a planned or forced failover Passive node failed topick up the Active role for reasons like auto failover cannot happen inmaintenance mode or cluster is in disabled mode."
        
        return metric
    #============= vmwVchaDbReplicationStateChanged ===============================
    if metric.tags["name"] == "vmwVchaDbReplicationStateChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaDbReplicationState")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent only once from the Active nodewhen database replication state changes to sync async or noreplication. Database replication is not healthy when it is in async orno replication state. Reasons include large network delays or vPostgresservice becoming unresponsive on the Passive node."
        
        return metric
    #============= vmwVchaFileReplicationStateChanged ===============================
    if metric.tags["name"] == "vmwVchaFileReplicationStateChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVchaInstanceUuid")
        vb2 = metric.fields.get("vmwVchaFileReplicationProvider")
        vb3 = metric.fields.get("vmwVchaIsFileProviderInSync")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This informative notification is sent only once from the Active nodewhen file replication state changes to insync or outofsync. Filereplication state is outofsync when VCHA fails to set a watch on afile at the Active node or fails to replicate a file from the Activenode to Passive. Administrators should check the corresponding KBarticle for recovery action."
        
        return metric
    
    return metric 
'''