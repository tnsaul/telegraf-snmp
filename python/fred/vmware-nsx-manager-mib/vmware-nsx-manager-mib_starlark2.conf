[[processors.starlark]]
# MIB filename - VMWARE-NSX-MANAGER-MIB.mib
# MIB name - VMWARE-NSX-MANAGER-MIB
source = '''
def apply(metric):

    #============= vmwNsxMConfigGroup ===============================
    if metric.tags["name"] == "vmwNsxMConfigGroup":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventTimestamp")
        vb2 = metric.fields.get("vmwNsxMCount")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Configuration notifications that are grouped will have this OID prefix."
        
        return metric
    #============= vmwNsxMSnmpDisabled ===============================
    if metric.tags["name"] == "vmwNsxMSnmpDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification is sent when the sending out of Snmp traps is disabled.This would most likely be the last Snmp trap the snmp manager receives.You may some times not receive it in case of high volume of traps. In thosecases you can rely on the heartbeat traps not being sent out.Action required None. If the sending of Snmp traps is enabled a warmStarttrap is received.Frequency of traps Once whenever the sending snmp traps is disabled."
        
        return metric
    #============= vmwNsxMSnmpManagerConfigUpdated ===============================
    if metric.tags["name"] == "vmwNsxMSnmpManagerConfigUpdated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This notification is sent when the snmp manager configuration has beenupdated. The event message will carry the semicolon separated new snmpmanagers details.Action required NoneFrequency of traps Once whenever the Snmp manager configuration is updated."
        
        return metric
    #============= vmwNsxMIpAddedBlackList ===============================
    if metric.tags["name"] == "vmwNsxMIpAddedBlackList":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever user authentication fails for number of times thatuser is blacklisted and further login attempts are disabled for that userfrom given IP address for some time.Action required NoneFrequency of traps Whenever user authentication fails consecutively withinsome time."
        
        return metric
    #============= vmwNsxMIpRemovedBlackList ===============================
    if metric.tags["name"] == "vmwNsxMIpRemovedBlackList":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "After user is blacklisted after blacklist duration expiresuser is removed from blacklist.Action required NoneFrequency of traps Whenever blacklist duration expires for any user."
        
        return metric
    #============= vmwNsxMSsoConfigFailure ===============================
    if metric.tags["name"] == "vmwNsxMSsoConfigFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever configuration of lookup service  SSO fails due tovarious reasons like invalid credentials invalid configuration time syncproblem etc.Action required Check the event message and reconfigure lookup servicewith correct details.Frequency of traps Once per failed configuration of lookup service."
        
        return metric
    #============= vmwNsxMSsoUnconfigured ===============================
    if metric.tags["name"] == "vmwNsxMSsoUnconfigured":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever user unconfigures lookup service.Action required NoneFrequency of traps Once per unconfiguration event of lookup service."
        
        return metric
    #============= vmwNsxMUserRoleAssigned ===============================
    if metric.tags["name"] == "vmwNsxMUserRoleAssigned":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "When role is assigned on NSX manager for vCenter user.Action required NoneFrequency of traps Once for each user who is assigned role."
        
        return metric
    #============= vmwNsxMUserRoleUnassigned ===============================
    if metric.tags["name"] == "vmwNsxMUserRoleUnassigned":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "When role is unassigned on NSX manager for vCenter user.Action NoneFrequency of traps Once for each user where role is removed."
        
        return metric
    #============= vmwNsxMGroupRoleAssigned ===============================
    if metric.tags["name"] == "vmwNsxMGroupRoleAssigned":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "When role is assigned on NSX manager for vCenter group.Action required NoneFrequency of traps Once for each group who is assigned role."
        
        return metric
    #============= vmwNsxMGroupRoleUnassigned ===============================
    if metric.tags["name"] == "vmwNsxMGroupRoleUnassigned":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "When role is unassigned on NSX manager for vCenter group.Action required NoneFrequency of traps Once for each group where role is removed."
        
        return metric
    #============= vmwNsxMVcLoginFailed ===============================
    if metric.tags["name"] == "vmwNsxMVcLoginFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever Connection with vCenter starts failing due toinvalid credentials.Action required Reconfigure NSX Manager vCenter configuration withcorrect credentials."
        
        return metric
    #============= vmwNsxMVcDisconnected ===============================
    if metric.tags["name"] == "vmwNsxMVcDisconnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever there is disconnectivity for default VCenterConnection maintained by NSX.Action required Administrator needs to check the connectivity with vCenterfor network problems or any other reasons."
        
        return metric
    #============= vmwNsxMLostVcConnectivity ===============================
    if metric.tags["name"] == "vmwNsxMLostVcConnectivity":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever there is disconnectivity for default VCenterConnection maintained by NSX.Action required Administrator needs to check the connectivity withvCenter for network problems or any other reasons."
        
        return metric
    #============= vmwNsxMSsoDisconnected ===============================
    if metric.tags["name"] == "vmwNsxMSsoDisconnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever there is disconnection with SSO lookup service.Action required Please check the configuration for possible disconnectionreasons like Invalid Credentials Time sync issues Network connectivityproblems etc. Navigate to Appliance management Web UI in browser(httpsnsxmanagerhost) traverse to Manage vCenter Registration taband verify the configuration for SSO Lookupservice.Frequency of traps Once per disconnect event default frequency to checkSSO connection state is 1 hour."
        
        return metric
    #============= vmwNsxMSsoTimeout ===============================
    if metric.tags["name"] == "vmwNsxMSsoTimeout":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "When we try to configure VC on a system where SSO is already configuredwe fetch the token to login to the VC using SSO. If it times out duringthat this trap is raised.Action required Try reconnecting to the SSO server and if the service remainsunresponsive try restarting the NSX management service from the NSX appliancemanagement UI. Contact the SSO administrator if the issue persists.Frequency of traps Whenever we try to configure VC on a system whereSSO is already configured."
        
        return metric
    #============= vmwNsxMFltrCnfgUpdateFailed ===============================
    if metric.tags["name"] == "vmwNsxMFltrCnfgUpdateFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager failed to enforce DFW. VMs on this host may not be protected by the DFW.  Contextual data provided with this event may indicate the cause of this failure.This could happen if the VIB version mismatches on the NSX Manager and ESX host. This may happen during an upgrade. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFltrCnfgNotAppliedToVnic ===============================
    if metric.tags["name"] == "vmwNsxMFltrCnfgNotAppliedToVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager failed to enforce DFW configuration on a vnic. This particular VM may not be protected by the DFW. Contextual data provided with this event may indicate the cause of this failure.This could happen if the VIB version mismatches on the NSX Manager and ESX host. This may happen during an upgrade. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFltrCnfgAppliedToVnic ===============================
    if metric.tags["name"] == "vmwNsxMFltrCnfgAppliedToVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Successfully updated filter config.Action required None"
        
        return metric
    #============= vmwNsxMFltrCreatedForVnic ===============================
    if metric.tags["name"] == "vmwNsxMFltrCreatedForVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Filter created. DFW is enforced in the datapath for thevnic.Action required None"
        
        return metric
    #============= vmwNsxMFltrDeletedForVnic ===============================
    if metric.tags["name"] == "vmwNsxMFltrDeletedForVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Filter deleted. DFW is removed from the vnic.Action required None"
        
        return metric
    #============= vmwNsxMFirewallConfigUpdateFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallConfigUpdateFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall rule Configuration between the NSX Manager and the host is not in sync. Contextual data provided with this event may indicate the cause of this failure. Verify that the host in question was properly prepared by NSX Manager. Collect error logs (vsfwd.log) when the host received firewall config. Force sync firewall config using ForceSync APIUI. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFirewallRuleFailedVnic ===============================
    if metric.tags["name"] == "vmwNsxMFirewallRuleFailedVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to apply Distributed Firewall configuration.Contextual data provided with this event may indicate the cause of this failure.Collect error logs (vmkernel.log) when the firewall configuration was applied to the vnic. vsip kernel heaps may not have enough free memory. Check VSFWD logs . See kb.vmware.comkb2125437.If the issue persists please collect the ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport.  See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFirewallRuleAppliedVnic ===============================
    if metric.tags["name"] == "vmwNsxMFirewallRuleAppliedVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Applied firewall config. Key value will have context infolike generation number and also other debugging info.Action required None"
        
        return metric
    #============= vmwNsxMCntnrCnfgUpdateFailed ===============================
    if metric.tags["name"] == "vmwNsxMCntnrCnfgUpdateFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed receive parse or update the container configuration. Contextual data provided with this event may indicate the cause of this failure.Collect error logs (vmkernel.log) when firewall configuration was applied to the vnic. Verify that vsip kernel heaps have enough free memory. Check VSFWD logs. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFlowMissed ===============================
    if metric.tags["name"] == "vmwNsxMFlowMissed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Flow missed.Contextual data provided with this event may indicate the cause of this failure.Collect error logs (vmkernel.log) when firewall configuration was applied to the vnic. Verify that vsip kernel heaps have enough free memory and vsfwd memory consumption is within resource limits. Check VSFWD logs. See kb.vmware.comkb2125437.If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMSpoofGuardCnfgUpdateFailed ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardCnfgUpdateFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to receive parse or Update the spoofguard configuration.Contextual data provided with this event may indicate the cause of this failure.Verify that the host in question was properly prepared by NSX Manager.Collect error logs (vmkernel.log) when the spoofguard configuration was applied to the host. For Sync the firewall configuration . See kb.vmware.comkb2125437."
        
        return metric
    #============= vmwNsxMSpoofGuardFailed ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to apply spoofguard to the vnic.Contextual data provided with this event may indicate the cause of this failure.Verify that vsip kernel heaps have enough free memory.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMSpoofGuardApplied ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardApplied":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Enabled spoofguard for vnic.Action required None"
        
        return metric
    #============= vmwNsxMSpoofGuardDisableFail ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardDisableFail":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to disable spoofguard on the vnic.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMSpoofGuardDisabled ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Disabled spoofguard for vnic.Action required None"
        
        return metric
    #============= vmwNsxMLegacyAppServiceDeletionFailed ===============================
    if metric.tags["name"] == "vmwNsxMLegacyAppServiceDeletionFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when legacy application service VMdeletion failed."
        
        return metric
    #============= vmwNsxMFirewallCpuThresholdCrossed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallCpuThresholdCrossed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd CPU usage threshold was exceeded.Reduce the amount of traffic of VMs on the host in question."
        
        return metric
    #============= vmwNsxMFirewallMemThresholdCrossed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallMemThresholdCrossed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd heap memory threshold exceeded for the specified heap.Reduce the number of  of VMs on the host in question reduce the number of rules or containers in firewall config. Use appliedTo feature to limit the number of rules for the current cluster."
        
        return metric
    #============= vmwNsxMConnPerSecThrshldCrossed ===============================
    if metric.tags["name"] == "vmwNsxMConnPerSecThrshldCrossed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd Connectons Per Second (CPS) threshold exceeded for the specified vnic.Reduce the amount of new connections of VMs on the host in question."
        
        return metric
    #============= vmwNsxMFirewallCnfgUpdateTimedOut ===============================
    if metric.tags["name"] == "vmwNsxMFirewallCnfgUpdateTimedOut":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager waits for 2 minutes after publishing the Firewall configuration to each host in the cluster. If a host takes more than 2 minutes to process the data it times out.Please check the Host in question. See if VSFWD is functioning or not. Also use CLI commands to verify if the rule realization is working properly or not. See kb.vmware.comkb2125437.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMSpoofGuardCnfgUpdateTmOut ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardCnfgUpdateTmOut":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager waits for 2 minutes after publishing the Spoofguard configuration to each host in the cluster. If a host takes more than 2 minutes to process the data it times out.Please check the Host in question. See if VSFWD is functioning or not. Also use CLI commands to verify if the rule realization is working properly or not. See kb.vmware.comkb2125437.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFirewallPublishFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallPublishFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall Configuration Publishing has failed for a given clusterhost.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMCntnrUpdatePublishFailed ===============================
    if metric.tags["name"] == "vmwNsxMCntnrUpdatePublishFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Publishing of container (IPMACvNIC) update pdate failed for a given hostcluster object.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMSpoofGuardUpdatePublishFailed ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardUpdatePublishFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The publishing of the spoofguard updates on this host has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMExcludeListPublishFailed ===============================
    if metric.tags["name"] == "vmwNsxMExcludeListPublishFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The publishing of the exclude list or updates to the exclude list on this host has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFirewallCnfgUpdateOnDltCntnr ===============================
    if metric.tags["name"] == "vmwNsxMFirewallCnfgUpdateOnDltCntnr":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Deletion of the object referenced in firewall rules.Action required Go to the NSX manager DFW UI. All the invalid referenceare marked invalid on the UI as well. Please remove the orphaned referencedand update the firewall rules."
        
        return metric
    #============= vmwNsxMHostSyncFailed ===============================
    if metric.tags["name"] == "vmwNsxMHostSyncFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Hostlevel force synchronization has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMHostSynced ===============================
    if metric.tags["name"] == "vmwNsxMHostSynced":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Force Sync operation for host succeeded.Action required None"
        
        return metric
    #============= vmwNsxMFirewallInstalled ===============================
    if metric.tags["name"] == "vmwNsxMFirewallInstalled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Distributed Firewall was successfully Installed on the host."
        
        return metric
    #============= vmwNsxMFirewallInstallFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallInstallFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Distributed Firewall Installation has failed. Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFirewallClusterInstalled ===============================
    if metric.tags["name"] == "vmwNsxMFirewallClusterInstalled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Distributed Firewall has been installed at the request of a user."
        
        return metric
    #============= vmwNsxMFirewallClusterUninstalled ===============================
    if metric.tags["name"] == "vmwNsxMFirewallClusterUninstalled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Distributed Firewall has been uninstalled at the request of a user."
        
        return metric
    #============= vmwNsxMFirewallClusterDisabled ===============================
    if metric.tags["name"] == "vmwNsxMFirewallClusterDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Distributed Firewall has been disabeld on the cluster at the request of a user."
        
        return metric
    #============= vmwNsxMFirewallForceSyncClusterFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallForceSyncClusterFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Force Sync operation for the cluster has failed.Use CLI commands to look at the logs and verify if any error messages appeared during the operation. See kb.vmware.comkb2125437.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb1010705"
        
        return metric
    #============= vmwNsxMFirewallForceSyncClusterSuccess ===============================
    if metric.tags["name"] == "vmwNsxMFirewallForceSyncClusterSuccess":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Force Sync operation for cluster succeeded.Action required None"
        
        return metric
    #============= vmwNsxMFirewallVsfwdProcessStarted ===============================
    if metric.tags["name"] == "vmwNsxMFirewallVsfwdProcessStarted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd process started on host.Action required None"
        
        return metric
    #============= vmwNsxMFirewallRulesetApplyAllFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallRulesetApplyAllFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failure to apply all the rule section configuration. Contextual data provided with this event may indicate the cause of this failure.Collect error logs (vmkernel.log) when firewall configuration was applied to the vnic. Verify that vsip kernel heaps have enough free memory. Check VSFWD logs. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMFirewallRulesetAppliedAll ===============================
    if metric.tags["name"] == "vmwNsxMFirewallRulesetAppliedAll":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Successfully applied all rule section config.Action required None."
        
        return metric
    #============= vmwNsxMCntnrCnfgApplyFailedToVnic ===============================
    if metric.tags["name"] == "vmwNsxMCntnrCnfgApplyFailedToVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failure to apply the container configuration. Contextual data provided with this event may indicate the cause of this failure.Collect error logs (vmkernel.log) when firewall configuration was applied to the vnic. Verify that vsip kernel heaps have enough free memory. Check VSFWD logs. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMCntnrCnfgApplyAllFailedToVnic ===============================
    if metric.tags["name"] == "vmwNsxMCntnrCnfgApplyAllFailedToVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failure to apply all container configuration. Contextual data provided with this event may indicate the cause of this failure.Collect error logs (vmkernel.log) when firewall configuration was applied to the vnic. Verify that vsip kernel heaps have enough free memory. Check VSFWD logs. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMCntnrCnfgAppliedAllToVnic ===============================
    if metric.tags["name"] == "vmwNsxMCntnrCnfgAppliedAllToVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Successfully applied all container config to all vnics.Action required None."
        
        return metric
    #============= vmwNsxMSpoofGuardApplyAllFailed ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardApplyAllFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to apply all spoofguard to the vnics.Contextual data provided with this event may indicate the cause of this failure.Verify that vsip kernel heaps have enough free memory.Please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 andhttpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMSpoofGuardAppliedAll ===============================
    if metric.tags["name"] == "vmwNsxMSpoofGuardAppliedAll":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Applied all spoofguard for vnics.Action required None."
        
        return metric
    #============= vmwNsxMFirewallTimeoutUpdateFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallTimeoutUpdateFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall session timer timeout configuration parseupdate failed. Timeout values are unchanged. Contextual data provided with this event may indicate the cause of this failure. Collect error logs (vsfwd.log) when the host received firewall config. Force sync firewall config using ForceSync APIUI. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMFirewallTimeoutApplyFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallTimeoutApplyFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall session timer timeout configuration apply failed. Certain timeout values are unchanged. Contextual data provided with this event may indicate the cause of this failure. Collect error logs (vsfwd.log) when the host received firewall config. Force sync firewall config using ForceSync APIUI. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMFirewallTimeoutApplied ===============================
    if metric.tags["name"] == "vmwNsxMFirewallTimeoutApplied":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Applied session timeout values for a vnic.Action required None."
        
        return metric
    #============= vmwNsxMFirewallTimeoutApplyAllFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallTimeoutApplyAllFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to apply all firewall session timer timeout configuration. Some timeout values are unchanged. Contextual data provided with this event may indicate the cause of this failure. Collect error logs (vsfwd.log) when the host received firewall config. Force sync firewall config using ForceSync APIUI. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMFirewallTimeoutAppliedAll ===============================
    if metric.tags["name"] == "vmwNsxMFirewallTimeoutAppliedAll":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Applied session timeout values for all vnics.Action required None."
        
        return metric
    #============= vmwNsxMCntnrCnfgAppliedToVnic ===============================
    if metric.tags["name"] == "vmwNsxMCntnrCnfgAppliedToVnic":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Successfully applied container config to all vnics.Action required None."
        
        return metric
    #============= vmwNsxMFirewallMaxConcurrentConnectionsThresholdCrossed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallMaxConcurrentConnectionsThresholdCrossed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd maximum concurrent connections threshold was exceeded for the specified vnic.Reduce the amount of traffic on the vnic in question."
        
        return metric
    #============= vmwNsxMFirewallProcessMemoryThresholdCrossed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallProcessMemoryThresholdCrossed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd memory utilization threshold was exceeded for the specified process.Reduce the number of rules or containers in firewall config. If persists there may be memory leaks in the process so restarting it may be necessary."
        
        return metric
    #============= vmwNsxMFirewallCpuThresholdCrossCleared ===============================
    if metric.tags["name"] == "vmwNsxMFirewallCpuThresholdCrossCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd CPU usage is back to below threshold level.Action required None."
        
        return metric
    #============= vmwNsxMFirewallMemThresholdCrossCleared ===============================
    if metric.tags["name"] == "vmwNsxMFirewallMemThresholdCrossCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd heap memory usage is back to below threshold level for the specified heap.Action required None."
        
        return metric
    #============= vmwNsxMConnPerSecThrshldCrossCleared ===============================
    if metric.tags["name"] == "vmwNsxMConnPerSecThrshldCrossCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd Connectons Per Second (CPS) is back to below threshold level for the specified vnic.Action required None."
        
        return metric
    #============= vmwNsxMFirewallMaxConcurrentConnectionsThresholdCrossCleared ===============================
    if metric.tags["name"] == "vmwNsxMFirewallMaxConcurrentConnectionsThresholdCrossCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd maximum concurrent connections is back to below threshold level for the specified vnic.Action required None."
        
        return metric
    #============= vmwNsxMFirewallProcessMemoryThresholdCrossCleared ===============================
    if metric.tags["name"] == "vmwNsxMFirewallProcessMemoryThresholdCrossCleared":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vsfwd memory utilization is back to below threshold level for the specified process.Action required None."
        
        return metric
    #============= vmwNsxMFirewallThresholdConfigApplied ===============================
    if metric.tags["name"] == "vmwNsxMFirewallThresholdConfigApplied":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Successfully applied all threshold config.Action required None."
        
        return metric
    #============= vmwNsxMFirewallThresholdConfigApplyFailed ===============================
    if metric.tags["name"] == "vmwNsxMFirewallThresholdConfigApplyFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall threshold configuration apply failed. Certain threshold values are unchanged. Contextual data provided with this event may indicate the cause of this failure. Collect error logs (vsfwd.log) when the host received firewall config. Force sync firewall config using ForceSync APIUI. See kb.vmware.comkb2125437 .If the issue persists please collect ESX and NSX Manager tech support bundle and open a SR with Vmware techsupport. See httpkb.vmware.comkb2074678 and httpkb.vmware.comkb653."
        
        return metric
    #============= vmwNsxMUnsupportedIPsetConfigured ===============================
    if metric.tags["name"] == "vmwNsxMUnsupportedIPsetConfigured":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Whenever an IP address 0.0.0.0 or 0.0.0.032 is configured as IPSet.KB article httpsikb.vmware.comkb53157Action Informationonly event. No action required. Workaround to this issue documented in KB article."
        
        return metric
    #============= vmwNsxMEdgeNoVmServing ===============================
    if metric.tags["name"] == "vmwNsxMEdgeNoVmServing":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "None of the Edge VMs found in serving state. There is apossibility of network disruption.Action required System auto recovers from this state today. Event shouldbe followed by traps with event code 30202 or 30203"
        
        return metric
    #============= vmwNsxMEdgeGatewayCreated ===============================
    if metric.tags["name"] == "vmwNsxMEdgeGatewayCreated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge Gateway created.Action required None"
        
        return metric
    #============= vmwNsxMEdgeVmBadState ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmBadState":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge VM in bad state. Needs a force sync.Action required System auto triggres force sync but if problem issustained then manual force sync should be triggered. For ESG forcesync is disruptive and will reboot edge VMs."
        
        return metric
    #============= vmwNsxMEdgeVmCommFailed ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmCommFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to communicate with the Edge VM.Action required Need investigation depending upon comunication channel.Log needs to be checked for VIX error code for futher action."
        
        return metric
    #============= vmwNsxMEdgeVmCnfgChanged ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmCnfgChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Edge VM configuration ischanged.Action required None"
        
        return metric
    #============= vmwNsxMEdgeGatewayDeleted ===============================
    if metric.tags["name"] == "vmwNsxMEdgeGatewayDeleted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge Gateway is deleted.Action required None"
        
        return metric
    #============= vmwNsxMEdgeGatewayReDeployed ===============================
    if metric.tags["name"] == "vmwNsxMEdgeGatewayReDeployed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge Gateway is redeployed.Action required None"
        
        return metric
    #============= vmwNsxMEdgeVmPowerOff ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmPowerOff":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Edge VM is powered off.Action required None"
        
        return metric
    #============= vmwNsxMEdgeApplianceSizeChanged ===============================
    if metric.tags["name"] == "vmwNsxMEdgeApplianceSizeChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge appliance size haschanged.Action required None"
        
        return metric
    #============= vmwNsxMEdgeUpgrade51x ===============================
    if metric.tags["name"] == "vmwNsxMEdgeUpgrade51x":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge Gateway is upgradedto 5.1.x.Action required None"
        
        return metric
    #============= vmwNsxMEdgeLicenseChanged ===============================
    if metric.tags["name"] == "vmwNsxMEdgeLicenseChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge licensing changed onvCenter Server.Action required None"
        
        return metric
    #============= vmwNsxMEdgeApplianceMoved ===============================
    if metric.tags["name"] == "vmwNsxMEdgeApplianceMoved":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge appliance is moved in the vCenterinventory."
        
        return metric
    #============= vmwNsxMEdgeApplianceNotFound ===============================
    if metric.tags["name"] == "vmwNsxMEdgeApplianceNotFound":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge appliance not found inthe vCenter inventory.Action required If VM is accidentally deleted redeploy edge."
        
        return metric
    #============= vmwNsxMEdgeVMHealthCheckMiss ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVMHealthCheckMiss":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM is not responding tohealth check.Action required Communicaiton issues between manager and edge. Loganalysis required to root cause issue."
        
        return metric
    #============= vmwNsxMEdgeHealthCheckMiss ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHealthCheckMiss":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when none of the Edge VMs are foundin serving state. There is a possibility of network disruption.Action required Commnunicaiton issues between manager and edge. Loganalysis required to root cause issue."
        
        return metric
    #============= vmwNsxMEdgeCommAgentNotConnected ===============================
    if metric.tags["name"] == "vmwNsxMEdgeCommAgentNotConnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge Communication Agent is notconnected to vCenter Server.Action required Check VSM and VC connectivity. Try registering VSM to VC"
        
        return metric
    #============= vmwNsxMApplianceWithDifferentId ===============================
    if metric.tags["name"] == "vmwNsxMApplianceWithDifferentId":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM is discovered witha different vmId.Action required None"
        
        return metric
    #============= vmwNsxMFirewallRuleModified ===============================
    if metric.tags["name"] == "vmwNsxMFirewallRuleModified":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge firewall rule is modified.Action required Revisit firewall rule and perform required updates"
        
        return metric
    #============= vmwNsxMEdgeAntiAffinityRuleViolated ===============================
    if metric.tags["name"] == "vmwNsxMEdgeAntiAffinityRuleViolated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when powering on NSX Edge applianceviolates a virtual machine antiaffinity rule.Action required Anti affinity rules removed from cluster. Both HA VM mayrun on same host. Go to VC and please revisit anti affinity ruleson Cluster"
        
        return metric
    #============= vmwNsxMEdgeHaEnabled ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaEnabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Edge HighAvailability isenabled.Action required None"
        
        return metric
    #============= vmwNsxMEdgeHaDisabled ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Edge HighAvailabilityis disabled.Action required None"
        
        return metric
    #============= vmwNsxMEdgeGatewayRecovered ===============================
    if metric.tags["name"] == "vmwNsxMEdgeGatewayRecovered":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Edge Gateway has recoveredand now responding to health check.Action required None"
        
        return metric
    #============= vmwNsxMEdgeVmRecovered ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmRecovered":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Edge VM has recoveredand now responding to health check.Actione required None"
        
        return metric
    #============= vmwNsxMEdgeGatewayUpgraded ===============================
    if metric.tags["name"] == "vmwNsxMEdgeGatewayUpgraded":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge Gateway is upgraded.Action required None"
        
        return metric
    #============= vmwNsxMEdgeVmHlthChkDisabled ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmHlthChkDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM health check isdisabled on consecutive critical vix errors. Please redeploy or forcesync vm to resume health check.Action required This points to environmental issues that lead torepeated failure over vix. Log analysis needs to be done to identifyroot cause. Post resoving issues force sync edge vm to resume healthcheck. Force sync and redeploy are disruptive operation."
        
        return metric
    #============= vmwNsxMEdgePrePublishFailed ===============================
    if metric.tags["name"] == "vmwNsxMEdgePrePublishFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Pre Publish has failed on EdgeVM.Action required Firewall rules might be out of sync. System auto recoversbut if problem persists then trigger force sync."
        
        return metric
    #============= vmwNsxMEdgeForcedSync ===============================
    if metric.tags["name"] == "vmwNsxMEdgeForcedSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM was force synced.Action required None"
        
        return metric
    #============= vmwNsxMEdgeVmBooted ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmBooted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM was booted.Action required None"
        
        return metric
    #============= vmwNsxMEdgeVmInBadState ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmInBadState":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM is in Bad State. Needsa force sync.Action required Force sync required."
        
        return metric
    #============= vmwNsxMEdgeVmCpuUsageIncreased ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmCpuUsageIncreased":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM CPU usage hasincreased.Action required Spikes are normal but collect tech support logs forfurther analysis if high CPU sustained for longer duration."
        
        return metric
    #============= vmwNsxMEdgeVmMemUsageIncreased ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmMemUsageIncreased":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM Memory usage hasincreased.Action required System recovers but collect tech support logs for furtheranalysis."
        
        return metric
    #============= vmwNsxMEdgeVmProcessFailure ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmProcessFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM process monitor detectsa process failure.Action required System recovers but collect tech support logs for furtheranalysis."
        
        return metric
    #============= vmwNsxMEdgeVmSysTimeBad ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmSysTimeBad":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM system time is bad.Action required System recovers. Check NTP setting on hosts."
        
        return metric
    #============= vmwNsxMEdgeVmSysTimeSync ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmSysTimeSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM system time sync up happens.Action required None"
        
        return metric
    #============= vmwNsxMEdgeAesniCryptoEngineUp ===============================
    if metric.tags["name"] == "vmwNsxMEdgeAesniCryptoEngineUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when AESNI crypto engine is up.Action required None"
        
        return metric
    #============= vmwNsxMEdgeAesniCryptoEngineDown ===============================
    if metric.tags["name"] == "vmwNsxMEdgeAesniCryptoEngineDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when AESNI crypto engine is down.Action required None"
        
        return metric
    #============= vmwNsxMEdgeVmOom ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmOom":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge VM is out of memory. TheEdge is rebooting in 3 seconds.Action required Collect tech support for further analysis."
        
        return metric
    #============= vmwNsxMEdgeFileSysRo ===============================
    if metric.tags["name"] == "vmwNsxMEdgeFileSysRo":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge file system is read only.Action required Check datastore issues once resolved force sync isrequired."
        
        return metric
    #============= vmwNsxMEdgeHaCommDisconnected ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaCommDisconnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge HighAvailabilitycommunication channel is disconnected from peer node.Action required User will need to check network infrastructure(virtual and physical) to look for any failures specially onthe interfaces and the path configured for HA."
        
        return metric
    #============= vmwNsxMEdgeHaSwitchOverSelf ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaSwitchOverSelf":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when High Availability is disabled for NSX Edge.The primary NSX Edge VM has its state transitioned from ACTIVE to SELF.High Availability (HA) ensures that NSX Edge services are always availableby deploying an additional Edge VM for failover. The primary NSX Edge VM isthe ACTIVE node and the secondary VM is the STANDBY node. Whenever theACTIVE VM is unreachable on account of VM powered off or networkconnectivity issues the STANDBY VM takes over the ACTIVE vms role.In the event NSX Edge High Availability is disabled the STANDBY VM isdeleted and the ACTIVE VM continues to function with its ACTIVE statetransitioned to SELF.Action required None"
        
        return metric
    #============= vmwNsxMEdgeHaSwitchOverActive ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaSwitchOverActive":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when High Availability switch over has happenedfor NSX Edge. The secondary NSX Edge VM has its state transitioned fromSTANDBY to ACTIVE. High Availability (HA) ensures that NSX Edge servicesare always available by deploying an additional Edge VM for failover.The primary NSX Edge VM is the ACTIVE node and the secondary VM is theSTANDBY node. Whenever the ACTIVE VM is unreachable on account of VMpowered off or network connectivity issues the STANDBY VM takes over theACTIVE vms role.Action required None"
        
        return metric
    #============= vmwNsxMEdgeHaSwitchOverStandby ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaSwitchOverStandby":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when High Availability switch over has happenedfor NSX Edge. The primary NSX Edge VM has its state transitioned fromACTIVE to STANDBY. High Availability (HA) ensures that NSX Edge servicesare always available by deploying an additional Edge VM for failover.The primary NSX Edge VM is the ACTIVE node and the secondary VM is theSTANDBY node. Whenever the ACTIVE VM is unreachable on account of VMpowered off or network connectivity issues the STANDBY VM takes over theACTIVE vms role. When connectivity is reestablished between the NSX EdgeVMs one of the VMs state is transitioned from ACTIVE to STANDBY.Action required None"
        
        return metric
    #============= vmwNsxMEdgeMonitorProcessFailure ===============================
    if metric.tags["name"] == "vmwNsxMEdgeMonitorProcessFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge process monitor detecteda process failure.Action required Collect tech support logs for further analysis."
        
        return metric
    #============= vmwNsxMLbVirtualServerPoolUp ===============================
    if metric.tags["name"] == "vmwNsxMLbVirtualServerPoolUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when LoadBalancer virtualServerpoolis up.Action required None"
        
        return metric
    #============= vmwNsxMLbVirtualServerPoolDown ===============================
    if metric.tags["name"] == "vmwNsxMLbVirtualServerPoolDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when LoadBalancer virtualServerpoolis down."
        
        return metric
    #============= vmwNsxMLbVirtualServerPoolWrong ===============================
    if metric.tags["name"] == "vmwNsxMLbVirtualServerPoolWrong":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when LoadBalancer virtualServerpool state iswrong."
        
        return metric
    #============= vmwNsxMLbPoolWarning ===============================
    if metric.tags["name"] == "vmwNsxMLbPoolWarning":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when LoadBalancer pool changed to a warningstate."
        
        return metric
    #============= vmwNsxMIpsecChannelUp ===============================
    if metric.tags["name"] == "vmwNsxMIpsecChannelUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when IPsec Channel is up.Action required None"
        
        return metric
    #============= vmwNsxMIpsecChannelDown ===============================
    if metric.tags["name"] == "vmwNsxMIpsecChannelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when IPsec Channel is down.Action required Collect tech support logs for further analysis."
        
        return metric
    #============= vmwNsxMIpsecTunnelUp ===============================
    if metric.tags["name"] == "vmwNsxMIpsecTunnelUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when IPsec Tunnel is up.Action required None"
        
        return metric
    #============= vmwNsxMIpsecTunnelDown ===============================
    if metric.tags["name"] == "vmwNsxMIpsecTunnelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when IPsec Tunnel is down.Action required Collect tech support logs for further analysis."
        
        return metric
    #============= vmwNsxMIpsecChannelUnknown ===============================
    if metric.tags["name"] == "vmwNsxMIpsecChannelUnknown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when IPsec Channel status isunknown.Action required Collect tech support logs for further analysis."
        
        return metric
    #============= vmwNsxMIpsecTunnelUnknown ===============================
    if metric.tags["name"] == "vmwNsxMIpsecTunnelUnknown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when IPsec Tunnel status is unknown.Action required Collect tech support logs for further analysis."
        
        return metric
    #============= vmwNsxMGlobalLbMemberUp ===============================
    if metric.tags["name"] == "vmwNsxMGlobalLbMemberUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Global Loadbalancer memberstatus is up.Action required None"
        
        return metric
    #============= vmwNsxMGlobalLbMemberWarning ===============================
    if metric.tags["name"] == "vmwNsxMGlobalLbMemberWarning":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Global Loadbalancer memberstatus is warning."
        
        return metric
    #============= vmwNsxMGlobalLbMemberDown ===============================
    if metric.tags["name"] == "vmwNsxMGlobalLbMemberDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Global Loadbalancer memberstatus is down."
        
        return metric
    #============= vmwNsxMGlobalLbMemberUnknown ===============================
    if metric.tags["name"] == "vmwNsxMGlobalLbMemberUnknown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Global Loadbalancer memberstatus is unknown."
        
        return metric
    #============= vmwNsxMGlobalLbPeerUp ===============================
    if metric.tags["name"] == "vmwNsxMGlobalLbPeerUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Global Loadbalancer peer statusis up.Action required None"
        
        return metric
    #============= vmwNsxMGlobalLbPeerDown ===============================
    if metric.tags["name"] == "vmwNsxMGlobalLbPeerDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Global Loadbalancer peer statusis down."
        
        return metric
    #============= vmwNsxMDhcpServiceDisabled ===============================
    if metric.tags["name"] == "vmwNsxMDhcpServiceDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when DHCP Relay Service isdisabled."
        
        return metric
    #============= vmwNsxMEdgeResourceReservationFailure ===============================
    if metric.tags["name"] == "vmwNsxMEdgeResourceReservationFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Insufficient CPU andor Memory Resources available on Host or ResourcePool during resource reservation at the time of NSX Edge deployment.Resources are explicitly reserved to ensure sufficient resources areavailable for NSX Edge to service High Availability. User can view theavailable resources vs reserved resources by navigating to the pageHome  Hosts and Clusters  Clustername  Monitor  Resource Reservation.Action required After checking available resources respecify theresources as part of appliance configuration so that resource reservationsucceeds."
        
        return metric
    #============= vmwNsxMEdgeSplitBrainDetected ===============================
    if metric.tags["name"] == "vmwNsxMEdgeSplitBrainDetected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Split Brain detected for NSX Edge with HighAvailability.NSX Edge VMs configured for High Availability are unable todetermine if the other VM is alive due to network failure. Insuch scenario both the VMs think the other is not alive andtake on the ACTIVE state. This may cause network disruption.Action required User will need to check network infrastructure(virtual and physical) to look for any failures specially onthe interfaces and the path configured for HA."
        
        return metric
    #============= vmwNsxMEdgeSplitBrainRecovered ===============================
    if metric.tags["name"] == "vmwNsxMEdgeSplitBrainRecovered":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Resolved Split Brain for NSX Edge with HighAvailability.The network path used by the NSX Edge VMs High Availability has beenreestablished. NSX Edge VMs are able to communicate with each otherand one of the VM has taken the STANDBY role resolving the ACTIVEACTIVEsplit brain scenario.Action required None"
        
        return metric
    #============= vmwNsxMEdgeSplitBrainRecoveryAttempt ===============================
    if metric.tags["name"] == "vmwNsxMEdgeSplitBrainRecoveryAttempt":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Attempted Split Brain resolution for NSX Edge.Split Brain recovery is being attempted on NSX Edge by NSX Manager.Action required None"
        
        return metric
    #============= vmwNsxMEdgeResourceReservationSuccess ===============================
    if metric.tags["name"] == "vmwNsxMEdgeResourceReservationSuccess":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "User specified or system managed CPU andor Memory Resource reservation forEdge VM is successful on Cluster or ResourcePool during deploymentredeployment of NSX Edge or Edge VM applianceconfiguration.Resources are explicitly reserved to ensure sufficient resources areavailable for NSX Edge to service High Availability. User can view theavailable resources vs reserved resources by navigating to the pageHome  Hosts and Clusters  Clustername  Monitor  Resource Reservation.Action required None"
        
        return metric
    #============= vmwNsxMEdgeSddcChannelUp ===============================
    if metric.tags["name"] == "vmwNsxMEdgeSddcChannelUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VMCI communication channel to vmcd is up on specified NSX Edge.Action required NoneFrequency Once when the VMCI communication channel come up.URL Nil"
        
        return metric
    #============= vmwNsxMEdgeSddcChannelDown ===============================
    if metric.tags["name"] == "vmwNsxMEdgeSddcChannelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VMCI communication channel to vmcd is down on specified NSX Edge.Action required Check status of vmcd daemon process.Go to the ESX host and check vmcd status etcinit.dvmcd statusIf not running start vmcd etcinit.dvmcd start.Frequency Once when the VMCI communication channel goes down.URL Nil"
        
        return metric
    #============= vmwNsxMEdgeDuplicateIpDetected ===============================
    if metric.tags["name"] == "vmwNsxMEdgeDuplicateIpDetected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The NSX Edge IP has been assigned to another device on the network. MAC address of the conflicting device is provided.Action required Change the IP address of the other device on network.Frequency Once when the Edge detects the duplication of its IP by another macAddress in the same network.URL Nil"
        
        return metric
    #============= vmwNsxMEdgeDuplicateIpResolved ===============================
    if metric.tags["name"] == "vmwNsxMEdgeDuplicateIpResolved":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Edge Duplicate IP address issue is resolved.Action required NoneFrequency Once when the Edge detects the duplication is resolvedURL Nil"
        
        return metric
    #============= vmwNsxMEdgeBgpNeighborUp ===============================
    if metric.tags["name"] == "vmwNsxMEdgeBgpNeighborUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when BGP neighbor is up.BGP neighbor IP address in the eventSourceId tells us for which neighbor this event is getting raised.Action required None"
        
        return metric
    #============= vmwNsxMEdgeBgpNeighborDown ===============================
    if metric.tags["name"] == "vmwNsxMEdgeBgpNeighborDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when BGP neighbor is down. Once per neighbor.BGP neighbor IP address in the eventSourceId tells us for which neighbor this event is getting raised.Action required None"
        
        return metric
    #============= vmwNsxMEdgeBgpNeighborASMismatch ===============================
    if metric.tags["name"] == "vmwNsxMEdgeBgpNeighborASMismatch":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when there is a mismatch in AS number configured. Raised repeatedly when BGP neighbor is getting established.BGP neighbor IP address in the eventSourceId tells us for which neighbor this event is getting raised.Action required Correct the configured AS number"
        
        return metric
    #============= vmwNsxMEdgeOSPFNeighborUp ===============================
    if metric.tags["name"] == "vmwNsxMEdgeOSPFNeighborUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when OSPF neighbor is up.OSPF router Id in the eventSourceId tells us for which neighbor this event is getting raised.Action required None"
        
        return metric
    #============= vmwNsxMEdgeOSPFNeighborDown ===============================
    if metric.tags["name"] == "vmwNsxMEdgeOSPFNeighborDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when OSPF neighbor is down.OSPF router Id in the eventSourceId tells us for which neighbor this event is getting raised.Action required None"
        
        return metric
    #============= vmwNsxMEdgeOSPFNeighborMTUMismatch ===============================
    if metric.tags["name"] == "vmwNsxMEdgeOSPFNeighborMTUMismatch":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when there is a MTU mismatch in neighbor ship request.OSPF router Id in the eventSourceId tells us for which neighbor this event is getting raised.Action required Correct the MTU configured."
        
        return metric
    #============= vmwNsxMEdgeOSPFNeighborAreaIdMisMatch ===============================
    if metric.tags["name"] == "vmwNsxMEdgeOSPFNeighborAreaIdMisMatch":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when there is a areaId mismatch in neighbor ship request.OSPF router Id in the eventSourceId tells us for which neighbor this event is getting raised.Action required Correct the areaId configured."
        
        return metric
    #============= vmwNsxMEdgeOSPFNeighborHelloTimerMisMatch ===============================
    if metric.tags["name"] == "vmwNsxMEdgeOSPFNeighborHelloTimerMisMatch":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when there is hello timer mismatch in neighbor ship request.OSPF router Id in the eventSourceId tells us for which neighbor this event is getting raised.Action required Correct the hello timer configured."
        
        return metric
    #============= vmwNsxMEdgeOSPFNeighborDeadTimerMisMatch ===============================
    if metric.tags["name"] == "vmwNsxMEdgeOSPFNeighborDeadTimerMisMatch":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when there is dead timer mismatch in neighbor ship request.OSPF router Id in the eventSourceId tells us for which neighbor this event is getting raised.Action required Correct the dead timer configured."
        
        return metric
    #============= vmwNsxMEdgeL2vpnTunnelUp ===============================
    if metric.tags["name"] == "vmwNsxMEdgeL2vpnTunnelUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when the l2vpn tunnel is up.Action required None"
        
        return metric
    #============= vmwNsxMEdgeL2vpnTunnelDown ===============================
    if metric.tags["name"] == "vmwNsxMEdgeL2vpnTunnelDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when the l2vpn tunnel is down.We can debug why the l2vpn tunnel is down using the following cli commandsshow service l2vpnshow configuration l2vpnshow service l2vpn bridgeAction required None."
        
        return metric
    #============= vmwNsxMEdgeHAForceStandbyRemoved ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHAForceStandbyRemoved":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when forced standby for edgeenforced by NSX Manager gets removed.Action required None."
        
        return metric
    #============= vmwNsxMEdgeHAForceStandbyRemovalFailed ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHAForceStandbyRemovalFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when the force standby removal for edge failed.Action required None."
        
        return metric
    #============= vmwNsxMEdgeVmBADStateRecovered ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmBADStateRecovered":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when edge VM is recovered from bad state.Action required None."
        
        return metric
    #============= vmwNsxMEdgeVmBADStateAutoHealRecoveryDisabled ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmBADStateAutoHealRecoveryDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when VM can not be recovered from bad state after system specified retry of auto recovery ForceSync operation.Action required Trigger force sync to recover edge VM from bad state. To trigger force sync from UI see(httpsdocs.vmware.comenVMwareNSXforvSphere6.2com.vmware.nsx.admin.docGUID21FF29374CDF491C933E8F44E21ED55E.html)or call the API (POST httpsnsxmanagerhostapi4.0edgesedgeidaction=forcesync)"
        
        return metric
    #============= vmwNsxMEdgeHaInUseVnicChanged ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaInUseVnicChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when internally allocated vnicfor HA internal communication is changed because vnic configurationshave changed.Action required None."
        
        return metric
    #============= vmwNsxMEdgeHaCommConnected ===============================
    if metric.tags["name"] == "vmwNsxMEdgeHaCommConnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Edge HighAvailabilitycommunication channel is established with peer node.Action required None."
        
        return metric
    #============= vmwNsxMEdgeVmRenameFailed ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmRenameFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when Edge VM rename operation failed.Given Edge name has invalid characters or exceedsmaximum number of characters permitted. There isno functionality effect on the Edge. User maychoose a shorter name and rename the Edge.Action required None."
        
        return metric
    #============= vmwNsxMEdgeBgpNeighborshipError ===============================
    if metric.tags["name"] == "vmwNsxMEdgeBgpNeighborshipError":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when something goes wrong in neighborship establishment.Error message will have error code and sub error code. BGP neighbor IPaddress in the eventSourceId tells us for which neighbor this event isgetting raised.vmwNsxMEventMessage for example will contain following details(Error when establishing BGP neighborship with neighbor 10.20.30.40having AS number 1201 with error code 6 error sub code 5.)Action required The error code given in message are standard error codes.Act accordingly as per the error codes."
        
        return metric
    #============= vmwNsxMEdgeVmBadStateNotRecovered ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmBadStateNotRecovered":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when failed to recover NSX Edge VM from Bad State after force sync.Action required None."
        
        return metric
    #============= vmwNsxMEdgeVmDcnOutOfSync ===============================
    if metric.tags["name"] == "vmwNsxMEdgeVmDcnOutOfSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when GroupingObject sync is timed out on NSX Edge VM.Action required None."
        
        return metric
    #============= vmwNsxMEdgeConsumedResourcesMissingInInventory ===============================
    if metric.tags["name"] == "vmwNsxMEdgeConsumedResourcesMissingInInventory":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when missing or deleted resources from inventory are found usedin NSX Edges.Action required Please reconfigure these NSX Edges to use existingresources. Refer to NSX Manager logs for the complete list of missingresources."
        
        return metric
    #============= vmwNsxMEdgeIpsecDeprecatedComplianceSuiteInUse ===============================
    if metric.tags["name"] == "vmwNsxMEdgeIpsecDeprecatedComplianceSuiteInUse":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when a deprecated compliance suite is used in an IPSec site inNSX Edges.Action required Please reconfigure IPSec site to use supportedcompliance suite."
        
        return metric
    #============= vmwNsxMEdgeConnectedToMultipleTZHavingSameClusters ===============================
    if metric.tags["name"] == "vmwNsxMEdgeConnectedToMultipleTZHavingSameClusters":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when a NSX Distributed Logical Router is connected to multipletransport zones having same clusters.Action required None."
        
        return metric
    #============= vmwNsxMEdgeConnectedToMultipleTZHavingDifferentClusters ===============================
    if metric.tags["name"] == "vmwNsxMEdgeConnectedToMultipleTZHavingDifferentClusters":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Raised when a NSX Distributed Logical Router is connected to multipletransport zones having different clusters. This may cause networkdisruption on clusters which are not common to all transport zones.Action required Please fix the configuration by either reconfiguringtransport zones to have same clusters or by connecting NSX DistributedLogical Router to a single transport zone."
        
        return metric
    #============= vmwNsxMEndpointThinAgentEnabled ===============================
    if metric.tags["name"] == "vmwNsxMEndpointThinAgentEnabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Thin agent is enabled."
        
        return metric
    #============= vmwNsxMGuestIntrspctnEnabled ===============================
    if metric.tags["name"] == "vmwNsxMGuestIntrspctnEnabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Guest Introspection solutionis enabled."
        
        return metric
    #============= vmwNsxMGuestIntrspctnIncompatibleEsx ===============================
    if metric.tags["name"] == "vmwNsxMGuestIntrspctnIncompatibleEsx":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Guest Introspection solutionwas contacted by an incompatible version of the ESX module."
        
        return metric
    #============= vmwNsxMGuestIntrspctnEsxConnFailed ===============================
    if metric.tags["name"] == "vmwNsxMGuestIntrspctnEsxConnFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when connection between the ESXmodule and the Guest Introspection solution failed."
        
        return metric
    #============= vmwNsxMGuestIntrspctnStatusRcvFailed ===============================
    if metric.tags["name"] == "vmwNsxMGuestIntrspctnStatusRcvFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when failed to receive statusfrom Guest Introspection solution."
        
        return metric
    #============= vmwNsxMEsxModuleEnabled ===============================
    if metric.tags["name"] == "vmwNsxMEsxModuleEnabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when ESX module is enabled."
        
        return metric
    #============= vmwNsxMEsxModuleUninstalled ===============================
    if metric.tags["name"] == "vmwNsxMEsxModuleUninstalled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when ESX module is uninstalled."
        
        return metric
    #============= vmwNsxMGuestIntrspctnHstMxMssngRep ===============================
    if metric.tags["name"] == "vmwNsxMGuestIntrspctnHstMxMssngRep":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Guest Introspection host MUXis missing report."
        
        return metric
    #============= vmwNsxMEndpointUndefined ===============================
    if metric.tags["name"] == "vmwNsxMEndpointUndefined":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Endpoint is undefined."
        
        return metric
    #============= vmwNsxMEamGenericAlarm ===============================
    if metric.tags["name"] == "vmwNsxMEamGenericAlarm":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "EAM reports problems to NSX during vibservice VMinstallupgrade as these traps.Action required Use resolve API to resolve the Alarm.Frequency of traps N times per cluster per user action where N is numberof hosts in a cluster."
        
        return metric
    #============= vmwNsxMFabricDplymntStatusChanged ===============================
    if metric.tags["name"] == "vmwNsxMFabricDplymntStatusChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The status of a service on a cluster has changed. It canchange to RED(Failure) GREEN(Success) YELLOW(inprogress).Action required RED state would be accompanied with anEAM AlarmEventTrap that indicates root cause. Use resolver API to fixit.Frequency of traps Once per state change. State could change 23 timesper user operation DeployUndeployUpdate"
        
        return metric
    #============= vmwNsxMFabricDplymntUnitCreated ===============================
    if metric.tags["name"] == "vmwNsxMFabricDplymntUnitCreated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager has created the required objects for deployinga service on a cluster. This would be followed by deployment of theservice on all hosts in the cluster.Action required NoneFrequency Once per cluster"
        
        return metric
    #============= vmwNsxMFabricDplymntUnitUpdated ===============================
    if metric.tags["name"] == "vmwNsxMFabricDplymntUnitUpdated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager has made changes in the objects required fordeploying a service on a cluster. This would be followed by updation ofthe service on all hosts in the cluster.Action required NoneFrequency of traps Once per cluster per user operation Update"
        
        return metric
    #============= vmwNsxMFabricDplymntUnitDestroyed ===============================
    if metric.tags["name"] == "vmwNsxMFabricDplymntUnitDestroyed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A service has been removed from all hosts in a cluster. NSXManager has deleted the objects for the service on the cluster.Action required NoneFrequency of traps Once per cluster"
        
        return metric
    #============= vmwNsxMDataStoreNotCnfgrdOnHost ===============================
    if metric.tags["name"] == "vmwNsxMDataStoreNotCnfgrdOnHost":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Datastore could not be configured on host probably itsnot connected.Action required Ensure that datastore is connected to the host. Useresolve API to resolve the Alarm. Service will be deployed.Frequency of traps Once per cluster per user operation Deploy."
        
        return metric
    #============= vmwNsxMFabricDplymntInstallationFailed ===============================
    if metric.tags["name"] == "vmwNsxMFabricDplymntInstallationFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Installation of service failed please check if ovfvib urlsare accessible in correct format and all the properties in ovf environmenthave been configured in service attributes. Please check logs for details.Action required Ensure that ovfvib urls accessible from VC and are incorrect format. Use resolve API to resolve the Alarm. Service willbe deployed.Frequency of traps Once per cluster per user operation Deploy."
        
        return metric
    #============= vmwNsxMFabricAgentCreated ===============================
    if metric.tags["name"] == "vmwNsxMFabricAgentCreated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service has been successfully installed on a host.Action required NoneFrequency of traps N times per cluster where N is number of hosts in acluster."
        
        return metric
    #============= vmwNsxMFabricAgentDestroyed ===============================
    if metric.tags["name"] == "vmwNsxMFabricAgentDestroyed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service has been successfully removed from a host.Action required NoneFrequency of traps N times per cluster where N is number of hosts ina cluster."
        
        return metric
    #============= vmwNsxMFabricSrvceNeedsRedplymnt ===============================
    if metric.tags["name"] == "vmwNsxMFabricSrvceNeedsRedplymnt":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service will need to be redeployed as the location of theOVF  VIB bundles to be deployed has changed.Action required Use resolve API to resolve the Alarm. Service will beredeployed.Frequency of traps N times per NSX Manager IP change where N is numberof cluster and service combinations deployed."
        
        return metric
    #============= vmwNsxMUpgradeOfDplymntFailed ===============================
    if metric.tags["name"] == "vmwNsxMUpgradeOfDplymntFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Upgrade of deployment unit failed please check if ovfviburls are accessible in correct format and all the properties in ovfenvironment have been configured in service attributes. Please checklogs for details.Action required Ensure that ovfvib urls accessible from VC and are incorrect format. Use resolve API to resolve the Alarm. Service will beredeployed.Frequency of traps Once per cluster per user operation Upgrade"
        
        return metric
    #============= vmwNsxMFabricDependenciesNotInstalled ===============================
    if metric.tags["name"] == "vmwNsxMFabricDependenciesNotInstalled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The service being installed is dependent on another servicethat has not yet been installed.Action required Deploy the required service on the cluster.Frequency of traps Once per cluster per user operation Deploy"
        
        return metric
    #============= vmwNsxMFabricErrorNotifSecBfrUpgrade ===============================
    if metric.tags["name"] == "vmwNsxMFabricErrorNotifSecBfrUpgrade":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Error while notifying security solution before upgrade. Thesolution may not be reachableresponding.Action required Ensure that solution urls are accessible from NSX. Useresolve API to resolve the Alarm. Service will be redeployed.Frequency of traps Once per cluster per user operation Upgrade"
        
        return metric
    #============= vmwNsxMFabricErrCallbackNtRcvdUpgrade ===============================
    if metric.tags["name"] == "vmwNsxMFabricErrCallbackNtRcvdUpgrade":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Did not receive callback from security solution for upgradenotification even after timeout.Action required Ensure that solution urls are accessible from NSX andNSX is reachable from the solution. Use resolve API to resolve the Alarm.Service will be redeployed.Frequency  Once per cluster per user operation Upgrade"
        
        return metric
    #============= vmwNsxMFabricErrCallbackNtRcvdUninstall ===============================
    if metric.tags["name"] == "vmwNsxMFabricErrCallbackNtRcvdUninstall":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Uninstallation of service failed.Action required Ensure that solution urls are accessible from NSX andNSX is reachable from the solution. Use resolve API to resolve the Alarm.Service will be removed.Frequency of traps Once per cluster per user operation Uninstall"
        
        return metric
    #============= vmwNsxMFabricUninstallServiceFailed ===============================
    if metric.tags["name"] == "vmwNsxMFabricUninstallServiceFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Error while notifying security solution before uninstall.Resolve to notify once again or delete to uninstall without notification.Action required Ensure that solution urls are accessible from NSX andNSX is reachable from the solution. Use resolve API to resolve the Alarm.Service will be removed.Frequency of traps Once per cluster per user operation Uninstall"
        
        return metric
    #============= vmwNsxMFabricErrorNotifSecBfrUninstall ===============================
    if metric.tags["name"] == "vmwNsxMFabricErrorNotifSecBfrUninstall":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Error while notifying security solution before uninstall.Resolve to notify once again or delete to uninstall without notification.Action required Ensure that solution urls are accessible from NSX andNSX is reachable from the solution. Use resolve API to resolve the Alarm.Service will be removed.Frequency of traps Once per cluster per user operation Uninstall"
        
        return metric
    #============= vmwNsxMFabricServerRebootUninstall ===============================
    if metric.tags["name"] == "vmwNsxMFabricServerRebootUninstall":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Server rebooted while security solution notification foruninstall was going on.Action required Ensure that solution urls are accessible from NSX.Use resolve API to resolve the Alarm. Service will be uninstalled.Frequency of traps Once per cluster per user operation Uninstall"
        
        return metric
    #============= vmwNsxMFabricServerRebootUpgrade ===============================
    if metric.tags["name"] == "vmwNsxMFabricServerRebootUpgrade":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Server rebooted while security solution notification forupgrade was going on.Action required Ensure that solution urls are accessible from NSX.Use resolve API to resolve the Alarm. Service will be redeployed.Frequency of traps Once per cluster per user operation Upgrade"
        
        return metric
    #============= vmwNsxMFabricConnEamFailed ===============================
    if metric.tags["name"] == "vmwNsxMFabricConnEamFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager relies on the ESX Agent Manager service in VC fordeployingmonitoring NSX vibs on ESX. The connection to this EAM servicehas gone down. This could be due to EAM service or VC restartstop or anissue in the EAM service.Action required In the NSX UI traverse to Manage then NSX ManagementService. Verify that the status of VC connection on this page is Green.Use the VC IP to verify that EAM is UP by visiting httpsvc ipeammob.Frequency of traps Once per switch from success to failed EAM connection"
        
        return metric
    #============= vmwNsxMFabricConnEamRestored ===============================
    if metric.tags["name"] == "vmwNsxMFabricConnEamRestored":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager relies on the EAM service in VC fordeployingmonitoring NSX vibs on ESX. The connection of NSX to this EAMservice was reestablished successfully.Action required NoneFrequency of traps Once per switch from failed to success EAM connection"
        
        return metric
    #============= vmwNsxMFabricPreUninstallCleanUpFailed ===============================
    if metric.tags["name"] == "vmwNsxMFabricPreUninstallCleanUpFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Pre Uninstall cleanup failed.Action required Use resolve API to resolve the Alarm. Service will be removed.Frequency of traps Once per cluster per user operation Uninstall"
        
        return metric
    #============= vmwNsxMFabricBackingEamNotFound ===============================
    if metric.tags["name"] == "vmwNsxMFabricBackingEamNotFound":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The backing EAM agency for this deployment could not be found.It is possible that the VC services may still be initializing. Please tryto resolve the alarm to check existence of the agency. In case you havedeleted the agency manually please delete the deployment entry from NSX.Action required Use resolve API to check existence of the agency ifbacking agency exists in EAM else delete the deployment entry from NSX.Frequency of traps Once per cluster."
        
        return metric
    #============= vmwNsxMFabricVibManualInstallationRequired ===============================
    if metric.tags["name"] == "vmwNsxMFabricVibManualInstallationRequired":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is generated when an attempt is made to upgrade or uninstallNSX vibs on stateless host using EAM. All stateless host should beprepared using the auto deploy feature (Refer  httpskb.vmware.comsarticle2005131).Fix configuration using auto deploy feature and use the resolve API to resolve the alarm.Action required Use the resolve API to resolve the alarm.Frequency of traps Once per host."
        
        return metric
    #============= vmwNsxMFabricUninstallDeploymentUnit ===============================
    if metric.tags["name"] == "vmwNsxMFabricUninstallDeploymentUnit":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Deployment unit fabric state is UNINSTALLED and health Status is SUCCEEDED. Resolve this alarm to complete uninstallation.Frequency of traps Once per cluster."
        
        return metric
    #============= vmwNsxMDepPluginIpPoolExhausted ===============================
    if metric.tags["name"] == "vmwNsxMDepPluginIpPoolExhausted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "When deploying Guest Introspection or other VM based servicewith static IP NSX Manager needs to have a IP pool for IP assignment tothe VM. This pool has been exhausted and new service VMs cannot beprovisioned.Action required Traverse to the Networking  Security page on VMWarevSphere Web Client then go to Installation followed by ServiceDeployments. Note the IP pool name for the failed service. Nowtraverse to NSX Managers then go to Manage tab followed by GroupingObjects subtab. Click on IP Pools and add more Ips to the static IPpool. Use resolve API to resolve the Alarm. Service will be deployed.Frequency of traps N times per cluster where N is number of hosts inthe cluster."
        
        return metric
    #============= vmwNsxMDepPluginGenericAlarm ===============================
    if metric.tags["name"] == "vmwNsxMDepPluginGenericAlarm":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Deployment plugin generic alarm.Action required Use resolve API to resolve the Alarm. Service will bedeployed.Frequency of traps N times per cluster where N is number of hosts inthe cluster."
        
        return metric
    #============= vmwNsxMDepPluginGenericException ===============================
    if metric.tags["name"] == "vmwNsxMDepPluginGenericException":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Deployment plugin generic exception alarm.Action required Use resolve API to resolve the Alarm. Service will bedeployed.Frequency of traps N times per cluster where N is number of hosts inthe cluster."
        
        return metric
    #============= vmwNsxMDepPluginVmReboot ===============================
    if metric.tags["name"] == "vmwNsxMDepPluginVmReboot":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM needs to be rebooted for some changes to bemadetake effect.Action required Use resolve API to resolve the Alarm.Frequency of traps N times per cluster where N is number of hosts inthe cluster."
        
        return metric
    #============= vmwNsxMMessagingConfigFailed ===============================
    if metric.tags["name"] == "vmwNsxMMessagingConfigFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when host messaging configurationfailed."
        
        return metric
    #============= vmwNsxMMessagingReconfigFailed ===============================
    if metric.tags["name"] == "vmwNsxMMessagingReconfigFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when host messaging connectionreconfiguration failed."
        
        return metric
    #============= vmwNsxMMessagingConfigFailedNotifSkip ===============================
    if metric.tags["name"] == "vmwNsxMMessagingConfigFailedNotifSkip":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when host messaging configurationfailed and notifications were skipped."
        
        return metric
    #============= vmwNsxMMessagingInfraUp ===============================
    if metric.tags["name"] == "vmwNsxMMessagingInfraUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Manager runs a heartbeat with all hosts it manages. Missingheartbeat responses from a host indicate a communication issue betweenmanager and the host. Such instances are indicated by event code 391002.When the communication is restored after such an instance it is indicatedby this eventtrap.Action required Refer to KB article httpkb.vmware.comkb2133897Frequency of traps Will be seen within 3 minutes of communication beingrestored between manager and a host.URL httpkb.vmware.comkb2133897"
        
        return metric
    #============= vmwNsxMMessagingInfraDown ===============================
    if metric.tags["name"] == "vmwNsxMMessagingInfraDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Manager runs a heartbeat with all hosts it manages. Missingheartbeat responses from a host indicate a communication issue betweenmanager and the host. In the case of such a communication issue this trapwill be sent.Action required Refer to KB article httpkb.vmware.comkb2133897Frequency of traps Will be seen within 6 minutes of a communicationfailure between manager and a host.URL httpkb.vmware.comkb2133897"
        
        return metric
    #============= vmwNsxMMessagingDisabled ===============================
    if metric.tags["name"] == "vmwNsxMMessagingDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A messaging client such as a Host an Edge appliance ora USVM appliance is expected to change its password within 2 hours ofbeing prepped or deployed. If the password isnt changed in thisduration the messaging account for the client is disabled.Action required This event will indicate communication issue betweenthe manager and the client. Verify if the client is running.If running in case of a Host resync messaging. In case of an Edge ora USVM redeploy.Frequency of traps Will be seen 2 hours after prep host resyncor deployment of appliance.URL httpkb.vmware.comkb2133897"
        
        return metric
    #============= vmwNsxMServiceComposerPolicyOutOfSync ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerPolicyOutOfSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error while attempting toenforce rules on this Policy.Action required Administrator needs to check the rules on the given Policyfor any errors as reported in the message. After fixing the rules in thePolicy user would need to resolve the alarm to bring this Policy back insync. Policys alarm can either be resolved from NSX Manager Service ComposerUI or by using alarms API.Frequency of traps This trap is generated only once if an error isencountered while enforcing the Policy."
        
        return metric
    #============= vmwNsxMServiceComposerPolicyDeleted ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerPolicyDeleted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A Policy got deleted as a result of the internalSecurityGroup over which the Policy was created got deleted.Frequency of traps This event is generated once every timeany internal SecurityGroup that is being consumed by a policygets deleted."
        
        return metric
    #============= vmwNsxMServiceComposerFirewallPolicyOutOfSync ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerFirewallPolicyOutOfSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error while attempting toenforce Firewall rules on this Policy. Firewall related changes on thisPolicy will not take effect until this alarm is resolved.Action required Administrator needs to check the rules on the given Policyfor any errors as reported in the message. After fixing the rules in thePolicy user would need to resolve the alarm to bring this Policy back insync. Policys alarm can either be resolved from NSX Manager Service ComposerUI or by using alarms API.Frequency of traps This trap is generated only once if an error isencountered while enforcing the Policy."
        
        return metric
    #============= vmwNsxMServiceComposerNetworkPolicyOutOfSync ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerNetworkPolicyOutOfSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error while attempting toenforce Network Introspection rules on this Policy. Network Introspectionrelated changes on this Policy will not take effect until this alarm isresolved.Action required Administrator needs to check the rules on the given Policyfor any errors as reported in the message. After fixing the rules in thePolicy user would need to resolve the alarm to bring this Policy back insync. Policys alarm can either be resolved from NSX Manager Service ComposerUI or by using alarms API.Frequency of traps This trap is generated only once if an error isencountered while enforcing the Policy."
        
        return metric
    #============= vmwNsxMServiceComposerGuestPolicyOutOfSync ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerGuestPolicyOutOfSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error while attempting toenforce Guest Introspection rules on this Policy. Guest Introspectionrelated changes on this Policy will not take effect until this alarmis resolved.Action required Administrator needs to check the rules on the given Policyfor any errors as reported in the message. After fixing the rules in thePolicy user would need to resolve the alarm to bring this Policy back insync. Policys alarm can either be resolved from NSX Manager Service ComposerUI or by using alarms API.Frequency of traps This trap is generated only once if an error isencountered while enforcing the Policy."
        
        return metric
    #============= vmwNsxMServiceComposerOutOfSync ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerOutOfSync":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error synchronizing Policies. Any changes onService Composer will not be pushed to FirewallNetwork IntrospectionServices until this alarm is resolved.Action required Administrator needs to check Policies andor Firewallsections for any errors as reported in the message. After fixing the errorsuser would need to resolve the alarm to bring Service Composer back in sync.Alarm can either be resolved from NSX Manager Service Composer UI or by usingalarms API.Frequency of traps This trap is generated only once whenever an error isencountered."
        
        return metric
    #============= vmwNsxMServiceComposerOutOfSyncRebootFailure ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerOutOfSyncRebootFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error while synchronizing Policies onreboot.Action required Administrator needs to check Policies andor Firewall configfor any errors as reported in the message. After fixing the errors userwould need to resolve the alarm to bring Service Composer back in sync. Alarmcan either be resolved from NSX Manager Service Composer UI or by usingalarms API.Frequency of traps This trap is generated only once on NSX Manager rebootif an error is encountered."
        
        return metric
    #============= vmwNsxMServiceComposerOutOfSyncDraftRollback ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerOutOfSyncDraftRollback":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer went out of sync due to rollback of drafts from Firewall.Any changes on Service Composer will not be pushed to FirewallNetworkIntrospection Services until this alarm is resolved.Action required Administrator needs to resolve the alarm to bring ServiceComposer back in sync. Alarm can either be resolved from NSX Manager ServiceComposer UI or by using alarms API.Frequency of traps This trap is generated only once whenever Firewallconfig is reverted to an older version of drafts."
        
        return metric
    #============= vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerOutOfSyncSectionDeletionFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error while deleting the sectioncorresponding to the Policy. This generally happens if third party(NetX)services Manager is not reachable.Action required Administrator needs to check connectivity with thirdparty(NetX) services Manager. Once the connectivity is restored user wouldneed to resolve the alarm. Alarm can either be resolved from Service ComposerUI or by using alarms API.Frequency of traps This trap is generated only once if a failure isencountered while deleting a Policys section on Policy deletion."
        
        return metric
    #============= vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerOutOfSyncPrecedenceChangeFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error reordering sections to reflectPolicys precedence change. This generally happens if there are Alarms on anyother Policy.Action required Administrator needs to check Policies andor Firewallsections for any errors as reported in the message. After fixing the errorsuser would need to resolve the alarm. Alarm can either be resolved fromNSX Manager Service Composer UI or by using alarms API.Frequency of traps This trap is generated only once if a failure isencountered while reordering section to reflect precedence change."
        
        return metric
    #============= vmwNsxMServiceComposerOutOfSyncDraftSettingFailure ===============================
    if metric.tags["name"] == "vmwNsxMServiceComposerOutOfSyncDraftSettingFailure":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Composer encountered an error while initializing auto save draftssetting.Action required Administrator needs to check Policies andor Firewallsections for any errors as reported in the message. After fixing the errorsuser would need to resolve the alarm. Alarm can either be resolved fromNSX Manager Service Composer UI or by using alarms API.Frequency of traps This trap is generated only once if a failure isencountered while initializing auto save drafts setting."
        
        return metric
    #============= vmwNsxMInconsistentSvmAlarm ===============================
    if metric.tags["name"] == "vmwNsxMInconsistentSvmAlarm":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service VMs are deployed per ESX host to provide functionality likeguest introspection and McAfeeTrend virus checking in VMs on the host.An issue is detected with the state of the deployed Service VM. Followinstructions in httpkb.vmware.comkb2125482 to analyze the logsfurther. Warning Resolving this alarm will delete the VM. Afterdeletion you will see a different alarm saying VM is deleted. If youresolve same it will reinstall the VM. If redeployment of the VM doesnot fix the original issue the original alarm will be added backimmediately.Action required Use resolve API to resolve the Alarm.Frequency of traps Once per host."
        
        return metric
    #============= vmwNsxMSvmRestartAlarm ===============================
    if metric.tags["name"] == "vmwNsxMSvmRestartAlarm":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service VMs are deployed per ESX host to provide functionality likeguest introspection and McAfeeTrend virus checking in VMs on the host.An issue is detected with the state of the deployed Service VM. Followinstructions in httpkb.vmware.comkb2125482 to analyze the logsfurther. Warning Resolving this alarm will restart the VM. If theroot cause here is not solved the same alarm will be added backimmediately.Action required Use resolve API to resolve the Alarm.Frequency of traps Once per host."
        
        return metric
    #============= vmwNsxMSvmAgentUnavailable ===============================
    if metric.tags["name"] == "vmwNsxMSvmAgentUnavailable":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "An issue is detected while marking agent as available. Kindlycheck the logs. Resolving this alarm will attempt to mark the agent asavailable.Action required Use resolve API to resolve the Alarm.Frequency of traps Once per host."
        
        return metric
    #============= vmwNsxMVmAddedToSg ===============================
    if metric.tags["name"] == "vmwNsxMVmAddedToSg":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A VM has got added to the SecurityGroup.Frequency of traps Once for every VM getting added to any SecurityGroup."
        
        return metric
    #============= vmwNsxMVmRemovedFromSg ===============================
    if metric.tags["name"] == "vmwNsxMVmRemovedFromSg":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A VM has got removed from the SecurityGroup.Frequency of traps Once for every VM getting removed from anySecurityGroup."
        
        return metric
    #============= vmwNsxMFullUniversalSyncFailed ===============================
    if metric.tags["name"] == "vmwNsxMFullUniversalSyncFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A failure is encountered when doing full sync of universalobjects on a secondary NSX manager. IP address of the secondary NSXmanager is present in events message variable.Action required Kindly check NSX manager logs on the secondary NSXmanager on which the full sync has failed.Frequency of traps This trap is generated once per NSX manager on whichfull sync failure is seen."
        
        return metric
    #============= vmwNsxMSecondaryDown ===============================
    if metric.tags["name"] == "vmwNsxMSecondaryDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Secondary NSX manager is unreachable.Action required Kindly check if NSX manager is running and is reachablefrom primary NSX manager. IP address of the secondary NSXmanager is present in events message variable.Frequency of traps This trap is generated once per NSX manager for whichconnection issue is seen."
        
        return metric
    #============= vmwNsxMUniversalSyncFailedForEntity ===============================
    if metric.tags["name"] == "vmwNsxMUniversalSyncFailedForEntity":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A failure is encountered when doing sync of universal objecton a secondary NSX manager. IP address of the secondary NSXmanager is present in events message variable.Action required Kindly check NSX manager logs on the secondary NSX manageron which the sync has failed.Frequency of traps This trap is generated once per universal object ona NSX manager on which sync failure is seen."
        
        return metric
    #============= vmwNsxMUniversalSyncStoppedOnSecondary ===============================
    if metric.tags["name"] == "vmwNsxMUniversalSyncStoppedOnSecondary":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Secondary NSX manager is no longer receiving periodic universal sync updates.IP address of the NSX manager is present in events message variable.Action required Kindly check NSX manager logs and universal configuration onthe primary NSX manager to check if the secondary NSX manager has got removed.Frequency of traps This trap is generated one every 4 hours if secondary NSXmanager has not received universal sync updates for more than 4 hours."
        
        return metric
    #============= vmwNsxMUniversalSyncResumedOnSecondary ===============================
    if metric.tags["name"] == "vmwNsxMUniversalSyncResumedOnSecondary":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Secondary NSX manager has resumed receiving periodic universal sync updates.Frequency of traps This trap is generated whenever communication betweenprimary and secondary managers resumes."
        
        return metric
    #============= vmwNsxMServerUp ===============================
    if metric.tags["name"] == "vmwNsxMServerUp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Denotes that NSX manager server is up and in running stateInforms clients of NSX Manager of the current state.Action required NoneFrequency of traps Once for every query"
        
        return metric
    #============= vmwNsxMExtensionRegistered ===============================
    if metric.tags["name"] == "vmwNsxMExtensionRegistered":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Registers NSX manager as a vCenter extenstion. This isapplicable when no other NSX Manager is registered with vCenter and thecurrent NSX manager is the one registering with vCenter.Action required NoneFrequency of traps Only once when the extension is registered for thevery first time."
        
        return metric
    #============= vmwNsxMExtensionUpdated ===============================
    if metric.tags["name"] == "vmwNsxMExtensionUpdated":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Updates the vCenter extension registration with the new NSXManager. This is applicable when there already exists another NSX managerthat is registered as a vCenter extension and the current one overwritesit.Action required NoneFrequency of traps Every time a NSX Manager registers as a vCenterextension when there already exists another NSX manager registered withvCenter"
        
        return metric
    #============= vmwNsxMDataSecScanStarted ===============================
    if metric.tags["name"] == "vmwNsxMDataSecScanStarted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Data Security scan startedon VirtualMachine."
        
        return metric
    #============= vmwNsxMDataSecScanEnded ===============================
    if metric.tags["name"] == "vmwNsxMDataSecScanEnded":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Data Security scan endedon VirtualMachine."
        
        return metric
    #============= vmwNsxMSamDataCollectionEnabled ===============================
    if metric.tags["name"] == "vmwNsxMSamDataCollectionEnabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Activity Monitoring will start collecting data.Action required NoneFrequency of traps Event is triggered when SAM data collection state istoggled."
        
        return metric
    #============= vmwNsxMSamDataCollectionDisabled ===============================
    if metric.tags["name"] == "vmwNsxMSamDataCollectionDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Activity Monitoring will stop collecting data.Action required SAM data collection can be enabled to start collectiingdata.Frequency of traps Event is triggered when SAM data collection state istoggled"
        
        return metric
    #============= vmwNsxMSamDataStoppedFlowing ===============================
    if metric.tags["name"] == "vmwNsxMSamDataStoppedFlowing":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Activity Monitoring data stopped flowing from USVMAction required Check the following USVM log to see if heartbeats are recieved and sent is the USVM running is the Mux  USVM connection healthy is the USVM  RMQ connection healthy does the VM have endpoint driver installedFrequency of traps Event is triggered when NSX Manager does not receivesSAM data from USVM"
        
        return metric
    #============= vmwNsxMSamDataResumedFlowing ===============================
    if metric.tags["name"] == "vmwNsxMSamDataResumedFlowing":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service Activity Monitoring data resumes flowing from USVMAction required NoneFrequency of traps Event is triggered when SAM data is received from USVM."
        
        return metric
    #============= vmwNsxMUsvmHeartbeatStopped ===============================
    if metric.tags["name"] == "vmwNsxMUsvmHeartbeatStopped":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "USVM stopped sending heartbeats to management plane.Action required Connection to NSX Manager was lost. Check why theManager didnt send a heartbeat.Frequency of traps Event is triggered when NSX Manager does not receivesheartbeats from USVM"
        
        return metric
    #============= vmwNsxMUsvmHeartbeatResumed ===============================
    if metric.tags["name"] == "vmwNsxMUsvmHeartbeatResumed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "USVM will start sending heartbeats to management plane.Action required NoneFrequency of traps Event is triggered when NSX Manager receivesheartbeats from USVM"
        
        return metric
    #============= vmwNsxMUsvmReceivedHello ===============================
    if metric.tags["name"] == "vmwNsxMUsvmReceivedHello":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "USVM sent a HELLO message to MuxAction NoneFrequency of traps Event is triggered when Epsec Mux receives HELLOmessage from USVM during initial connection establishement."
        
        return metric
    #============= vmwNsxMUpgradeSuccess ===============================
    if metric.tags["name"] == "vmwNsxMUpgradeSuccess":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Manager upgradedsuccessfully."
        
        return metric
    #============= vmwNsxMRestoreSuccess ===============================
    if metric.tags["name"] == "vmwNsxMRestoreSuccess":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when NSX Manager restoredsuccessfully."
        
        return metric
    #============= vmwNsxMDuplicateIp ===============================
    if metric.tags["name"] == "vmwNsxMDuplicateIp":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The NSX Manager IP has been assigned to another machineAction NoneFrequency This is triggered whenever NSX Manager detects that its IPaddress is being used by another machine in the same network"
        
        return metric
    #============= vmwNsxMCPUHigh ===============================
    if metric.tags["name"] == "vmwNsxMCPUHigh":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager CPU usage is currently high.CPU usage is based on load across all cores.Action If NSX Manager is facing performance issue please collect the technicalsupport logs for NSX Manager and the host and contact VMware technical support.Frequency This is triggered whenever NSX Manager CPU is above high threshold for consecutive 5 intervals.Default value of high threshold and interval are 80 and 1 minute respectively."
        
        return metric
    #============= vmwNsxMCPUNormal ===============================
    if metric.tags["name"] == "vmwNsxMCPUNormal":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager CPU usage is back to normal.CPU usage is based on load across all cores.Action NoneFrequency This is triggered whenever NSX Manager CPU is below high threshold after 1 interval from CPU being above high threshold.Default value of high threshold and interval are 80 and 1 minute respectively."
        
        return metric
    #============= vmwNsxMVirtualMachineMarkedAsSystemResource ===============================
    if metric.tags["name"] == "vmwNsxMVirtualMachineMarkedAsSystemResource":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Virtual machine is marked as system resourceAction NoneFrequency This is triggered whenever any virtual machine is marked as systemresource"
        
        return metric
    #============= vmwNsxMScaleAboveSupportedLimits ===============================
    if metric.tags["name"] == "vmwNsxMScaleAboveSupportedLimits":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The scale value(s) of the mentioned parameter(s) has crossed the supported scale limitsAction Reduce the scale of the parameter(s) mentionedFrequency This is triggered every hour if any new parameters cross the supported scale limits"
        
        return metric
    #============= vmwNsxMScaleAboveThreshold ===============================
    if metric.tags["name"] == "vmwNsxMScaleAboveThreshold":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The scale value(s) of the mentioned parameter(s) has crossed set threshold scale valueAction Reduce the scale of the parameter(s) mentionedFrequency This is triggered every hour if any new parameters cross the set threshold value"
        
        return metric
    #============= vmwNsxMScaleNormalized ===============================
    if metric.tags["name"] == "vmwNsxMScaleNormalized":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The scale value(s) of the mentioned parameter(s) is back to normal after being above the set threshold or the supported valueAction No action required.Frequency This is triggered every hour if any new parameters return to normal after being above the set threshold or the supported value"
        
        return metric
    #============= vmwNsxMScaleNotEqualToRecommendedValue ===============================
    if metric.tags["name"] == "vmwNsxMScaleNotEqualToRecommendedValue":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The scale value(s) of the mentioned parameter(s) is not matching the recommended valueAction IncreaseDecrease number of objects  for the parameter(s) mentioned to match with recommended value. Please refer NSX Administration guide.Frequency This is triggered every hour if any new parameters does not match the recommended value"
        
        return metric
    #============= vmwNsxMCertificateExpired ===============================
    if metric.tags["name"] == "vmwNsxMCertificateExpired":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Certificate with mentioned id has expired.Action Replace expired certificate. Please refer to NSX Administration and API guide for details on certificate related operations.Frequency This is triggered every day until expired certificate is replaced."
        
        return metric
    #============= vmwNsxMCertificateAboutToExpire ===============================
    if metric.tags["name"] == "vmwNsxMCertificateAboutToExpire":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Certificate with mentioned id will expire on mentioned date.Action Replace expiring certificate. Please refer to NSX Administration and API guide for details on certificate related operations.Frequency This is triggered every day until expiring certificate is replaced."
        
        return metric
    #============= vmwNsxMVxlanLogicalSwitchImproperlyCnfg ===============================
    if metric.tags["name"] == "vmwNsxMVxlanLogicalSwitchImproperlyCnfg":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is triggered if one or more distributed virtualport groups backing a certain Logical Switch were modified andor removed.Or if migration of Control plane mode for a Logical SwitchTransportZone failed.Action required (1) If the event was triggered due todeletionmodification of backing distributed virtual port groups then theerror will be visible on Logical Switch UI page. Resolve from there willtry and create missing distributed virtual port groups for the LogicalSwitch. (2) If event was triggered due to failure of Control plan modemigration redo the migration for that Logical Switch or Transport Zone.Frequency of traps Event is triggered due to user actions as explainedin description.Affects Logical Switch network traffic."
        
        return metric
    #============= vmwNsxMVxlanLogicalSwitchProperlyCnfg ===============================
    if metric.tags["name"] == "vmwNsxMVxlanLogicalSwitchProperlyCnfg":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Logical Switch status has been marked good most probably asresult of resolving any errors on it.Action required NoneFrequency of traps Event is triggered when user resolves the LogicalSwitch error and as a result missing backing distributed virtual portgroups are recreated."
        
        return metric
    #============= vmwNsxMVxlanInitFailed ===============================
    if metric.tags["name"] == "vmwNsxMVxlanInitFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to configure vmknic as a VTEP VXLAN traffic throughthis interface will be dropped until this is resolved.Action required Check the hosts vmkernel.log for more details.Frequency of traps Every time a VTEP vmknic tries to connect to itsDistributed Virtual Port.Affects VXLAN traffic on the affected Host."
        
        return metric
    #============= vmwNsxMVxlanPortInitFailed ===============================
    if metric.tags["name"] == "vmwNsxMVxlanPortInitFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to configure VXLAN on the Distributed Virtual Portthe port will be disconnected.Action required Check the hosts vmkernel.log for more details.Frequency of traps Every time a VXLAN vNic tries to connect to itsDistributed Virtual Port on the host.Affects VXLAN traffic on the affected Host."
        
        return metric
    #============= vmwNsxMVxlanInstanceDoesNotExist ===============================
    if metric.tags["name"] == "vmwNsxMVxlanInstanceDoesNotExist":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VXLAN configuration was received for a Distributed VirtualPort but the host has not yet enabled VXLAN on the vSphere DistributedSwitch. VXLAN ports on affected Host will fail to connect until resolved.Action required See KB 2107951 (httpskb.vmware.comselfservicemicrositessearch.docmd=displayKCdocType=kcexternalId=2107951sliceId=1docTypeID=DTKB11dialogID=40732862stateId=02002040754197)Frequency of traps Every time any VXLAN related port (vNic or vmknic)tries to connect to its Distributed Virtual Port on the host.Affects VXLAN Traffic on that Host."
        
        return metric
    #============= vmwNsxMVxlanLogicalSwitchWrkngImproperly ===============================
    if metric.tags["name"] == "vmwNsxMVxlanLogicalSwitchWrkngImproperly":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VTEP interface was unable to join the specified multicastaddress the VTEP will be unable to receive some traffic from other hostsuntil this is resolved. The host will periodically retry joining the groupuntil it is successful.Action required Check the hosts vmkernel.log for more details.Frequency of traps NSX retries joining failed mcast groups every5 seconds.Affects Logical Switch associated with problem VTEP interface wont workproperly."
        
        return metric
    #============= vmwNsxMVxlanTransportZoneIncorrectlyWrkng ===============================
    if metric.tags["name"] == "vmwNsxMVxlanTransportZoneIncorrectlyWrkng":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The IP address of a VTEP vmknic has changed.Action required None.Frequency of traps Every time a VTEP IP changes"
        
        return metric
    #============= vmwNsxMVxlanTransportZoneNotUsed ===============================
    if metric.tags["name"] == "vmwNsxMVxlanTransportZoneNotUsed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VTEP vmknic does not have a valid IP address assigned allVXLAN traffic through this vmknic will be dropped.Action required Verify the IP configuration for the interface and theDHCP server if DHCP is used.Frequency of traps Once per VTEP loosing its IP address."
        
        return metric
    #============= vmwNsxMVxlanOverlayClassMissingOnDvs ===============================
    if metric.tags["name"] == "vmwNsxMVxlanOverlayClassMissingOnDvs":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX packages where not installed prior to DVS configurationfor VXLAN. All VXLAN ports will fail to connect until resolved.Action required See KB 2107951 httpskb.vmware.comselfservicemicrositessearch.docmd=displayKCdocType=kcexternalId=2107951sliceId=1docTypeID=DTKB11dialogID=40732862stateId=02002040754197Frequency of traps Once per setting of the com.vmware.netoverlay.layer0=vxlanopaque property or whenver the host is configured for vxlan or Hostreconnects to VCEnter and host has some problem.Affects VXLAN Traffic for that Host will be affected."
        
        return metric
    #============= vmwNsxMVxlanControllerRemoved ===============================
    if metric.tags["name"] == "vmwNsxMVxlanControllerRemoved":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when VXLAN Controller has been removed due tothe connection cant be built please check controller IP configurationand deploy again."
        
        return metric
    #============= vmwNsxMVxlanControllerConnProblem ===============================
    if metric.tags["name"] == "vmwNsxMVxlanControllerConnProblem":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected the connection between two controllernodes is broken.Action required It is a warning event users need to check the controllercluster for the further steps. Check following KB 2127655 httpskb.vmware.comselfservicemicrositessearch.docmd=displayKCdocType=kcexternalId=2127655sliceId=1docTypeID=DTKB11dialogID=40732913stateId=02002040754965 to see if issue matches.Frequency of traps Whenever the controller reports the issue.Affects Networking might get affected."
        
        return metric
    #============= vmwNsxMVxlanControllerInactive ===============================
    if metric.tags["name"] == "vmwNsxMVxlanControllerInactive":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Certification information couldnt be sent to NSXControllers.Action required Ensure that NSX Controller cluster is in healthy statebefore preparing a new Host. Invoke Controller Sync API to try and rectifythis error.Frequency of traps When a new host is prepared for NSX networking.Affects Newly prepared Host. Communication channel between Host and NSXControllers might have issues."
        
        return metric
    #============= vmwNsxMVxlanControllerActive ===============================
    if metric.tags["name"] == "vmwNsxMVxlanControllerActive":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A notification generated when Controller cluster state isnow active. Controller Synchronization job is in progress.Frequency of traps Controller cluster becomes active again from aprevious inactive state.Action required User doesnt have to take any corrective action.NSX will autosync the controllers."
        
        return metric
    #============= vmwNsxMVxlanVmknicMissingOrDeleted ===============================
    if metric.tags["name"] == "vmwNsxMVxlanVmknicMissingOrDeleted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VXLAN vmknic is missing or deleted from host.Action required Issue can be resolved from Logical NetworkPreparation  VXLAN Transport UI section. Clicking on resolve will try torectify the issue.Frequency of traps First time NSX Manager finds that VXLAN vmknic ismissing or deleted from Host.Affects VXLAN Traffic tofrom the mentioned Host will be affected."
        
        return metric
    #============= vmwNsxMVxlanInfo ===============================
    if metric.tags["name"] == "vmwNsxMVxlanInfo":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager will raise this event when connection betweeneither of the following component is establishedreestablished(i) connection between NSX Manager and Host Firewall agent.(ii) connection between NSX Manager and Control Plane Agent.(iii) connection between Control Plane Agent to Controllers.Action required NoneFrequency of traps NSX Manager will raise this event when connectionbetween either of the following component is establishedreestablished(i) connection between NSX Manager and Host Firewall agent.(ii) connection between NSX Manager and Control Plane Agent(iii) connection between Control Plane Agent to Controllers."
        
        return metric
    #============= vmwNsxMVxlanVmknicPortGrpMissing ===============================
    if metric.tags["name"] == "vmwNsxMVxlanVmknicPortGrpMissing":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected one vxlan vmknic is missing on VC.Action required Check the host if that vmknic is deleted click on theresolve button on UI or call the remediate API (POST api2.0vdnconfighosthostIdvxlanvtepsaction=remediate)to recreate the vxlan vmknic.Frequency of traps First time when vxlan vmknic is detected missing(manually deleted by user or inventory report the incorrect information)Affects  The VXLAN traffic on that host may be interrupted."
        
        return metric
    #============= vmwNsxMVxlanVmknicPortGrpAppears ===============================
    if metric.tags["name"] == "vmwNsxMVxlanVmknicPortGrpAppears":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected one vxlan vmknic that was marked asmissing has now reappeared on VC.Action required NoneFrequency of traps When that missing vmknic reappears again.Affects The VXLAN traffic on that host may be resumed."
        
        return metric
    #============= vmwNsxMVxlanConnDown ===============================
    if metric.tags["name"] == "vmwNsxMVxlanConnDown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is triggered when either of the followingconnections are detected down by NSX Manager(i) connection between NSX Manager and Host Firewall agent.(ii) connection between NSX Manager and Control Plane Agent.(iii) connection between Control Plane Agent to Controllers.Action required(i) If NSX Manager to Host Firewall Agent connection isdown check NSX Manager and Firewall Agent logs to get error details. Youcan try Fabric Synchronize API to try and retificy this issue.(ii) If NSX Manager to Control Plane Agent connection is down pleasecheck NSX Manager and Control Plane Agent logs to get the error detailcheck whether the Control Plane Agent process is down.(iii) If Control Plane Agent to Controllers connection is down please goto UI Installation page to check the connection status for crosspondingHost.Frequency of traps When(i) NSX Manager looses connection with Firewall agent on host or(ii) NSX Manager losses connection with Control plane agent on host or(iii) Control plane agent on Host looses connection with NSX Controllers.Affects VMs on that Host might get affected."
        
        return metric
    #============= vmwNsxMBackingPortgroupMissing ===============================
    if metric.tags["name"] == "vmwNsxMBackingPortgroupMissing":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected one backing portgroup of a logicalswitch is missing on VCenter.Action required Click on the resolve button on UI or call the API(POST httpsnsxmanagerhostapi2.0vdnvirtualwiresvirtualwireIdbackingaction=remediate)to recreate that backing portgroup.Frequency of traps Whenever logical switch backing portgroup is missingon VC.Affects VMs cannot be connected to this Logical Switch."
        
        return metric
    #============= vmwNsxMBackingPortgroupReappears ===============================
    if metric.tags["name"] == "vmwNsxMBackingPortgroupReappears":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected one backing portgroup of a logicalswitch that was missing reappears on VC.Action required NoneFrequency of traps Whenever user triggered remediate API on LogicalSwitch which has missing backing portgroup."
        
        return metric
    #============= vmwNsxMManagedObjectIdChanged ===============================
    if metric.tags["name"] == "vmwNsxMManagedObjectIdChanged":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected the Managed Objectid of one backingportgroup of a logical switch changed.Action required NoneFrequnecy of traps This typically happens when user restores a backupof Logical Switch backing portgroup."
        
        return metric
    #============= vmwNsxMHighLatencyOnDisk ===============================
    if metric.tags["name"] == "vmwNsxMHighLatencyOnDisk":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected some disk on a NSX Controller has highlatency.Action required Rectify the issue on specified device and controller.Frequency of traps First time NSX detected this issue as reported byController. When this issue gets resolved another Informational event willbe raised by NSX Manager indicating the same.Affects NSX Controller."
        
        return metric
    #============= vmwNsxMHighLatencyOnDiskResolved ===============================
    if metric.tags["name"] == "vmwNsxMHighLatencyOnDiskResolved":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected the disk high latency alert on a somedisk on a NSX Controller has been resolved.Frequency of traps First time NSX detected previously raised disklatency issue has been resolved."
        
        return metric
    #============= vmwNsxMControllerVmPoweredOff ===============================
    if metric.tags["name"] == "vmwNsxMControllerVmPoweredOff":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected a Controller Virtual Machine is poweredoff from vCenter.Action required Click on the Resolve button on Controller page on UI orcall the API (POST httpsnsxmanagerhostapi2.0vdncontrollercontrollerIdaction=remediate)to power on the Controller Virtual Machine.Frequency of traps This event wil be raised when controller VirtualMachine is powered off from vCenter.Affects Controller cluster status might go to disconnected if a controllerVirtual Machine is powered off. Any operation that requires an activeController Cluster may be affected."
        
        return metric
    #============= vmwNsxMControllerVmDeleted ===============================
    if metric.tags["name"] == "vmwNsxMControllerVmDeleted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected a Controller Virtual Machine is deletedfrom vCenter.Action required Click on the Resolve button on Controller page on UI orcall the API (POST httpsnsxmanagerhostapi2.0vdncontrollercontrollerIdaction=remediate)to clean up NSX managers database state.Frequency of traps This event will be raised when Controller VirtualMachine is deleted from vCenter.Affects Controller cluster status might go to disconnected if a controllerVirtual Machine is powered off. Any operation that requires an activeController Cluster may be affected."
        
        return metric
    #============= vmwNsxMVxlanConfigNotSet ===============================
    if metric.tags["name"] == "vmwNsxMVxlanConfigNotSet":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX manager detected the VXLAN configuration is not set onthe host (wouldblock issue). And this event indicates NSX Manager triedto rectify this issue by resending the VXLAN configuration on Host.Action required See KB 2107951 httpskb.vmware.comselfservicemicrositessearch.docmd=displayKCdocType=kcexternalId=2107951sliceId=1docTypeID=DTKB11dialogID=40732862stateId=02002040754197for more information.Frequency of traps This event will generate when host preparation task istriggered for a host and Host encounters wouldblock issue.Affects It is a notification no specific guide for the next step."
        
        return metric
    #============= vmwNsxMVxlanPortgroupDeleted ===============================
    if metric.tags["name"] == "vmwNsxMVxlanPortgroupDeleted":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Manager will raise this event when a VXLAN portgroup is deleted froma switch.ACTION User does not have to take any action. This is just a notificationfor the user.FREQUENCY This event is generated a single time when the VXLAN portgroupis deleted from the switch.AFFECTS The VXLAN traffic on the switch is interrupted."
        
        return metric
    #============= vmwNsxMVxlanVDSandPgMismatch ===============================
    if metric.tags["name"] == "vmwNsxMVxlanVDSandPgMismatch":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DESCRIPTION NSX Manager will raise this event when the teaming policies ofa VDS and its associated VXLAN portgroup are not the same.ACTION Set the VXLAN portgroup teaming policy back to the original value. Below is the workaround to correctly update the teaming policy in a deployedcluster The supported method to correct teaming policy inconsistencies isto create and prepare a new NSX cluster with the required teaming policyand to migrate ESXi hosts to that cluster. Changing the teaming policy inthe manager DB by some other means only applies to newly created virtualwires after the DB change is made.FREQUENCY This event will generate whenever the VXLAN portgroup teamingpolicy is changed to something different than the VDS teaming policy.AFFECTS The VXLAN traffic on the switch may be interrupted."
        
        return metric
    #============= vmwNsxMVxlanControllerDisconnected ===============================
    if metric.tags["name"] == "vmwNsxMVxlanControllerDisconnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DESCRIPTION NSX Manager raises this event when the Controller VM isDisconnected ie the controller can not reached from the NSX Manager.ACTION Make sure the IP is assigned to the controller VM and it isreachable form the NSX Manager.FREQUENCY The event occurs when the Controller VM is powered off or not responding.Minimum 40 secs between two disconnecet events.AFFECTS Controller cluster status might go to disconnected if a controllerVirtual Machine is disconnected. Any operation that requires an activeController Cluster may be affected."
        
        return metric
    #============= vmwNsxMVxlanControllerConnected ===============================
    if metric.tags["name"] == "vmwNsxMVxlanControllerConnected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DESCRIPTION NSX Manager will raise this informational event when thecontroller VM is connected to controller cluster.ACTION No action to be taken.FREQUENCY Event occurs as controller is connected to controllercluster.Minimum 40 secs between two connecet events.AFFECTS None."
        
        return metric
    #============= vmwNsxMVxlanControllerVmPoweredOn ===============================
    if metric.tags["name"] == "vmwNsxMVxlanControllerVmPoweredOn":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DESCRIPTION NSX manager detected a Controller Virtual Machine is powered on from vCenter.ACTION None.FREQUENCY This event occurs when Controller Virtual Machine is powered On.AFFECTS Controller cluster status might go to disconnected if a controller Virtual Machineis powered off. Any operation that requires an active Controller Cluster may be affected."
        
        return metric
    #============= vmwNsxMVxlanHostEvents ===============================
    if metric.tags["name"] == "vmwNsxMVxlanHostEvents":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        vb7 = metric.fields.get("vmwNsxMEventSourceID")
        vb8 = metric.fields.get("vmwNsxMEventSourceType")
        vb9 = metric.fields.get("vmwNsxMEventSourceIP")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DESCRIPTION NSX manager receives a notification from the host informing MAC mismatch occurred.ACTION Contact the administrator to take following action(1) Look for VMs that caused this issue at hosts.(2) If VMs are rouge shut dowm these VMs.FREQUENCY Event is triggerred as MAC mismatch occurs at switchport on the hosts.AFFECTS Identify the VMs causing this issue."
        
        return metric
    #============= vmwNsxMLogserverEventGenStopped ===============================
    if metric.tags["name"] == "vmwNsxMLogserverEventGenStopped":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DESCRIPTION This event is triggered if the security log on domain controller event log server is full.ACTION See article regarding the issue  httpssupport.microsoft.comenuskb867860Contact Domain Administrator to take one of the following actions(1). Inclease the size of security log.(2). Clear the security log.(3). Archive the security log.FREQUENCY Event is triggered due to event log size reaches its limit.AFFECTS Identity firewall stops functioning."
        
        return metric
    #============= vmwNsxMApplicationRuleManagerFlowAnalysisStart ===============================
    if metric.tags["name"] == "vmwNsxMApplicationRuleManagerFlowAnalysisStart":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Started flow analysis on Application Rule Manager session.Action required NoneFrequency of trapsThis trap is sent once for each session on which analysis has started"
        
        return metric
    #============= vmwNsxMApplicationRuleManagerFlowAnalysisFailed ===============================
    if metric.tags["name"] == "vmwNsxMApplicationRuleManagerFlowAnalysisFailed":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Flow analysis failed on Application Rule Manager session.Contextual data provided with this event may indicate the cause of this failure.Action required Start a new monitoring session for the applcation and try analyzing flows again.On repeated failure collect ESX  NSX Manager tech support bundle and open SR with Vmware tech support.Frequency of trapsThis trap is sent once for each session on which analysis has failed"
        
        return metric
    #============= vmwNsxMApplicationRuleManagerFlowAnalysisComplete ===============================
    if metric.tags["name"] == "vmwNsxMApplicationRuleManagerFlowAnalysisComplete":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwNsxMEventCode")
        vb2 = metric.fields.get("vmwNsxMEventTimestamp")
        vb3 = metric.fields.get("vmwNsxMEventMessage")
        vb4 = metric.fields.get("vmwNsxMEventSeverity")
        vb5 = metric.fields.get("vmwNsxMEventComponent")
        vb6 = metric.fields.get("vmwNsxMUuid")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Completed flow analysis on Application Rule Manager session.Action required NoneFrequency of trapsThis trap is sent once for each session on which analysis has completed"
        
        return metric
    
    return metric 
'''