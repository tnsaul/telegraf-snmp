[[processors.starlark]]
# MIB filename - VMWARE-VRNI-MIB.mib
# MIB name - VMWARE-VRNI-MIB
source = '''
def apply(metric):

    #============= vmwSnmpTrapsAreConfigured ===============================
    if metric.tags["name"] == "vmwSnmpTrapsAreConfigured":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Initial trap to notify receiver that vRNI is now configured to send SNMP traps"
        
        return metric
    #============= vmwSnmpTrapsAreDisabled ===============================
    if metric.tags["name"] == "vmwSnmpTrapsAreDisabled":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Trap to notify receiver that vRNI is no longer configured to send SNMP traps"
        
        return metric
    #============= vmwTestTrap ===============================
    if metric.tags["name"] == "vmwTestTrap":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Test Trap"
        
        return metric
    #============= vmwEntityDiscoveryChangeEvent ===============================
    if metric.tags["name"] == "vmwEntityDiscoveryChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Discovery Event"
        
        return metric
    #============= vmwEntityPropertiesChangeEvent ===============================
    if metric.tags["name"] == "vmwEntityPropertiesChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Property Change Event"
        
        return metric
    #============= vmwFirewallNotInstalledOnHostEvent ===============================
    if metric.tags["name"] == "vmwFirewallNotInstalledOnHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall Not Installed On Host Event"
        
        return metric
    #============= vmwHostWithStaleFirewallRulesEvent ===============================
    if metric.tags["name"] == "vmwHostWithStaleFirewallRulesEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host With Stale Firewall Rules Event"
        
        return metric
    #============= vmwIpAddressChangeEvent ===============================
    if metric.tags["name"] == "vmwIpAddressChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Ip Address Change"
        
        return metric
    #============= vmwL2GatewayAnomalyEvent ===============================
    if metric.tags["name"] == "vmwL2GatewayAnomalyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "L2 Gateway Anomaly Event"
        
        return metric
    #============= vmwL2NetworkAddressAnomalyEvent ===============================
    if metric.tags["name"] == "vmwL2NetworkAddressAnomalyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "L2 Network Address Anomaly Event"
        
        return metric
    #============= vmwL2NetworkDiameterExceededEvent ===============================
    if metric.tags["name"] == "vmwL2NetworkDiameterExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "L2 Network Diameter Exceeded Event"
        
        return metric
    #============= vmwL2NetworkUplinkMissingEvent ===============================
    if metric.tags["name"] == "vmwL2NetworkUplinkMissingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "L2 Network Uplink Missing Event"
        
        return metric
    #============= vmwL2NetworkWithNoVMsEvent ===============================
    if metric.tags["name"] == "vmwL2NetworkWithNoVMsEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "L2 Network With No VMs Event"
        
        return metric
    #============= vmwLayer2NetworkDiameterChangedEvent ===============================
    if metric.tags["name"] == "vmwLayer2NetworkDiameterChangedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Layer2 Network Diameter Changed Event"
        
        return metric
    #============= vmwMTUMismatchEvent ===============================
    if metric.tags["name"] == "vmwMTUMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "MTU Mismatch Event"
        
        return metric
    #============= vmwNetworkIsolationEvent ===============================
    if metric.tags["name"] == "vmwNetworkIsolationEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Network Isolation Event"
        
        return metric
    #============= vmwNoPathEvent ===============================
    if metric.tags["name"] == "vmwNoPathEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "No Path Event"
        
        return metric
    #============= vmwSpoofguardDisabledEvent ===============================
    if metric.tags["name"] == "vmwSpoofguardDisabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Spoofguard Disabled Event"
        
        return metric
    #============= vmwVMotionEvent ===============================
    if metric.tags["name"] == "vmwVMotionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VMotion Event"
        
        return metric
    #============= vmwVMWithDisconnectedVnicsEvent ===============================
    if metric.tags["name"] == "vmwVMWithDisconnectedVnicsEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM With Disconnected Vnics Event"
        
        return metric
    #============= vmwVMWithMulipleVnicsOnDifferentVxlansEvent ===============================
    if metric.tags["name"] == "vmwVMWithMulipleVnicsOnDifferentVxlansEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM With Multiple Vnics On Different Vxlans Event"
        
        return metric
    #============= vmwVMWithMulipleVnicsOnSameL2Event ===============================
    if metric.tags["name"] == "vmwVMWithMulipleVnicsOnSameL2Event":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM With Multiple Vnics On Same L2 Event"
        
        return metric
    #============= vmwVMWithNoIpAddressEvent ===============================
    if metric.tags["name"] == "vmwVMWithNoIpAddressEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM With No Ip Address Event"
        
        return metric
    #============= vmwVTEPMissingEvent ===============================
    if metric.tags["name"] == "vmwVTEPMissingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VTEP Missing Event"
        
        return metric
    #============= vmwL2Event ===============================
    if metric.tags["name"] == "vmwL2Event":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "L2 Event"
        
        return metric
    #============= vmwMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Membership Change"
        
        return metric
    #============= vmwSecurityGroupMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwSecurityGroupMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Security Group Membership Change"
        
        return metric
    #============= vmwFirewallRuleMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwFirewallRuleMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall Rule Membership Change"
        
        return metric
    #============= vmwVlanMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwVlanMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vlan Membership Change"
        
        return metric
    #============= vmwVxlanMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwVxlanMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vxlan Membership Change"
        
        return metric
    #============= vmwDeleteChangeEvent ===============================
    if metric.tags["name"] == "vmwDeleteChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Delete Event"
        
        return metric
    #============= vmwVtepFailedPingEvent ===============================
    if metric.tags["name"] == "vmwVtepFailedPingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VTEP Ping Failure Event"
        
        return metric
    #============= vmwEmptySearchStreamChangeEvent ===============================
    if metric.tags["name"] == "vmwEmptySearchStreamChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Search with no results"
        
        return metric
    #============= vmwSearchStreamMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwSearchStreamMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Search results changed"
        
        return metric
    #============= vmwEmptySearchStreamProblemEvent ===============================
    if metric.tags["name"] == "vmwEmptySearchStreamProblemEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Search with no results (Problem)"
        
        return metric
    #============= vmwSearchStreamMembershipProblemEvent ===============================
    if metric.tags["name"] == "vmwSearchStreamMembershipProblemEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Search results changed (Problem)"
        
        return metric
    #============= vmwOspfConfigurationMismatchEvent ===============================
    if metric.tags["name"] == "vmwOspfConfigurationMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "OSPF Mismatch Event"
        
        return metric
    #============= vmwServiceVMNotHealthyEvent ===============================
    if metric.tags["name"] == "vmwServiceVMNotHealthyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service VM Not Healthy Event"
        
        return metric
    #============= vmwServiceVMNotPoweredOnEvent ===============================
    if metric.tags["name"] == "vmwServiceVMNotPoweredOnEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service VM Not Powered On Event"
        
        return metric
    #============= vmwServiceVMHighCPUUsageEvent ===============================
    if metric.tags["name"] == "vmwServiceVMHighCPUUsageEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service VM High CPU Usage Event"
        
        return metric
    #============= vmwServiceVMHighMemoryUsageEvent ===============================
    if metric.tags["name"] == "vmwServiceVMHighMemoryUsageEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service VM High Memory Usage Event"
        
        return metric
    #============= vmwServiceVMHighDiskUsageEvent ===============================
    if metric.tags["name"] == "vmwServiceVMHighDiskUsageEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Service VM High Disk Usage Event"
        
        return metric
    #============= vmwIPSetPropertiesChangeEvent ===============================
    if metric.tags["name"] == "vmwIPSetPropertiesChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IPSet Change"
        
        return metric
    #============= vmwFirewallRulePropertiesChangeEvent ===============================
    if metric.tags["name"] == "vmwFirewallRulePropertiesChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall Rule Change"
        
        return metric
    #============= vmwSecurityGroupPropertiesChangeEvent ===============================
    if metric.tags["name"] == "vmwSecurityGroupPropertiesChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Security Group Change"
        
        return metric
    #============= vmwIPSetMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwIPSetMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IPSet Membership Change"
        
        return metric
    #============= vmwFirewallRuleMaskEvent ===============================
    if metric.tags["name"] == "vmwFirewallRuleMaskEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Firewall Rule Masked Event"
        
        return metric
    #============= vmwSecurityMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwSecurityMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Security Membership Change"
        
        return metric
    #============= vmwSecurityTagPropertiesChangeEvent ===============================
    if metric.tags["name"] == "vmwSecurityTagPropertiesChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Security Tag Change"
        
        return metric
    #============= vmwSecurityTagMembershipChangeEvent ===============================
    if metric.tags["name"] == "vmwSecurityTagMembershipChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Security Tag Membership Change"
        
        return metric
    #============= vmwHostDatastoreChangeEvent ===============================
    if metric.tags["name"] == "vmwHostDatastoreChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host datastores changed"
        
        return metric
    #============= vmwVMDatastoreChangeEvent ===============================
    if metric.tags["name"] == "vmwVMDatastoreChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM datastores changed"
        
        return metric
    #============= vmwVMSnapshotChangeEvent ===============================
    if metric.tags["name"] == "vmwVMSnapshotChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VM snapshot changed"
        
        return metric
    #============= vmwVMVirtualDiskChangeEvent ===============================
    if metric.tags["name"] == "vmwVMVirtualDiskChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Virtual disk migrated"
        
        return metric
    #============= vmwIPSetDefinitionMismatchEvent ===============================
    if metric.tags["name"] == "vmwIPSetDefinitionMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IPSET Definition Mismatch Event"
        
        return metric
    #============= vmwSegmentMismatchEvent ===============================
    if metric.tags["name"] == "vmwSegmentMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Segment Mismatch Event"
        
        return metric
    #============= vmwVtepEvent ===============================
    if metric.tags["name"] == "vmwVtepEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vtep Event"
        
        return metric
    #============= vmwVtepConfigurationFaultEvent ===============================
    if metric.tags["name"] == "vmwVtepConfigurationFaultEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vtep Configuration Fault Event"
        
        return metric
    #============= vmwVtepSubnetMismatchEvent ===============================
    if metric.tags["name"] == "vmwVtepSubnetMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vtep Subnet Mismatch Event"
        
        return metric
    #============= vmwVtepCountMismatchEvent ===============================
    if metric.tags["name"] == "vmwVtepCountMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vtep Count Mismatch Event"
        
        return metric
    #============= vmwDLRNetworksNotReachableEvent ===============================
    if metric.tags["name"] == "vmwDLRNetworksNotReachableEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DLR Routing event"
        
        return metric
    #============= vmwEdgeNetworksNotReachableEvent ===============================
    if metric.tags["name"] == "vmwEdgeNetworksNotReachableEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge Routing event"
        
        return metric
    #============= vmwNiInfraChangeEvent ===============================
    if metric.tags["name"] == "vmwNiInfraChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NI Infra Change"
        
        return metric
    #============= vmwDataSourceEnabledChangeEvent ===============================
    if metric.tags["name"] == "vmwDataSourceEnabledChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Data Source Enabled"
        
        return metric
    #============= vmwDataSourceDisabledChangeEvent ===============================
    if metric.tags["name"] == "vmwDataSourceDisabledChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Data Source Disabled"
        
        return metric
    #============= vmwDataSourceCreatedEvent ===============================
    if metric.tags["name"] == "vmwDataSourceCreatedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Data Source Created"
        
        return metric
    #============= vmwPlatformCpuCoreChangeEvent ===============================
    if metric.tags["name"] == "vmwPlatformCpuCoreChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Platform CPU Change Event"
        
        return metric
    #============= vmwPlatformDiskChangeEvent ===============================
    if metric.tags["name"] == "vmwPlatformDiskChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Platform Disk Change Event"
        
        return metric
    #============= vmwPlatformMemoryChangeEvent ===============================
    if metric.tags["name"] == "vmwPlatformMemoryChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Platform Memory Change Event"
        
        return metric
    #============= vmwPlatformRebootedEvent ===============================
    if metric.tags["name"] == "vmwPlatformRebootedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Platform Reboot Change Event"
        
        return metric
    #============= vmwProxyCpuCoreChangeEvent ===============================
    if metric.tags["name"] == "vmwProxyCpuCoreChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Collector CPU Change Event"
        
        return metric
    #============= vmwProxyDiskChangeEvent ===============================
    if metric.tags["name"] == "vmwProxyDiskChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Collector Disk Change Event"
        
        return metric
    #============= vmwProxyMemoryChangeEvent ===============================
    if metric.tags["name"] == "vmwProxyMemoryChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Collector Memory Change Event"
        
        return metric
    #============= vmwProxyRebootedEvent ===============================
    if metric.tags["name"] == "vmwProxyRebootedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Collector Reboot Change Event"
        
        return metric
    #============= vmwNIClusterChangeEvent ===============================
    if metric.tags["name"] == "vmwNIClusterChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Cluster Change Event"
        
        return metric
    #============= vmwNISystemProxyChangeEvent ===============================
    if metric.tags["name"] == "vmwNISystemProxyChangeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "System Proxy Change Event"
        
        return metric
    #============= vmwNIClusterCreateEvent ===============================
    if metric.tags["name"] == "vmwNIClusterCreateEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Cluster Create Event"
        
        return metric
    #============= vmwThresholdExceededEventCpuReady ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventCpuReady":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded Cpu Ready"
        
        return metric
    #============= vmwThresholdExceededEventCpuCoStop ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventCpuCoStop":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded Cpu Co Stop"
        
        return metric
    #============= vmwThresholdExceededEventDiskCommandAbortRule ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDiskCommandAbortRule":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded Disk Command Abort Rule"
        
        return metric
    #============= vmwThresholdExceededEventIODeviceLatencyRule ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventIODeviceLatencyRule":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded IO Device Latency Rule"
        
        return metric
    #============= vmwThresholdExceededEventIOKernelLatencyRule ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventIOKernelLatencyRule":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded IO Kernel Latency Rule"
        
        return metric
    #============= vmwThresholdExceededEventMemorySwapInRule ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventMemorySwapInRule":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded Memory Swap In Rule"
        
        return metric
    #============= vmwThresholdExceededEventMemorySwapOutRule ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventMemorySwapOutRule":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded Memory Swap Out Rule"
        
        return metric
    #============= vmwThresholdExceededEventNetworkRxDropRule ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventNetworkRxDropRule":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded Memory Rx Drop Rule"
        
        return metric
    #============= vmwThresholdExceededEventNetworkTxDropRule ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventNetworkTxDropRule":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Threshold Exceeded Memory Tx Drop Rule"
        
        return metric
    #============= vmwAWSRegionSGLimitEvent ===============================
    if metric.tags["name"] == "vmwAWSRegionSGLimitEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "AWS Region Security Group count near threshold."
        
        return metric
    #============= vmwAWSVPCSGLimitEvent ===============================
    if metric.tags["name"] == "vmwAWSVPCSGLimitEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "AWS VPC Security Group count near threshold."
        
        return metric
    #============= vmwAWSSGInboundRuleLimitEvent ===============================
    if metric.tags["name"] == "vmwAWSSGInboundRuleLimitEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "AWS Security Group Inbound Rule count near threshold."
        
        return metric
    #============= vmwAWSSGOutboundRuleLimitEvent ===============================
    if metric.tags["name"] == "vmwAWSSGOutboundRuleLimitEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "AWS Security Group Outbound Rule count near threshold."
        
        return metric
    #============= vmwAWSInterfaceSGLimitEvent ===============================
    if metric.tags["name"] == "vmwAWSInterfaceSGLimitEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "AWS VPC Security Group count near threshold."
        
        return metric
    #============= vmwPacketDropEvent ===============================
    if metric.tags["name"] == "vmwPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Packet Drop Event"
        
        return metric
    #============= vmwSwitchPortPacketDropEvent ===============================
    if metric.tags["name"] == "vmwSwitchPortPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Switch Port Packet Drop"
        
        return metric
    #============= vmwRouterInterfacePacketDropEvent ===============================
    if metric.tags["name"] == "vmwRouterInterfacePacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Router Interface Packet Drop"
        
        return metric
    #============= vmwVnicPacketDropEvent ===============================
    if metric.tags["name"] == "vmwVnicPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vnic Packet Drop"
        
        return metric
    #============= vmwVTEPUnderlayPacketDropEvent ===============================
    if metric.tags["name"] == "vmwVTEPUnderlayPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VTEP Underlay Packet Drop"
        
        return metric
    #============= vmwPnicUnderlyingSwitchPortPacketDropEvent ===============================
    if metric.tags["name"] == "vmwPnicUnderlyingSwitchPortPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "PNIC Underlying Switch Port Packet Drop"
        
        return metric
    #============= vmwDevicePacketDropEvent ===============================
    if metric.tags["name"] == "vmwDevicePacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Device Packet Drop"
        
        return metric
    #============= vmwThresholdExceededEventDatastoreFreeSpaceWarning ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDatastoreFreeSpaceWarning":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "ThresholdExceededEventDatastoreFreeSpaceWarning"
        
        return metric
    #============= vmwThresholdExceededEventDatastoreFreeSpaceCritical ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDatastoreFreeSpaceCritical":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "ThresholdExceededEventDatastoreFreeSpaceCritical"
        
        return metric
    #============= vmwThresholdExceededEventDatastoreReadLatency ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDatastoreReadLatency":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "ThresholdExceededEventDatastoreReadLatency"
        
        return metric
    #============= vmwThresholdExceededEventDatastoreWriteLatency ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDatastoreWriteLatency":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "ThresholdExceededEventDatastoreWriteLatency"
        
        return metric
    #============= vmwDistributedFirewallApplyHostEvent ===============================
    if metric.tags["name"] == "vmwDistributedFirewallApplyHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Distributed Firewall Apply Host Event"
        
        return metric
    #============= vmwDistributedFirewallApplyVMEvent ===============================
    if metric.tags["name"] == "vmwDistributedFirewallApplyVMEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Distributed Firewall Apply VM Event"
        
        return metric
    #============= vmwNsxEvent ===============================
    if metric.tags["name"] == "vmwNsxEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Event"
        
        return metric
    #============= vmwFeatureImpactedEvent ===============================
    if metric.tags["name"] == "vmwFeatureImpactedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Feature Impacted Event"
        
        return metric
    #============= vmwClusterFeatureVersionMismatchEvent ===============================
    if metric.tags["name"] == "vmwClusterFeatureVersionMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Cluster Feature Mismatch Event"
        
        return metric
    #============= vmwHostFeatureVersionMismatchEvent ===============================
    if metric.tags["name"] == "vmwHostFeatureVersionMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Feature Mismatch Event"
        
        return metric
    #============= vmwFeatureVersionMismatchEvent ===============================
    if metric.tags["name"] == "vmwFeatureVersionMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Feature Version Mismatch Event"
        
        return metric
    #============= vmwHostFeatureEnabledMismatchEvent ===============================
    if metric.tags["name"] == "vmwHostFeatureEnabledMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Feature Enabled Mismatch Event"
        
        return metric
    #============= vmwHostFeatureInstalledMismatchEvent ===============================
    if metric.tags["name"] == "vmwHostFeatureInstalledMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Feature Installed Mismatch Event"
        
        return metric
    #============= vmwHostVtepNotFoundEvent ===============================
    if metric.tags["name"] == "vmwHostVtepNotFoundEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Vtep Not Found Event"
        
        return metric
    #============= vmwHostVtepDisconnectedEvent ===============================
    if metric.tags["name"] == "vmwHostVtepDisconnectedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Vtep Disconnected Event"
        
        return metric
    #============= vmwHostVtepEvent ===============================
    if metric.tags["name"] == "vmwHostVtepEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Vtep Event"
        
        return metric
    #============= vmwClusterHostsVtepMTUMismatchEvent ===============================
    if metric.tags["name"] == "vmwClusterHostsVtepMTUMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Vtep Mtu Mismatch Event"
        
        return metric
    #============= vmwFeatureUnhealthyEvent ===============================
    if metric.tags["name"] == "vmwFeatureUnhealthyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Feature Health Event"
        
        return metric
    #============= vmwEdgeHANotConfiguredEvent ===============================
    if metric.tags["name"] == "vmwEdgeHANotConfiguredEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Edge High Availability is not enabled Event"
        
        return metric
    #============= vmwEdgeInterfacesDownEvent ===============================
    if metric.tags["name"] == "vmwEdgeInterfacesDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or More NSX Edge Interfaces are down Event"
        
        return metric
    #============= vmwModuleUnhealthyEvent ===============================
    if metric.tags["name"] == "vmwModuleUnhealthyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Module Unhealthy Event"
        
        return metric
    #============= vmwModuleNotLoadedEvent ===============================
    if metric.tags["name"] == "vmwModuleNotLoadedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Module Not Loaded Event"
        
        return metric
    #============= vmwModuleNetworkConnectionFailureEvent ===============================
    if metric.tags["name"] == "vmwModuleNetworkConnectionFailureEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Module Network Connection Failure Event"
        
        return metric
    #============= vmwHostNetworkControlPlaneMismatchEvent ===============================
    if metric.tags["name"] == "vmwHostNetworkControlPlaneMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Control Plane Network Mismatch Event"
        
        return metric
    #============= vmwHostNetworkControlPlaneConnectionFailureEvent ===============================
    if metric.tags["name"] == "vmwHostNetworkControlPlaneConnectionFailureEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Control Plane Network Connection Failure Event"
        
        return metric
    #============= vmwHostNetworkControlPlaneNotSyncedEvent ===============================
    if metric.tags["name"] == "vmwHostNetworkControlPlaneNotSyncedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Control Plane Sync Failure Event"
        
        return metric
    #============= vmwNSXControllerClusterMajorityEvent ===============================
    if metric.tags["name"] == "vmwNSXControllerClusterMajorityEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Controller Cluster Majority Event"
        
        return metric
    #============= vmwNSXControllersVMOnSameHostEvent ===============================
    if metric.tags["name"] == "vmwNSXControllersVMOnSameHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Controllers VM On Same Host Event"
        
        return metric
    #============= vmwVxLanRangeExhaustEvent ===============================
    if metric.tags["name"] == "vmwVxLanRangeExhaustEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vxlan range exhaust  Event"
        
        return metric
    #============= vmwNSXFirewallDefaultAllowAllRulesEvent ===============================
    if metric.tags["name"] == "vmwNSXFirewallDefaultAllowAllRulesEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Firewall Allow All Rules Event"
        
        return metric
    #============= vmwLogicalRouterNoUplinkEvent ===============================
    if metric.tags["name"] == "vmwLogicalRouterNoUplinkEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The NSX DLR is not configured with default route and may prevent external communication.Check if the router configuration is only for routing between internal networks or if external access is required. If external access is required then configure an uplink interface on the NSX distributed logical router.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwEdgeNotHAEvent ===============================
    if metric.tags["name"] == "vmwEdgeNotHAEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Edge not Highly Available Event"
        
        return metric
    #============= vmwEdgeNotDeployedEvent ===============================
    if metric.tags["name"] == "vmwEdgeNotDeployedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Edge not deployed Event"
        
        return metric
    #============= vmwEcmpIsEnabledAndStatefulServicesAreUpEvent ===============================
    if metric.tags["name"] == "vmwEcmpIsEnabledAndStatefulServicesAreUpEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Edge Running with both ECMP and Stateful Edge Services Event"
        
        return metric
    #============= vmwLogicalRouterDeployedOnEcmpEdgeHostEvent ===============================
    if metric.tags["name"] == "vmwLogicalRouterDeployedOnEcmpEdgeHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Logical Router and ECMP Edge on Same Host Event"
        
        return metric
    #============= vmwEdgeMissingInterfaceOSPFAreaMappingEvent ===============================
    if metric.tags["name"] == "vmwEdgeMissingInterfaceOSPFAreaMappingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Edge Interface to OSPF Area Mapping Missing Event"
        
        return metric
    #============= vmwOspfInsecureAuthRouterEvent ===============================
    if metric.tags["name"] == "vmwOspfInsecureAuthRouterEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or more OSPF areas on the NSX Edge are using insecure authentication Event"
        
        return metric
    #============= vmwNSXControllersDeployedCountEvent ===============================
    if metric.tags["name"] == "vmwNSXControllersDeployedCountEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Controller count  Event"
        
        return metric
    #============= vmwNSXControllerNotActiveCountEvent ===============================
    if metric.tags["name"] == "vmwNSXControllerNotActiveCountEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Controller Not Active  Event"
        
        return metric
    #============= vmwNSXControllerEvent ===============================
    if metric.tags["name"] == "vmwNSXControllerEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Controller Event"
        
        return metric
    #============= vmwNSXEcmpEdgeDownEvent ===============================
    if metric.tags["name"] == "vmwNSXEcmpEdgeDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or more NSX Edges in the ECMP Cluster are currently down"
        
        return metric
    #============= vmwNSXMajorityEcmpEdgesDownEvent ===============================
    if metric.tags["name"] == "vmwNSXMajorityEcmpEdgesDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The majority of NSX Edges in the ECMP Cluster are currently down"
        
        return metric
    #============= vmwNSXAllEcmpEdgesDownEvent ===============================
    if metric.tags["name"] == "vmwNSXAllEcmpEdgesDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "All NSX Edges in the ECMP Cluster are currently down"
        
        return metric
    #============= vmwNSXEdgeMtuMismatchEvent ===============================
    if metric.tags["name"] == "vmwNSXEdgeMtuMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The MTU configured on one or more interfaces on the Edge does not match the MTU on the next hop router"
        
        return metric
    #============= vmwNSXEdgeSplitBrainEvent ===============================
    if metric.tags["name"] == "vmwNSXEdgeSplitBrainEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Both VMs of Edge HA are in active state"
        
        return metric
    #============= vmwVirtualDistributedRoutingEvent ===============================
    if metric.tags["name"] == "vmwVirtualDistributedRoutingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VDR Port Unset Event"
        
        return metric
    #============= vmwNSXComponentEvent ===============================
    if metric.tags["name"] == "vmwNSXComponentEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Service not running event"
        
        return metric
    #============= vmwNSXBackupEvent ===============================
    if metric.tags["name"] == "vmwNSXBackupEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Backup not configured"
        
        return metric
    #============= vmwNSXBackupAuditLogExcludedEvent ===============================
    if metric.tags["name"] == "vmwNSXBackupAuditLogExcludedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Audit Log excluded from NSX Backup"
        
        return metric
    #============= vmwNSXUnsecureBackupEvent ===============================
    if metric.tags["name"] == "vmwNSXUnsecureBackupEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Backups not using secure FTP"
        
        return metric
    #============= vmwNSXBackupSystemEventsExcludedEvent ===============================
    if metric.tags["name"] == "vmwNSXBackupSystemEventsExcludedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "System Event excluded from NSX Backup"
        
        return metric
    #============= vmwNSXBackupNotScheduledEvent ===============================
    if metric.tags["name"] == "vmwNSXBackupNotScheduledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Scheduled backups are not enabled"
        
        return metric
    #============= vmwNSXBackupNotRecordedEvent ===============================
    if metric.tags["name"] == "vmwNSXBackupNotRecordedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "No backup of the environment has been recorded"
        
        return metric
    #============= vmwNSXNtpServerEvent ===============================
    if metric.tags["name"] == "vmwNSXNtpServerEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NTP Server not configured"
        
        return metric
    #============= vmwNSXSysLogServerEvent ===============================
    if metric.tags["name"] == "vmwNSXSysLogServerEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Syslog Server not configured"
        
        return metric
    #============= vmwControllerSysLogServerEvent ===============================
    if metric.tags["name"] == "vmwControllerSysLogServerEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Syslog Server not configured"
        
        return metric
    #============= vmwNSXIpV6EnabledEvent ===============================
    if metric.tags["name"] == "vmwNSXIpV6EnabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IPv6 is enabled for NSX Manager"
        
        return metric
    #============= vmwNSXOspfNeighborDownEvent ===============================
    if metric.tags["name"] == "vmwNSXOspfNeighborDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or more OSPF Neighbors down"
        
        return metric
    #============= vmwGenericNSXSystemEvent ===============================
    if metric.tags["name"] == "vmwGenericNSXSystemEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX System Event (Warning)"
        
        return metric
    #============= vmwOtherCriticalNSXEvent ===============================
    if metric.tags["name"] == "vmwOtherCriticalNSXEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX System Event (Critical)"
        
        return metric
    #============= vmwFilterConfigApplyOnHostFailedEvent ===============================
    if metric.tags["name"] == "vmwFilterConfigApplyOnHostFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Filter Config Apply On Host Failed Event"
        
        return metric
    #============= vmwRulesetLoadOnHostFailedEvent ===============================
    if metric.tags["name"] == "vmwRulesetLoadOnHostFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Ruleset Load On Host Failed Event"
        
        return metric
    #============= vmwConfigUpdateOnHostFailedEvent ===============================
    if metric.tags["name"] == "vmwConfigUpdateOnHostFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Config Update On Host Failed Event"
        
        return metric
    #============= vmwSpoofguardConfigUpdateOnHostFailedEvent ===============================
    if metric.tags["name"] == "vmwSpoofguardConfigUpdateOnHostFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Spoofguard Config Update On Host Failed Event"
        
        return metric
    #============= vmwApplyRuleToVnicFailedEvent ===============================
    if metric.tags["name"] == "vmwApplyRuleToVnicFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Apply Rule To Vnic Failed Event"
        
        return metric
    #============= vmwContainerConfigUpdateOnVnicFailedEvent ===============================
    if metric.tags["name"] == "vmwContainerConfigUpdateOnVnicFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Container Config Update On Vnic Failed Event"
        
        return metric
    #============= vmwSpoofguardApplyToVnicFailedEvent ===============================
    if metric.tags["name"] == "vmwSpoofguardApplyToVnicFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Spoofguard Apply To Vnic Failed Event"
        
        return metric
    #============= vmwHostMessagingConfigurationFailedEvent ===============================
    if metric.tags["name"] == "vmwHostMessagingConfigurationFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Messaging Configuration Failed Event"
        
        return metric
    #============= vmwHostMessagingConnectionReconfigurationFailedEvent ===============================
    if metric.tags["name"] == "vmwHostMessagingConnectionReconfigurationFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Messaging Connection Reconfiguration Failed Event"
        
        return metric
    #============= vmwHostMessagingConfigurationFailedNotificationSkippedEvent ===============================
    if metric.tags["name"] == "vmwHostMessagingConfigurationFailedNotificationSkippedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Messaging Configuration Failed Notification Skipped Event"
        
        return metric
    #============= vmwHostMessagingInfrastructureDownEvent ===============================
    if metric.tags["name"] == "vmwHostMessagingInfrastructureDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host Messaging Infrastructure Down Event"
        
        return metric
    #============= vmwEdgeVMNotRespondingEvent ===============================
    if metric.tags["name"] == "vmwEdgeVMNotRespondingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge VM Responding Event"
        
        return metric
    #============= vmwEdgeUnhealthyEvent ===============================
    if metric.tags["name"] == "vmwEdgeUnhealthyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge Health Event"
        
        return metric
    #============= vmwEdgeVMCommunicationFailureEvent ===============================
    if metric.tags["name"] == "vmwEdgeVMCommunicationFailureEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Edge communication failure Event"
        
        return metric
    #============= vmwNSXEdgeEvent ===============================
    if metric.tags["name"] == "vmwNSXEdgeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Edge Event"
        
        return metric
    #============= vmwPanEvent ===============================
    if metric.tags["name"] == "vmwPanEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Palo Alto Event"
        
        return metric
    #============= vmwPanNsxNotInRegisteredStateEvent ===============================
    if metric.tags["name"] == "vmwPanNsxNotInRegisteredStateEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Palo Alto NSX Registration Event"
        
        return metric
    #============= vmwPanNsxDynamicUpdateDelayedEvent ===============================
    if metric.tags["name"] == "vmwPanNsxDynamicUpdateDelayedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Palo Alto NSX Dynamic Update Event"
        
        return metric
    #============= vmwPanDeviceInDisconnectedStateEvent ===============================
    if metric.tags["name"] == "vmwPanDeviceInDisconnectedStateEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Palo Alto Device Disconnect Event"
        
        return metric
    #============= vmwPanNsxServiceApplianceViewMismatchEvent ===============================
    if metric.tags["name"] == "vmwPanNsxServiceApplianceViewMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Palo Alto Service Device Mismatch Event"
        
        return metric
    #============= vmwPanNsxFabricAgentNotFoundOnHostEvent ===============================
    if metric.tags["name"] == "vmwPanNsxFabricAgentNotFoundOnHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Fabric Agent Not Found Event"
        
        return metric
    #============= vmwPanNsxServiceVMNotFoundOnHostEvent ===============================
    if metric.tags["name"] == "vmwPanNsxServiceVMNotFoundOnHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Palo Alto Service VM Not Found Event"
        
        return metric
    #============= vmwCheckpointEvent ===============================
    if metric.tags["name"] == "vmwCheckpointEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Check Point Event"
        
        return metric
    #============= vmwCheckpointNsxFabricAgentNotFoundOnHostEvent ===============================
    if metric.tags["name"] == "vmwCheckpointNsxFabricAgentNotFoundOnHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Check Point NSX Fabric Agent Not Found Event"
        
        return metric
    #============= vmwCheckpointNsxServiceVMNotFoundOnHostEvent ===============================
    if metric.tags["name"] == "vmwCheckpointNsxServiceVMNotFoundOnHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Check Point Service VM Not Found Event"
        
        return metric
    #============= vmwCheckpointGatewaySicStatusNotCommunicatingEvent ===============================
    if metric.tags["name"] == "vmwCheckpointGatewaySicStatusNotCommunicatingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Check Point Gateway Sic Status Not Communicating Event"
        
        return metric
    #============= vmwCheckpointNsxServiceApplianceViewMismatchEvent ===============================
    if metric.tags["name"] == "vmwCheckpointNsxServiceApplianceViewMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Check Point Service VM Mismatch Event"
        
        return metric
    #============= vmwCriticalHostNotAccessibleEvent ===============================
    if metric.tags["name"] == "vmwCriticalHostNotAccessibleEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Host with VMs running critical services is not accessible"
        
        return metric
    #============= vmwIndexerLagEvent ===============================
    if metric.tags["name"] == "vmwIndexerLagEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Index Lag Event"
        
        return metric
    #============= vmwIPFIXFlowDPPausedEvent ===============================
    if metric.tags["name"] == "vmwIPFIXFlowDPPausedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IPFIX Flow Data Provider Paused Event"
        
        return metric
    #============= vmwGridProcessingStoppedEvent ===============================
    if metric.tags["name"] == "vmwGridProcessingStoppedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Grid Processing Stopped Event"
        
        return metric
    #============= vmwUnableToSendEmailsEvent ===============================
    if metric.tags["name"] == "vmwUnableToSendEmailsEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Unable to Send Emails Event"
        
        return metric
    #============= vmwSMTPNotConfiguredEvent ===============================
    if metric.tags["name"] == "vmwSMTPNotConfiguredEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "SMPT Not Configured Event"
        
        return metric
    #============= vmwSNMPNotConfiguredEvent ===============================
    if metric.tags["name"] == "vmwSNMPNotConfiguredEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "SNMP Not Configured Event"
        
        return metric
    #============= vmwReindexingInProgressEvent ===============================
    if metric.tags["name"] == "vmwReindexingInProgressEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Redindexing In Process Event"
        
        return metric
    #============= vmwNodesVersionMismatchEvent ===============================
    if metric.tags["name"] == "vmwNodesVersionMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Node Version Mismatch Event"
        
        return metric
    #============= vmwNotAllServicesRunningEvent ===============================
    if metric.tags["name"] == "vmwNotAllServicesRunningEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Not All Services Running Event"
        
        return metric
    #============= vmwNotAllServicesHealthyEvent ===============================
    if metric.tags["name"] == "vmwNotAllServicesHealthyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Not All Services Healthy Event"
        
        return metric
    #============= vmwExpandPartitionFailedEvent ===============================
    if metric.tags["name"] == "vmwExpandPartitionFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Expand Partition Failed Event"
        
        return metric
    #============= vmwDiskCleanupFailedEvent ===============================
    if metric.tags["name"] == "vmwDiskCleanupFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Disk Cleanup Failed Event"
        
        return metric
    #============= vmwVaccumFailedEvent ===============================
    if metric.tags["name"] == "vmwVaccumFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Vacuum Failed Event"
        
        return metric
    #============= vmwConfigStoreCleanupFailedEvent ===============================
    if metric.tags["name"] == "vmwConfigStoreCleanupFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Config Store Cleanup Failed Event"
        
        return metric
    #============= vmwHBaseRetentionToolFailedEvent ===============================
    if metric.tags["name"] == "vmwHBaseRetentionToolFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "HBASE Retention Tool Failed Event"
        
        return metric
    #============= vmwMetricStoreUpdaterFailedEvent ===============================
    if metric.tags["name"] == "vmwMetricStoreUpdaterFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Metric Store Updater Failed Event"
        
        return metric
    #============= vmwCollectorLagEvent ===============================
    if metric.tags["name"] == "vmwCollectorLagEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Collecter Lag Event"
        
        return metric
    #============= vmwCollectionLagEvent ===============================
    if metric.tags["name"] == "vmwCollectionLagEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Collection Lag Event"
        
        return metric
    #============= vmwGridProcessingLagEvent ===============================
    if metric.tags["name"] == "vmwGridProcessingLagEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Grid Processing Lag Event"
        
        return metric
    #============= vmwConnectionErrorEvent ===============================
    if metric.tags["name"] == "vmwConnectionErrorEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Connection Error Event"
        
        return metric
    #============= vmwNodeNotActiveEvent ===============================
    if metric.tags["name"] == "vmwNodeNotActiveEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Node Not Active Event"
        
        return metric
    #============= vmwHighDiskUtilizationEvent ===============================
    if metric.tags["name"] == "vmwHighDiskUtilizationEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "High Disk Utilization Event"
        
        return metric
    #============= vmwIndexingAbortedEvent ===============================
    if metric.tags["name"] == "vmwIndexingAbortedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Indexing Aborted Event"
        
        return metric
    #============= vmwUpgradeFailedEvent ===============================
    if metric.tags["name"] == "vmwUpgradeFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Upgrade Failed Event"
        
        return metric
    #============= vmwFlowProcessingSuspendedEvent ===============================
    if metric.tags["name"] == "vmwFlowProcessingSuspendedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Flow Processing Suspended Event"
        
        return metric
    #============= vmwVCNotOnSameProxyEvent ===============================
    if metric.tags["name"] == "vmwVCNotOnSameProxyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VCNOTONSAMEPROXYEVENT"
        
        return metric
    #============= vmwNoDVSAvailableEvent ===============================
    if metric.tags["name"] == "vmwNoDVSAvailableEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NODVSAVAILABLEEVENT"
        
        return metric
    #============= vmwUnknownInfobloxVersionEvent ===============================
    if metric.tags["name"] == "vmwUnknownInfobloxVersionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Infoblox version cannot be determined"
        
        return metric
    #============= vmwUnsupportedInfobloxVersionEvent ===============================
    if metric.tags["name"] == "vmwUnsupportedInfobloxVersionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The version of Infoblox is not supported"
        
        return metric
    #============= vmwIncorrectInfobloxCredentialEvent ===============================
    if metric.tags["name"] == "vmwIncorrectInfobloxCredentialEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Invalid credentials or insufficient privileges"
        
        return metric
    #============= vmwInfobloxRecordLimitExceededEvent ===============================
    if metric.tags["name"] == "vmwInfobloxRecordLimitExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The number of A records fetched from Infoblox exceeds the current limit"
        
        return metric
    #============= vmwWebhookNotRunningEvent ===============================
    if metric.tags["name"] == "vmwWebhookNotRunningEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "WEBHOOKNOTRUNNINGEVENT"
        
        return metric
    #============= vmwIncorrectWebhookConfiguredOnAlertEvent ===============================
    if metric.tags["name"] == "vmwIncorrectWebhookConfiguredOnAlertEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "INCORRECTWEBHOOKCONFIGUREDONALERTEVENT"
        
        return metric
    #============= vmwWebhookNotEnabledOnAlertEvent ===============================
    if metric.tags["name"] == "vmwWebhookNotEnabledOnAlertEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "WEBHOOKNOTENABLEDONALERTEVENT"
        
        return metric
    #============= vmwVRNIContentPackNotInstalledEvent ===============================
    if metric.tags["name"] == "vmwVRNIContentPackNotInstalledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vRNICONTENTPACKNOTINSTALLEDEVENT"
        
        return metric
    #============= vmwUnsupportedVRNIContentPackVersionEvent ===============================
    if metric.tags["name"] == "vmwUnsupportedVRNIContentPackVersionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "UNSUPPORTEDvRNICONTENTPACKVERSIONEVENT"
        
        return metric
    #============= vmwUnsupportedLogInsightVersionEvent ===============================
    if metric.tags["name"] == "vmwUnsupportedLogInsightVersionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "UNSUPPORTEDLOGINSIGHTVERSIONEVENT"
        
        return metric
    #============= vmwComputeManagersNotAddedEvent ===============================
    if metric.tags["name"] == "vmwComputeManagersNotAddedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "COMPUTEMANAGERSNOTADDEDEVENT"
        
        return metric
    #============= vmwComputeManagersNotFoundEvent ===============================
    if metric.tags["name"] == "vmwComputeManagersNotFoundEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "COMPUTEMANAGERSNOTFOUNDEVENT"
        
        return metric
    #============= vmwUnsupportedNSXTVersionEvent ===============================
    if metric.tags["name"] == "vmwUnsupportedNSXTVersionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "UNSUPPORTEDNSXTVERSIONEVENT"
        
        return metric
    #============= vmwNotEmptyNodeEvent ===============================
    if metric.tags["name"] == "vmwNotEmptyNodeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NOTEMPTYNODEEVENT"
        
        return metric
    #============= vmwFlowPhysicalNodeEvent ===============================
    if metric.tags["name"] == "vmwFlowPhysicalNodeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "FLOWPHYSICALNODEEVENT"
        
        return metric
    #============= vmwFlowCollectionErrorEvent ===============================
    if metric.tags["name"] == "vmwFlowCollectionErrorEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "FLOWCOLLECTIONERROREVENT"
        
        return metric
    #============= vmwAWSThrottlingExceptionEvent ===============================
    if metric.tags["name"] == "vmwAWSThrottlingExceptionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "AWSTHROTTLINGEXCEPTIONEVENT"
        
        return metric
    #============= vmwAWSFlowLogAccessDeniedExceptionEvent ===============================
    if metric.tags["name"] == "vmwAWSFlowLogAccessDeniedExceptionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "AWSFLOWLOGACCESSDENIEDEXCEPTIONEVENT"
        
        return metric
    #============= vmwNSXIPFIXStatusMismatchEvent ===============================
    if metric.tags["name"] == "vmwNSXIPFIXStatusMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXIPFIXSTATUSMISMATCHEVENT"
        
        return metric
    #============= vmwNumVMsOrHostsNotFoundEvent ===============================
    if metric.tags["name"] == "vmwNumVMsOrHostsNotFoundEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NUMVMSORHOSTSNOTFOUNDEVENT"
        
        return metric
    #============= vmwUnsupportedNSXVersionEvent ===============================
    if metric.tags["name"] == "vmwUnsupportedNSXVersionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "UNSUPPORTEDNSXVERSIONEVENT"
        
        return metric
    #============= vmwPwdAuthModeDisabledAristaEvent ===============================
    if metric.tags["name"] == "vmwPwdAuthModeDisabledAristaEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "PWDAUTHMODEDISABLEDARISTAEVENT"
        
        return metric
    #============= vmwHostnameResolutionErrorEvent ===============================
    if metric.tags["name"] == "vmwHostnameResolutionErrorEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "HOSTNAMERESOLUTIONERROREVENT"
        
        return metric
    #============= vmwPrimaryNSXNotAddedEvent ===============================
    if metric.tags["name"] == "vmwPrimaryNSXNotAddedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "PRIMARYNSXNOTADDEDEVENT"
        
        return metric
    #============= vmwDataProviderNotRunningEvent ===============================
    if metric.tags["name"] == "vmwDataProviderNotRunningEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DATAPROVIDERNOTRUNNINGEVENT"
        
        return metric
    #============= vmwInvalidResponseFromDatasourceEvent ===============================
    if metric.tags["name"] == "vmwInvalidResponseFromDatasourceEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "INVALIDRESPONSEFROMDATASOURCEEVENT"
        
        return metric
    #============= vmwHostNotReachableEvent ===============================
    if metric.tags["name"] == "vmwHostNotReachableEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "HOSTNOTREACHABLEEVENT"
        
        return metric
    #============= vmwNSXControllerNotFoundEvent ===============================
    if metric.tags["name"] == "vmwNSXControllerNotFoundEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXCONTROLLERNOTFOUNDEVENT"
        
        return metric
    #============= vmwUnexpectedDSTypeOrVersionEvent ===============================
    if metric.tags["name"] == "vmwUnexpectedDSTypeOrVersionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "UNEXPECTEDDSTYPEORVERSIONEVENT"
        
        return metric
    #============= vmwWarnConfigEvent ===============================
    if metric.tags["name"] == "vmwWarnConfigEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "WARNCONFIGEVENT"
        
        return metric
    #============= vmwInvalidConfigEvent ===============================
    if metric.tags["name"] == "vmwInvalidConfigEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "INVALIDCONFIGEVENT"
        
        return metric
    #============= vmwNotFoundEvent ===============================
    if metric.tags["name"] == "vmwNotFoundEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NOTFOUNDEVENT"
        
        return metric
    #============= vmwInsufficientPrivilegesEvent ===============================
    if metric.tags["name"] == "vmwInsufficientPrivilegesEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "INSUFFICIENTPRIVILEGESEVENT"
        
        return metric
    #============= vmwPwdAuthModeDisabledEvent ===============================
    if metric.tags["name"] == "vmwPwdAuthModeDisabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "PWDAUTHMODEDISABLEDEVENT"
        
        return metric
    #============= vmwFailedCredsEncryptEvent ===============================
    if metric.tags["name"] == "vmwFailedCredsEncryptEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "FAILEDCREDSENCRYPTEVENT"
        
        return metric
    #============= vmwSNMPConnectionInvalidEvent ===============================
    if metric.tags["name"] == "vmwSNMPConnectionInvalidEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "SNMPCONNECTIONINVALIDEVENT"
        
        return metric
    #============= vmwUnknownHostEvent ===============================
    if metric.tags["name"] == "vmwUnknownHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "UNKNOWNHOSTEVENT"
        
        return metric
    #============= vmwInvalidCredentialsEvent ===============================
    if metric.tags["name"] == "vmwInvalidCredentialsEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "INVALIDCREDENTIALSEVENT"
        
        return metric
    #============= vmwIncorrectConnectionStringEvent ===============================
    if metric.tags["name"] == "vmwIncorrectConnectionStringEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "INCORRECTCONNECTIONSTRINGEVENT"
        
        return metric
    #============= vmwConnectionRefusedEvent ===============================
    if metric.tags["name"] == "vmwConnectionRefusedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "CONNECTIONREFUSEDEVENT"
        
        return metric
    #============= vmwTimeoutEvent ===============================
    if metric.tags["name"] == "vmwTimeoutEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "TIMEOUTEVENT"
        
        return metric
    #============= vmwFailedEvent ===============================
    if metric.tags["name"] == "vmwFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "FAILEDEVENT"
        
        return metric
    #============= vmwNSXTEvent ===============================
    if metric.tags["name"] == "vmwNSXTEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Event"
        
        return metric
    #============= vmwNSXTVcNotAddedEvent ===============================
    if metric.tags["name"] == "vmwNSXTVcNotAddedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VC Not Added As Data Source Event"
        
        return metric
    #============= vmwNSXTStandaloneHostsEvent ===============================
    if metric.tags["name"] == "vmwNSXTStandaloneHostsEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Standalone hosts added in NSXT Event"
        
        return metric
    #============= vmwLargeSdmsDroppedEvent ===============================
    if metric.tags["name"] == "vmwLargeSdmsDroppedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Data Processing Error"
        
        return metric
    #============= vmwNSXTIPFixDFWStatusNotEnabledEvent ===============================
    if metric.tags["name"] == "vmwNSXTIPFixDFWStatusNotEnabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXTIPFIXDFWSTATUSNOTENABLEDEVENT"
        
        return metric
    #============= vmwNSXTIPFixPortIncorrectEvent ===============================
    if metric.tags["name"] == "vmwNSXTIPFixPortIncorrectEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXTIPFIXPORTINCORRECTEVENT"
        
        return metric
    #============= vmwNSXTIPFixCollectorAndIPFixProfileMismatchEvent ===============================
    if metric.tags["name"] == "vmwNSXTIPFixCollectorAndIPFixProfileMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXTIPFIXCOLLECTORANDIPFIXPROFILEMISMATCHEVENT"
        
        return metric
    #============= vmwNSXTIPFixIPFixProfilePriorityNotZeroEvent ===============================
    if metric.tags["name"] == "vmwNSXTIPFixIPFixProfilePriorityNotZeroEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXTIPFIXIPFIXPROFILEPRIORITYNOTZEROEVENT"
        
        return metric
    #============= vmwNSXTIPFixNoIPFixProfileEvent ===============================
    if metric.tags["name"] == "vmwNSXTIPFixNoIPFixProfileEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXTIPFIXNOIPFIXPROFILEEVENT"
        
        return metric
    #============= vmwNSXTIPFixNoNewCollectorProfileCanBeAddedEvent ===============================
    if metric.tags["name"] == "vmwNSXTIPFixNoNewCollectorProfileCanBeAddedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXTIPFIXNONEWCOLLECTORPROFILECANBEADDEDEVENT"
        
        return metric
    #============= vmwNSXTIPFixNoCollectorProfileEvent ===============================
    if metric.tags["name"] == "vmwNSXTIPFixNoCollectorProfileEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXTIPFIXNOCOLLECTORPROFILEEVENT"
        
        return metric
    #============= vmwNSXTSystemEvent ===============================
    if metric.tags["name"] == "vmwNSXTSystemEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "These are the alarmsevents reported by NSXT. Source Component specifies the entity emmitting this event. It can be ManagerControllerEdge. Combination of fields like Source Component Event Type Severity and message can be used to troubleshoot NSXT appliance.For further information log into NSXT Manager UI and visit Dashboard"
        
        return metric
    #============= vmwNSXTNoUplinkConnectivityEvent ===============================
    if metric.tags["name"] == "vmwNSXTNoUplinkConnectivityEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Tier1 logical router is disconnected from Tier0 router. Networks under this router are not reachable from outside and vice versa.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTRoutingAdvertisementEvent ===============================
    if metric.tags["name"] == "vmwNSXTRoutingAdvertisementEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Routing advertisement is disabled for NSXT Tier1 logical router. Networks under this router are not reachable from outside.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTManagerConnectivityDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTManagerConnectivityDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Node has lost manager connectivity.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTControllerConnectivityDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTControllerConnectivityDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Node is not able to communicate with one or more controllers.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTControllerConnectivityDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTControllerConnectivityDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Node is not able to communicate with any of the controllers.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMtuMismatchEvent ===============================
    if metric.tags["name"] == "vmwNSXTMtuMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The MTU configured on interface(s) of Tier0 logical router do not match with the interface(s) of uplink switchrouter from same L2 network. This may impact network performance.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXEdgeBGPNeighbourDownEvent ===============================
    if metric.tags["name"] == "vmwNSXEdgeBGPNeighbourDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or more BGP neighbours are not in established state.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwAnalyticsEvent ===============================
    if metric.tags["name"] == "vmwAnalyticsEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Meta event for Analytics EventFor more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwAnalyticsOutlierEvent ===============================
    if metric.tags["name"] == "vmwAnalyticsOutlierEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Meta event for Outlier EventsFor more details please log into vRNI navigate to Settings  Events."
        
        return metric
    #============= vmwAnalyticsThresholdEvent ===============================
    if metric.tags["name"] == "vmwAnalyticsThresholdEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Meta event for Threshold EventsFor more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVMCEvent ===============================
    if metric.tags["name"] == "vmwVMCEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Meta event for VMC Events.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwPolicyManagerVrniDfwIPFixCollectorAbsent ===============================
    if metric.tags["name"] == "vmwPolicyManagerVrniDfwIPFixCollectorAbsent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Network Insight IPFIX Collector is absent on VMC Policy Manager.For more details please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwPolicyManagerNoDfwIPFixProfile ===============================
    if metric.tags["name"] == "vmwPolicyManagerNoDfwIPFixProfile":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "DFW IPFIX Profile is absent on VMC Policy Manager.For more details please log into vRNI navigate to Settings  Events."
        
        return metric
    #============= vmwNSXTExcludedVmFlowEvent ===============================
    if metric.tags["name"] == "vmwNSXTExcludedVmFlowEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or more VMs are not protected by NSXT DFW firewall. Network Insight will not receive IPFIX flows for these VMs.Remove the relevant logical switches logical ports or security groups from the NSXT firewall exclusion list to enable flows.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTDoubleVlanTaggingEvent ===============================
    if metric.tags["name"] == "vmwNSXTDoubleVlanTaggingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Communication will be disrupted because Vlan on uplink port of Tier 0 router is different than Vlan on the external gateway.Vlan is misconfigured on the tier0 router. Make sure Vlan matches with the Vlan on the external gateway.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTNoTzAttachedOnTnEvent ===============================
    if metric.tags["name"] == "vmwNSXTNoTzAttachedOnTnEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Transport node is not attached to any transport zone. VMs might loose connectivity because of this.Ensure that the transport node is attached to some transport zone.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTVtepDeleteEvent ===============================
    if metric.tags["name"] == "vmwNSXTVtepDeleteEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "All vteps are deleted from the transport node. VMs might loose connectivity because of this.Make sure vtepsvmknics are not deleted from the transport node. You may check all available vtepsvmknics in NSXTFabric NodesTransport NodeMonitor of each of the impacted transport nodes.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwDuplicateL3SwitchEvent ===============================
    if metric.tags["name"] == "vmwDuplicateL3SwitchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Same Switch or Router is added with different IPs. VM to VM path may not be generated.Delete duplicate Switches or Routers from Data Source.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLBPoolMemberDownEvent ===============================
    if metric.tags["name"] == "vmwLBPoolMemberDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when pool member of load balancer is down.Ensure that pool member has not been disabled by the administrator.Ensure that poolpoolmember uses the correct Health Monitors which are getting required responses from the backend server.Ensure that backend server used by this pool member is functional.For more details log into Load Balancer UI navigate to Local Traffic  Pools  Pools List.Also check documentation at httpssupport.f5.comcsparticleK12531Alternatively you can log into vRNI UI and search Pool Member where state = DISABLED.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLBPoolDownEvent ===============================
    if metric.tags["name"] == "vmwLBPoolDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when pool of load balancer is down.Ensure that pool has at least one functional pool member.For more details log into Load Balancer UI navigate to Local Traffic  PoolsAlso check documentation at httpssupport.f5.comcsparticleK12531For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLBPoolEmptyEvent ===============================
    if metric.tags["name"] == "vmwLBPoolEmptyEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when pool of load balancer is empty.Ensure that pool has at least one pool member.For more details log into Load Balancer UI navigate to Local Traffic  PoolsAlso check documentation at httpssupport.f5.comcsparticleK12531Alternatively you can log into vRNI and search Pool where PoolMembers Count = 0.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLBPoolMemberVMDownEvent ===============================
    if metric.tags["name"] == "vmwLBPoolMemberVMDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when VM associated with pool member of load balancer is down.Check if VM associated with pool member is powered on and running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLBVirtualServerDisableEvent ===============================
    if metric.tags["name"] == "vmwLBVirtualServerDisableEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when virtual server of load balancer is disabled.To enable virtual server open load balancer GUI and check virtual server state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLBServiceNodeIPNotFoundEvent ===============================
    if metric.tags["name"] == "vmwLBServiceNodeIPNotFoundEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when no NIC associated with IP of service node of load balancer is found.Ensure that VM which has IP of Service Node exist.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLBServiceNodeMultipleNicFoundEvent ===============================
    if metric.tags["name"] == "vmwLBServiceNodeMultipleNicFoundEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when multiple NICs associated with IP of service node of load balancer are found.For more details about this event please log into vRNI navigate to Settings  Events."
        
        return metric
    #============= vmwKubernetesInsufficientPrivilegesEvent ===============================
    if metric.tags["name"] == "vmwKubernetesInsufficientPrivilegesEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One or more Kubernetes Cluster Service Accounts do not have sufficient privileges.Please verify that all Kubernetes Cluster Service Accounts has List and Watch privileges.Refer  httpskubernetes.iodocsreferenceaccessauthnauthzrbacserviceaccountpermissionsFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwPKSKubernetesUnknownHostEvent ===============================
    if metric.tags["name"] == "vmwPKSKubernetesUnknownHostEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Please verify the Kubernetes Cluster API Servers are reachable from Collector VM.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwDatasourceIdentificationChangedEvent ===============================
    if metric.tags["name"] == "vmwDatasourceIdentificationChangedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The data source identity information such as certificate or the key has changed.Reverify the identity information on data source page in vRNI.System will auto accept the new identification. If issue persists for more than an hour please contact support.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwArkinApplicationMemberLimitEvent ===============================
    if metric.tags["name"] == "vmwArkinApplicationMemberLimitEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Number of members in application exceeds supported limit.Reduce number of members in the application.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTSwitchIpfixEnabledEvent ===============================
    if metric.tags["name"] == "vmwNSXTSwitchIpfixEnabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Network Insight does not support the IPFIX flow data from NSXT Switches. It is configured to send IPFIX data to one of the Network Insight Collector VM. It may have corrupted existing flow data in the system.Remove Network Insight Collector VM IP Address from the NSXT Switch collector profiles which are used in NSXT Switch IPFIX profiles.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUANIFileNotProvidedEvent ===============================
    if metric.tags["name"] == "vmwUANIFileNotProvidedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Configuration file required by Generic Routers  Switches Data Source has not been provided while data source creation. To resolve this issue please go to vRNI web UI under settings page edit intended Generic Routers  Switches Data Source and add configuration file.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUANIFileDoesNotExistEvent ===============================
    if metric.tags["name"] == "vmwUANIFileDoesNotExistEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Configuration file required by Generic Routers  Switches Data Source has been deleted manually or moved. To resolve this issue please go to vRNI web UI under settings page edit intended Generic Routers  Switches Data Source and add configuration file.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTStandaloneHostsWithoutVcEvent ===============================
    if metric.tags["name"] == "vmwNSXTStandaloneHostsWithoutVcEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "vCenter managing one or more fabric nodes in NSXT is not added as a data source in vRNI. Virtual Machines on those hosts will not be visible in vRNI.Please add the vCenter server managing the standalone hosts as a datasource into vRNI at Settings  Accounts and Data Sources  Add Source  VMware vCenterFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwApplianceNotConfiguredEvent ===============================
    if metric.tags["name"] == "vmwApplianceNotConfiguredEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Collector VM configuration is incomplete.To reconfigure proxy please run setup CLI from console mode. httpsdocs.vmware.comenVMwarevRealizeNetworkInsight3.8com.vmware.vrni.cli.docGUIDB48AD03A5FC843969C279523307C688C.htmlFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwSwitchPortOperationalDownEvent ===============================
    if metric.tags["name"] == "vmwSwitchPortOperationalDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Switchport operational status change detected. It is operationally down. This may impact the network traffic on the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwRouterInterfaceOperationalDownEvent ===============================
    if metric.tags["name"] == "vmwRouterInterfaceOperationalDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Router interface operational status change detected. It is operationally down. This may impact the network traffic on the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceGenericEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceGenericEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This is generic representation for events on Underlay device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceFexOfflineEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceFexOfflineEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A FEX has gone offline on the device. Please check the FEX status on the device. This may impact the network traffic on the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceFanMalFunctionEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceFanMalFunctionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A fan on the device is not either removed or not working. It may impact the overheating of the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceTemperatureThresholdExceededEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceTemperatureThresholdExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A module on the device has reported majorminor temperature alarm. Please check the sensor mentioned in the event message on the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceFexFanMalFunctionEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceFexFanMalFunctionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A fan on the FEX chassis is either removed or not working. It may impact the overheating of the FEX device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceFexPsMalFunctionEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceFexPsMalFunctionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A Power supply on the FEX chassis is either removed or not working. It may impact the FEX device functionality.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceModuleMalFunctionEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceModuleMalFunctionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A moduleline card on the device is either removed or not working. This may impact the network traffic on the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDevicePsMalFunctionEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDevicePsMalFunctionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A Power supply on the device is either removed or not working. It may impact the device functionality.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceBfdSessionRemovedEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceBfdSessionRemovedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A BFD session is deleted on the device. This will result in routing table changes and may impact the network traffic on the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwUnderlayDeviceLldpNeighbourRemovedEvent ===============================
    if metric.tags["name"] == "vmwUnderlayDeviceLldpNeighbourRemovedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A LLDP neighbour is removed from the device. This will result in the network topology changes and may impact the network traffic on the device.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwThresholdExceededEventDataSourceCpuUsage ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDataSourceCpuUsage":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A thresholdcrossing CPU usage detected on host FRUs.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwThresholdExceededEventDataSourceMemoryUsage ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDataSourceMemoryUsage":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A thresholdcrossing memory usage detected on host FRUs.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwThresholdExceededEventDataSourceTemperature ===============================
    if metric.tags["name"] == "vmwThresholdExceededEventDataSourceTemperature":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A thresholdcrossing temperature detected on host FRUs.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwDeploymentDefMismatchEvent ===============================
    if metric.tags["name"] == "vmwDeploymentDefMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Capacity configuration is mismatched. Please reconfigure.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxtLatencyServiceConfigMismatchEvent ===============================
    if metric.tags["name"] == "vmwNsxtLatencyServiceConfigMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Latency Service Config configured on NSXT is different from this Network Insight deployment. As a result Network Insight is not receiving Latency information from NSXT.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxtLatencyNodeGroupMismatchEvent ===============================
    if metric.tags["name"] == "vmwNsxtLatencyNodeGroupMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Latency Node Group configured on NSXT is different from this Network Insight deployment. As a result Network Insight is not receiving Latency information from NSXT.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxtLatencyStatProfileMismatchEvent ===============================
    if metric.tags["name"] == "vmwNsxtLatencyStatProfileMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The Latency Stat profile configured on NSXT is different from this Network Insight deployment. As a result Network Insight is not receiving Latency information from NSXT.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwHybridConnectBgpStatusDownEvent ===============================
    if metric.tags["name"] == "vmwHybridConnectBgpStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when BGP status is Down.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTClusterBackUpDisabledEvent ===============================
    if metric.tags["name"] == "vmwNSXTClusterBackUpDisabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Manager backup is not scheduled.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTDFWFirewallDisabledEvent ===============================
    if metric.tags["name"] == "vmwNSXTDFWFirewallDisabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Distributed Firewall is disabled in the NSXT Manager.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTComputeManagerConnectionStatusNotUpEvent ===============================
    if metric.tags["name"] == "vmwNSXTComputeManagerConnectionStatusNotUpEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Compute Manager Connection status is not up. For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLogicalSwitchAdminStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTLogicalSwitchAdminStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Logical Switch Admin Status is Down.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLogicalPortOperationalStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTLogicalPortOperationalStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Logical Port Operational Status is Down. This could cause a communication failure between two virtual interfaces (VIFs) that are connected to the same logical switch for example you cannot ping one VM from another.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLogicalPortOperationalStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTLogicalPortOperationalStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Logical Port Operational Status is Unknown. This could cause a communication failure between two virtual interfaces (VIFs) that are connected to the same logical switch for example you cannot ping one VM from another.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLogicalPortReceivedPacketDropEvent ===============================
    if metric.tags["name"] == "vmwNSXTLogicalPortReceivedPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Received packets are getting dropped on the NSXT Logical Port and associated entities might get affected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLogicalPortTransmittedPacketDropEvent ===============================
    if metric.tags["name"] == "vmwNSXTLogicalPortTransmittedPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Transmitted packets are getting dropped on the NSXT Logical Port and associated entities might get affected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLogicalSwitchReceivedPacketDropEvent ===============================
    if metric.tags["name"] == "vmwNSXTLogicalSwitchReceivedPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Received packets are getting dropped on the NSXT Logical Switch and associated entities might get affected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLogicalSwitchTransmittedPacketDropEvent ===============================
    if metric.tags["name"] == "vmwNSXTLogicalSwitchTransmittedPacketDropEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Transmitted packets are getting dropped on the NSXT Logical Switch and associated entities might get affected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTRxPacketDropOnMPNicEvent ===============================
    if metric.tags["name"] == "vmwNSXTRxPacketDropOnMPNicEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Received packets are getting dropped on NSXT Management Nodes network interface. This may impact the network traffic related to NSXT management cluster.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTRxPacketDropOnEdgeTnNicEvent ===============================
    if metric.tags["name"] == "vmwNSXTRxPacketDropOnEdgeTnNicEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Received packets are getting dropped on NSXT Edge Nodes network interface. This may impact the network traffic of edge cluster.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTRxPacketDropOnHostTnNicEvent ===============================
    if metric.tags["name"] == "vmwNSXTRxPacketDropOnHostTnNicEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Received packets are getting dropped on NSXT Host Nodes network interface. This may impact the network traffic on ESXi Host.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTTxPacketDropOnMPNicEvent ===============================
    if metric.tags["name"] == "vmwNSXTTxPacketDropOnMPNicEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Transmitted packets are getting dropped on NSXT Management Nodes network interface. This may impact the network traffic related to NSXT management cluster.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTTxPacketDropOnEdgeTnNicEvent ===============================
    if metric.tags["name"] == "vmwNSXTTxPacketDropOnEdgeTnNicEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Transmitted packets are getting dropped on NSXT Edge Nodes network interface. This may impact the network traffic of edge cluster.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTTxPacketDropOnHostTnNicEvent ===============================
    if metric.tags["name"] == "vmwNSXTTxPacketDropOnHostTnNicEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Transmitted packets are getting dropped on NSXT Host Nodes network interface. This may impact the network traffic on ESXi Host.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceClusterManagerStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceClusterManagerStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Cluster Manager Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceCmInventoryStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceCmInventoryStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely CM Inventory Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceControllerStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceControllerStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Controller Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceDataStoreStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceDataStoreStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely DataStore Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceHttpStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceHttpStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely HTTP Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceInstallUpgradeEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceInstallUpgradeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Install Upgrade Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceLiagentStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceLiagentStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely LI Agent Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceManagerStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceManagerStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Manager Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceMgmtPlaneBusStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceMgmtPlaneBusStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Management Plane Bus Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceMigrationCoordinatorStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceMigrationCoordinatorStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Migration Coordinator Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceNodeMgmtStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceNodeMgmtStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Node Management Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceNodeStatsStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceNodeStatsStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Node Statistics has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceNSXMessageBusStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceNSXMessageBusStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Message Bus Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceNSXPlatformClientStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceNSXPlatformClientStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Platform Client Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceNSXUpgradeAgentStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceNSXUpgradeAgentStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Upgrade Agent Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceNTPStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceNTPStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely NTP Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServicePolicyStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServicePolicyStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Policy Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceSearchStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceSearchStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Search Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceSNMPStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceSNMPStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely SNMP Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceSSHStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceSSHStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely SSH Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceSyslogStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceSyslogStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Syslog Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceTelemetryStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceTelemetryStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely Telemetry Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeServiceUIServiceStatusEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeServiceUIServiceStatusEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "One of the Services of the NSXT Management Node namely UI Service has stopped running.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVMCHostPerClusterLimitExceededEvent ===============================
    if metric.tags["name"] == "vmwVMCHostPerClusterLimitExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when the number of Hosts per Cluster in a VMC SDDC exceeds limit.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVMCVMPerHostLimitExceededEvent ===============================
    if metric.tags["name"] == "vmwVMCVMPerHostLimitExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when the number of VMs per Host in a VMC SDDC exceeds limits.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVMCClusterLimitExceededEvent ===============================
    if metric.tags["name"] == "vmwVMCClusterLimitExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when the number of Clusters in a VMC SDDC exceeds limits.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwProtectionEvent ===============================
    if metric.tags["name"] == "vmwProtectionEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This event is raised when any system protection limit is exceededFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwSwitchPortUptimeThresholdRecededEvent ===============================
    if metric.tags["name"] == "vmwSwitchPortUptimeThresholdRecededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Up time of switch is less than expected.Check the operational status of the specified switch port.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwFdbConfigStoreCleanupFailedEvent ===============================
    if metric.tags["name"] == "vmwFdbConfigStoreCleanupFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Foundation Database (FDB) Config Store Cleanup Failed Event.Data Retention (Config Store Maintenance) service is not healthy.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwDiskAllocationInsufficientEvent ===============================
    if metric.tags["name"] == "vmwDiskAllocationInsufficientEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Appliance Disk not configured according to Disk Guidance. httpsdocs.vmware.comenVMwarevRealizeNetworkInsight5.1com.vmware.vrni.using.docGUIDC96E9C786FA249EB97918967A89B7698.html     For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTControllerNodeToControlClusterConnectivityEvent ===============================
    if metric.tags["name"] == "vmwNSXTControllerNodeToControlClusterConnectivityEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT controller node has no control cluster connectivity.Check if the node has proper network connectivity with control cluster.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTControllerNodeToMgmtPlaneConnectivityEvent ===============================
    if metric.tags["name"] == "vmwNSXTControllerNodeToMgmtPlaneConnectivityEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT controller node has no management plane connectivity.Check if the node has proper network connectivity with management plane.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTMPNodeToMgmtClusterConnectivityEvent ===============================
    if metric.tags["name"] == "vmwNSXTMPNodeToMgmtClusterConnectivityEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT management node has no management cluster connectivity.Check if the node has proper network connectivity with management cluster.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwBigIpInsufficientShellAccessEvent ===============================
    if metric.tags["name"] == "vmwBigIpInsufficientShellAccessEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "No access to shell(ssh port 22) for F5 Load Balancer. Network Insight will not be able to fetch any information required for visibility.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwBigIpInsufficientPartitionAccessEvent ===============================
    if metric.tags["name"] == "vmwBigIpInsufficientPartitionAccessEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Insufficient Partition Access for F5 Load Balancer. Network Insight will not be able to fetch any information required for visibility.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwBigIpInsufficientRoleEvent ===============================
    if metric.tags["name"] == "vmwBigIpInsufficientRoleEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Insufficient Role for F5 Load Balancer. Network Insight will not be able to fetch any information required for visibility. For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLatencyCollectorMismatchEvent ===============================
    if metric.tags["name"] == "vmwNSXTLatencyCollectorMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The collector configured on NSXT is different from this Network Insight deployment. As a result Network Insight is not receiving Latency information from NSXT. For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLatencyNoBFDProfileEvent ===============================
    if metric.tags["name"] == "vmwNSXTLatencyNoBFDProfileEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT no BFD profile configured Event.BFD profile was deleted on NSXT Manager after Virtual infrastructure Latency was enabled at Network Insight. As a result Network Insight is not assigning BFD profile on Transport zone. Network Insight will not receive Latency information from new transport zones.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLatencyMoreBFDProfileEvent ===============================
    if metric.tags["name"] == "vmwNSXTLatencyMoreBFDProfileEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT more than one BFD profile configured Event.There are multiple BFD profiles in the NSXT Manager. As a result Network Insight is not assigning correct BFD profile on Transport zone. Network Insight will not receive Latency information from new Transport zones.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTLatencyNotEnabledEvent ===============================
    if metric.tags["name"] == "vmwNSXTLatencyNotEnabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT latency collection is not enabled.Latency collection was disabled in the NSXT Manager after it was enabled by Network Insight. As a result Network Insight is not receiving latency information from the NSXT.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwHardwareVTEPMismatchEvent ===============================
    if metric.tags["name"] == "vmwHardwareVTEPMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Hardware Gateway Bindings Mismatch between NSX and switch.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwHardwareVTEPPortDownEvent ===============================
    if metric.tags["name"] == "vmwHardwareVTEPPortDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Hardware Gateway Binding Switch Port is down.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXVLatencyNoDataEvent ===============================
    if metric.tags["name"] == "vmwNSXVLatencyNoDataEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Network Insight Collector VM is not receiving network latency metrics from host.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwKubernetesBaseEvent ===============================
    if metric.tags["name"] == "vmwKubernetesBaseEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Event reported by kubernetes cluster. This is Kubernetes System Event.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVMCVMLimitExceededEvent ===============================
    if metric.tags["name"] == "vmwVMCVMLimitExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Number of VMs in VMC SDDC exceeds limit.This event is raised when the number of VMs in a VMC SDDC exceeds limits.Delete VMs that are not in use.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVMCHostLimitExceededEvent ===============================
    if metric.tags["name"] == "vmwVMCHostLimitExceededEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Number of Hosts in VMC SDDC exceeds limit.This event is raised when the number of Hosts in a VMC SDDC exceeds limits.Contact VMC Support to increase the host limit within the VMC SDDC.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudEdgeDegradedTransQoeEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudEdgeDegradedTransQoeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Edge Transactional QOE has degraded.Verify that the Edge is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudEdgeDegradedVideoQoeEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudEdgeDegradedVideoQoeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Edge Video QOE has Degraded.Verify that the Edge is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudEdgeDegradedVoiceQoeEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudEdgeDegradedVoiceQoeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Edge Voice QOE has Degraded.Verify that the Edge is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudEdgeDownEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudEdgeDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Edge is not connected.Verify that the VeloCloud Edge is UP.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudLinkLostPacketEventRx ===============================
    if metric.tags["name"] == "vmwVeloCloudLinkLostPacketEventRx":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Received Packet Loss observed on VeloCloud Link.Verify that the Link is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudLinkDegradedTransQoeEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudLinkDegradedTransQoeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Link Transactional QOE has Degraded.Verify that the Link is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudLinkLostPacketEventTx ===============================
    if metric.tags["name"] == "vmwVeloCloudLinkLostPacketEventTx":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Transmitted Packet Loss observed on VeloCloud Link.Verify that the Link is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudLinkDegradedVideoQoeEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudLinkDegradedVideoQoeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Link Video QOE has Degraded.Verify that the Link is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudLinkDegradedVoiceQoeEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudLinkDegradedVoiceQoeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Link Voice QOE has Degraded.Verify that the Link is in healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVeloCloudLinkDownEvent ===============================
    if metric.tags["name"] == "vmwVeloCloudLinkDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "VeloCloud Edge is not connected.Verify that the VeloCloud Link is UP.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeMgmtConnectivityStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeMgmtConnectivityStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node has lost connectivity with NSXT Manager node.Please ensure all the interfaces connecting the NSXT Transport Node to manager are up.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeCtlrConnectivityStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeCtlrConnectivityStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Node Controller connectivity is Unknown.NSXT Manager cant determine the status of the Edge Transport Nodes connectivity with controller nodesPlease ensure all the interfaces connecting the NSXT Transport Node to manager are up.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeCtlrConnectivityStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeCtlrConnectivityStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Node is not able to communicate with any of the controllers.NSXT Host Transport Node has lost connectivity with all the controller nodesPlease ensure all the interfaces connecting the NSXT Transport Node to controller nodes are up.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeCtlrConnectivityStatusDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeCtlrConnectivityStatusDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Node is not able to to communicate with one or more controllers.NSXT Host Transport Node has lost connectivity with some (but not all) of the controller nodesPlease ensure all the interfaces connecting the NSXT Transport Node to controller nodes are up.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeCtlrConnectivityStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeCtlrConnectivityStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Node Controller connectivity is Unknown.NSXT Manager cant determine the status of the Host Transport Nodes connectivity with controller nodesPlease ensure all the interfaces connecting the NSXT Transport Node to controller nodes are up.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodePnicStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodePnicStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Pnic Status is Down.All the pNICs of the NSXT Host transport Node are down.Please check if all the pNICs are properly connected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodePnicStatusDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodePnicStatusDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Pnic Status is DegradedSome of the pNICs of the NSXT Host transport Node are down.Please check if all the pNICs are properly connected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodePnicStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodePnicStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Pnic Status is Unknown.NSXT Manager cant determine the status of some or all of the pNICs of the NSXT Host Transport NodePlease check if all the pNICs are properly connected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodePnicStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodePnicStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Pnic Status is Down.All the pNICs of the NSXT Edge transport Node are down.Please check if all the pNICs are properly connected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodePnicStatusDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodePnicStatusDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Pnic Status is Degraded.Some of the pNICs of the NSXT Edge transport Node are down.Please check if all the pNICs are properly connected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodePnicStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodePnicStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Pnic Status is Unknown.NSXT Manager cant determine the status of some or all of the pNICs of the NSXT Edge Transport NodePlease check if all the pNICs are properly connected.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeTunnelStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeTunnelStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Tunnel Status is Down.All the tunnel interfaces associated to the NSXT Host transport Node are down.Please check the status of the tunnel interfaces for this NSXT Transport NodeFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeTunnelStatusDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeTunnelStatusDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Tunnel Status is Degraded.Some of the tunnel interfaces associated to the NSXT Host transport Node are down.Please check the status of the tunnel interfaces for this NSXT Transport NodeFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeTunnelStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeTunnelStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Tunnel Status is Unknown.NSXT Manager cant determine the status of some or all of the tunnel interfaces associated to the NSXT Host Transport Node.Please check the status of the tunnel interfaces for this NSXT Transport NodeFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeTunnelStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeTunnelStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Tunnel Status is Down.All the tunnel interfaces associated to the NSXT Edge transport Node are down.Please check the status of the tunnel interfaces for this NSXT Transport NodeFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeTunnelStatusDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeTunnelStatusDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Tunnel Status is Degraded.Some of the tunnel interfaces associated to the NSXT Edge transport Node are down.Please check the status of the tunnel interfaces for this NSXT Transport NodeFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeTunnelStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeTunnelStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Tunnel Status is Unknown.NSXT Manager cant determine the status of some or all of the tunnel interfaces associated to the NSXT Edge Transport NodePlease check the status of the tunnel interfaces for this NSXT Transport NodeFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Rollup Status is Down.Some or all of the pNICs management connection control connections tunnel statuses agent statuses of NSXT Host Transport Node are down.Please check the status of the pNICs management  control connections tunnels and agents for this NSXT Transport Node.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeStatusDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeStatusDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Rollup Status is Degraded.Some or all of the pNICs management connection control connections tunnel statuses agent statuses of NSXT Host Transport Node are in degraded state.Please check the status of the pNICs management  control connections tunnels and agents for this NSXT Transport Node.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Transport Node Rollup Status is Unknown.NSXT Manager cant determine the status of some or all of the pNICs management connection control connections tunnel statuses agent statuses of NSXT Host Transport Node.Please check the status of the pNICs management  control connections tunnels and agents for this NSXT Transport Node.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeStatusDownEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeStatusDownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Rollup Status is Down.Some or all of the pNICs management connection control connections tunnel statuses agent statuses of NSXT Edge Transport Node are down.Please check the status of the pNICs management  control connections tunnels and agents for this NSXT Transport Node.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeStatusDegradedEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeStatusDegradedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Rollup Status is Degraded.Some or all of the pNICs management connection control connections tunnel statuses agent statuses of NSXT Edge Transport Node are in degraded state.Please check the status of the pNICs management  control connections tunnels and agents for this NSXT Transport Node.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeStatusUnknownEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeStatusUnknownEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Transport Node Rollup Status is Unknown.NSXT Manager cant determine the status of some or all of the pNICs management connection control connections tunnel statuses agent statuses of NSXT Edge Transport Node.Please check the status of the pNICs management  control connections tunnels and agents for this NSXT Transport Node.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxiApplianceAvailableEvent ===============================
    if metric.tags["name"] == "vmwNsxiApplianceAvailableEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Intelligence Appliance is deployed within NSXT. NSXI data collection on the NSXT Data source can now be enabled.Please visit to vRNI  Settings  Data Sources  NSXT data souces to enable this data collection.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxiSubscriptionCreateFailedEvent ===============================
    if metric.tags["name"] == "vmwNsxiSubscriptionCreateFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Enabling data collection from NSX Intelligence was failed.Please check the NSXIntelligence appliance and ensure it is reachable and in a healthy state.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxiSubscriptionDeleteFailedEvent ===============================
    if metric.tags["name"] == "vmwNsxiSubscriptionDeleteFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Cleanup of NSX Intelligence appliance failed.Please check the NSXIntelligence appliance and ensure it is reachable and in a healthy stateFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxiSubscriptionUpdateFailedEvent ===============================
    if metric.tags["name"] == "vmwNsxiSubscriptionUpdateFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Failed to initiate data collection from NSX Intelligence.Please check the NSXIntelligence appliance and ensure it is reachable and in a healthy stateFor more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxiSslHandshakeFailedEvent ===============================
    if metric.tags["name"] == "vmwNsxiSslHandshakeFailedEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSX Intelligence SSL Handshake Failed.Please check the SSL certificates configured on NSX Intelligence Appliance.For more details about this event please log into vRNI navigate to Settings  Events  Alert Definitions page"
        
        return metric
    #============= vmwAnalyticsThresholdCompositeEvent ===============================
    if metric.tags["name"] == "vmwAnalyticsThresholdCompositeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Alert generated as a result of the specified combination of metric crosses the upper or lower bound specified in the configuration.Please check details and remediation steps mentioned in alert.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwAnalyticsThresholdCompositeProblemEvent ===============================
    if metric.tags["name"] == "vmwAnalyticsThresholdCompositeProblemEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Alert generated as a result of the specified combination of metric crosses the upper or lower bound specified in the configuration.Please check details and remediation steps mentioned in alert.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwLicenseExpiredEvent ===============================
    if metric.tags["name"] == "vmwLicenseExpiredEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "License of this appliance has expired. Please apply a valid license to continue the data collection.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwInGracePeriodEvent ===============================
    if metric.tags["name"] == "vmwInGracePeriodEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Applicance license is in Grace Period. Add valid licenses before grace period ends to continue the data collection.This event will remain open till it is fixed.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwFailedDatasourceOperationEvent ===============================
    if metric.tags["name"] == "vmwFailedDatasourceOperationEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Data Source Update Operation Failed. Details of the data source and failed operation are mentioned in the event vmwOperatorDesc field.Please check correctness of input data while performing update operations to a data source.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNsxtNotificationWebhookDisabledEvent ===============================
    if metric.tags["name"] == "vmwNsxtNotificationWebhookDisabledEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "The webhook configured to receive push notifications from NSXT is no longer present in the data source. As a result notifications received by Network Insight might be delayed.Please log into NSXT and enable notifications for vRNI.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNatRuleLargeSubnetEvent ===============================
    if metric.tags["name"] == "vmwNatRuleLargeSubnetEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "IP address mentioned in the NAT Rules have a subnet of size greater than 16. Flows will be impacted due to large subnet size.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTHostNodeMaintenanceModeEvent ===============================
    if metric.tags["name"] == "vmwNSXTHostNodeMaintenanceModeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Host Node is in Maintenance Mode.For uninterrupted operations please disable Maintenance Mode on this Host Node if maintenance activity is completed.This event will be closed once host is host is out of maintenance mode.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNSXTEdgeNodeMaintenanceModeEvent ===============================
    if metric.tags["name"] == "vmwNSXTEdgeNodeMaintenanceModeEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "NSXT Edge Node is in Maintenance Mode.For uninterrupted operations please disable Maintenance Mode on this edge node if maintenance activity is completed.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwSDWanLinkTrafficThresholdEvent ===============================
    if metric.tags["name"] == "vmwSDWanLinkTrafficThresholdEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "SDWAN Link Traffic exceeded the threshold limit configured. Link details are available in event description vmwOperatorDesc field.Please check the Traffic Utilization section on VeloCloud Edge to get the visibility of Applications and clients for the Link.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwVMCCapacityThresholdBreachEvent ===============================
    if metric.tags["name"] == "vmwVMCCapacityThresholdBreachEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This alert is raised for VMC on AWS when thresholds of an entity e.g Firewall Rule exceeds.Please log in to VMC navigate to listings page of entity type mentioned in the event description vmwOperatorDesc field. Then delete any unused entities to ensure uninterrupted operations.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNativeVlanMismatchEvent ===============================
    if metric.tags["name"] == "vmwNativeVlanMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Native VLAN ID configuration of the ports on each link should match.Please check mismatch mentioned in the event vmwAffectedObject field and correct the configuration.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwNativeVlanTaggingMismatchEvent ===============================
    if metric.tags["name"] == "vmwNativeVlanTaggingMismatchEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Native VLAN tagging of the ports on each link should match.Please check mismatch mentioned in the event and correct the configuration.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    #============= vmwSnapshotNotBuildingEvent ===============================
    if metric.tags["name"] == "vmwSnapshotNotBuildingEvent":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwEventSeverity")
        vb2 = metric.fields.get("vmwAffectedObject")
        vb3 = metric.fields.get("vmwOperatorDesc")
        vb4 = metric.fields.get("vmwVrniUrl")
        vb5 = metric.fields.get("vmwTimestamp")
        vb6 = metric.fields.get("vmwEventName")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Unable to load latest network map. The last successful network map snapshot was taken over 6 hours ago.Network map functionality may show obsolete state. If this event persists please contact VMware support.For more details about this event please log into vRNI navigate to Settings  Events"
        
        return metric
    
    return metric 
'''