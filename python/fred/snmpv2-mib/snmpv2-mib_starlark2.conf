[[processors.starlark]]
# MIB filename - SNMPv2-MIB.txt
# MIB name - SNMPv2-MIB
source = '''
def apply(metric):

    #============= coldStart ===============================
    if metric.tags["name"] == "coldStart":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF SNMPv3 Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A coldStart trap signifies that the SNMP entitysupporting a notification originator application isreinitializing itself and that its configuration mayhave been altered."
        
    #============= warmStart ===============================
    if metric.tags["name"] == "warmStart":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF SNMPv3 Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A warmStart trap signifies that the SNMP entitysupporting a notification originator applicationis reinitializing itself such that its configurationis unaltered."
        
    #============= authenticationFailure ===============================
    if metric.tags["name"] == "authenticationFailure":
        
        # There are no varbinds mapped for the trap.
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IETF SNMPv3 Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "An authenticationFailure trap signifies that the SNMPentity has received a protocol message that is notproperly authenticated.  While all implementationsof SNMP entities MAY be capable of generating thistrap the snmpEnableAuthenTraps object indicateswhether this trap will be generated."
        
    
    return metric 
'''