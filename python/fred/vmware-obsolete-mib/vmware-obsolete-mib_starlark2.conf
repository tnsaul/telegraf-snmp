[[processors.starlark]]
# MIB filename - VMWARE-OBSOLETE-MIB.mib
# MIB name - VMWARE-OBSOLETE-MIB
source = '''
def apply(metric):

    #============= vmPoweredOn ===============================
    if metric.tags["name"] == "vmPoweredOn":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine is powered ON from a suspended or a powered off state."
        
    #============= vmPoweredOff ===============================
    if metric.tags["name"] == "vmPoweredOff":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine is powered OFF."
        
    #============= vmHBLost ===============================
    if metric.tags["name"] == "vmHBLost":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine detects a loss in guest heartbeat."
        
    #============= vmHBDetected ===============================
    if metric.tags["name"] == "vmHBDetected":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine detects or regains the guest heartbeat."
        
    #============= vmSuspended ===============================
    if metric.tags["name"] == "vmSuspended":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vmwVmID")
        vb2 = metric.fields.get("vmwVmConfigFilePath")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when a virtual machine is suspended."
        
    #============= vpxdTrap ===============================
    if metric.tags["name"] == "vpxdTrap":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("vpxdTrapType")
        vb2 = metric.fields.get("vpxdHostName")
        vb3 = metric.fields.get("vpxdVMName")
        vb4 = metric.fields.get("vpxdNewStatus")
        vb5 = metric.fields.get("vpxdOldStatus")
        vb6 = metric.fields.get("vpxdObjValue")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "VMware Inc"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "This trap is sent when entity status changed."
        
    
    return metric 
'''