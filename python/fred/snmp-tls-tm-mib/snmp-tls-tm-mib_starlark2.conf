[[processors.starlark]]
# MIB filename - SNMP-TLS-TM-MIB.txt
# MIB name - SNMP-TLS-TM-MIB
source = '''
def apply(metric):

    #============= snmpTlstmServerCertificateUnknown ===============================
    if metric.tags["name"] == "snmpTlstmServerCertificateUnknown":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("snmpTlstmSessionUnknownServerCertificate")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "ISMS Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Notification that the server certificate presented by an SNMPover (D)TLS server was invalid because no configuredfingerprint or CA was acceptable to validate it.  This may bebecause there was no entry in the snmpTlstmAddrTable orbecause no path could be found to known CertificationAuthority.To avoid notification loops this notification MUST NOT besent to servers that themselves have triggered thenotification."
        
    #============= snmpTlstmServerInvalidCertificate ===============================
    if metric.tags["name"] == "snmpTlstmServerInvalidCertificate":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("snmpTlstmAddrServerFingerprint")
        vb2 = metric.fields.get("snmpTlstmSessionInvalidServerCertificates")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "ISMS Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "Notification that the server certificate presented by an SNMPover (D)TLS server could not be validated even if thefingerprint or expected validation path was known.  That is acryptographic validation error occurred during certificatevalidation processing.To avoid notification loops this notification MUST NOT besent to servers that themselves have triggered thenotification."
        
    
    return metric 
'''