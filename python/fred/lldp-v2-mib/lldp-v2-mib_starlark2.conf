[[processors.starlark]]
# MIB filename - LLDP-V2-MIB.mib
# MIB name - LLDP-V2-MIB
source = '''
def apply(metric):

    #============= lldpV2RemTablesChange ===============================
    if metric.tags["name"] == "lldpV2RemTablesChange":
        
        # The following are the varbind mappings from the trap.    
        vb1 = metric.fields.get("lldpV2StatsRemTablesInserts")
        vb2 = metric.fields.get("lldpV2StatsRemTablesDeletes")
        vb3 = metric.fields.get("lldpV2StatsRemTablesDrops")
        vb4 = metric.fields.get("lldpV2StatsRemTablesAgeouts")
        
        

        # Adapt the following code to suit the individual Notification.
        metric.fields["agent"] = metric.tags["mib"]
        metric.fields["alertgroup"] = metric.tags["name"]
        metric.fields["alertkey"] = ""
        metric.fields["class"] = "IEEE 802.1 Working Group"
        metric.fields["eventid"] = ""
        metric.fields["firstoccurence"] = ""
        metric.fields["fqdn"] = ""
        metric.fields["node"] = metric.tags["source"]
        metric.fields["severity"] = ""
        metric.fields["summary"] = "A lldpV2RemTablesChange notification is sent when the valueof lldpV2StatsRemTablesLastChangeTime changes. It can beutilized by an NMS to trigger LLDP remote systems tablemaintenance polls.Note that transmission of lldpV2RemTablesChangenotifications are throttled by the agent as specified by thelldpV2NotificationInterval object."
        
    
    return metric 
'''